{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to my personal documentation repository! This repo is a collection of all the notes, guides, troubleshooting logs, and resources that I use in my daily. This includes everything from setting up full-stack applications to solving common errors.</p>"},{"location":"#folder-structure","title":"Folder Structure","text":"<p>Below is an overview of the folder structure and what each section contains:</p>"},{"location":"#development","title":"<code>/development</code>","text":"<p>This section contains detailed guides and documentation organized by various topics: - setup: Setup of various software, tools, stacks, etc.</p>"},{"location":"#error-solutions","title":"<code>/error-solutions</code>","text":"<p>A collection of error logs and their corresponding solutions: - development-errors: Errors faced during development</p>"},{"location":"#projects","title":"<code>/projects</code>","text":"<p>Documentation specific to different personal or work-related projects: - Project-specific setups, architectures, notes, etc.</p>"},{"location":"#learning","title":"<code>/learning</code>","text":"<p>A section dedicated to learning resources and materials: - docker - google-cloud-console</p>"},{"location":"#how-to-use","title":"How to Use","text":"<p>Feel free to browse through the directories to find the specific documentation, error and solution, or resources that you need. Each folder is organized to make it easy to locate the relevant information.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>This repository is primarily for my personal use, but if you find something useful and would like to contribute or suggest improvements, feel free to create an issue or submit a pull request.</p>"},{"location":"development/Tutorials/Logger%20Setup%20-%20Using%20Winston%20and%20Morgan/","title":"Logger Setup   Using Winston and Morgan","text":""},{"location":"development/Tutorials/Logger%20Setup%20-%20Using%20Winston%20and%20Morgan/#install-dependencies","title":"Install Dependencies","text":"<pre><code>npm install winston winston-daily-rotate-file\n</code></pre> <p>Create a logger.js in the utils of the backend source folder</p> <pre><code>const { createLogger, format, transports } = require(\"winston\");\nrequire(\"winston-daily-rotate-file\"); // For rotating logs\nconst path = require(\"path\");\n\nconst { combine, timestamp, json, printf, colorize, errors } = format;\nconst env = process.env.NODE_ENV || \"development\";\n\n// Custom formats\nconst consoleLogFormat = printf(({ level, message, timestamp, stack }) =&gt; {\n  return `${timestamp} ${level}: ${stack || message}`;\n});\n\nconst devFormat = combine(\n  colorize(),\n  timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  errors({ stack: true }), // Print stack trace for errors\n  consoleLogFormat\n);\n\nconst prodFormat = combine(\n  timestamp(),\n  errors({ stack: true }),\n  json()\n);\n\n// Create logger\nconst logger = createLogger({\n  level: env === \"development\" ? \"debug\" : \"info\", // Verbose in dev\n  format: env === \"development\" ? devFormat : prodFormat,\n  transports: [\n    new transports.Console(), // Console logging for all environments\n\n    // File transport with daily rotation\n    new transports.DailyRotateFile({\n      dirname: path.join(path.resolve(), \"logs\"), // Logs directory\n      filename: \"%DATE%-app.log\",\n      datePattern: \"YYYY-MM-DD\",\n      maxFiles: \"7d\", // Retain logs for 7 days\n      level: \"info\", // Log 'info' level and above\n    }),\n  ],\n});\n\nmodule.exports = logger;\n</code></pre> <p>now add the middleware in the app.js </p> <pre><code>const morgan = require(\"morgan\");\nconst logger = require(\"./logger\"); // Assuming logger is defined in logger.js\n\nconst morganFormat = \":method :url :status :response-time ms\";\n\n// Setup morgan to log requests using winston\napp.use(\n  morgan(morganFormat, {\n    stream: {\n      write: (message) =&gt; {\n        const logObject = {\n          method: message.split(\" \")[0],        // HTTP method (GET, POST, etc.)\n          url: message.split(\" \")[1],           // Request URL\n          status: message.split(\" \")[2],        // HTTP status code\n          responseTime: message.split(\" \")[3],  // Response time in milliseconds\n        };\n        logger.info(JSON.stringify(logObject)); // Log the object using winston\n      },\n    },\n  })\n);\n</code></pre>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/","title":"Node   Puppeteer","text":""},{"location":"development/Tutorials/Node%20-%20Puppeteer/#installation","title":"Installation","text":"<pre><code>npm install puppeteer\n</code></pre>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/#launch-a-browser","title":"Launch a browser","text":"<ol> <li> <p>Launching puppeteer browser <pre><code>     const browser = await puppeteer.launch({\n       headless: false,\n       defaultViewport: null,\n       args: [\"--start-maximized\"],\n     });\n</code></pre></p> </li> <li> <p>Launching your own browser <pre><code>    const browser = await puppeteer.launch({\n      executablePath:\n        \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\",\n      headless: false,\n      defaultViewport: null, // This allows the browser to open in full screen\n      args: [\"--start-fullscreen\"], // Full screen argument\n    });\n</code></pre></p> </li> </ol>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/#opening-new-page","title":"Opening new page","text":"<pre><code>const page = await browser.newPage();\nawait page.goto(\"https://www.geeksforgeeks.org/problem-of-the-day\");\n</code></pre>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/#click-on-link-and-get-new-page","title":"Click On link and get new page","text":"<pre><code>// Listen for new target (tab) creation\n    const [newPage] = await Promise.all([\n      new Promise((resolve) =&gt;\n        browser.once(\"targetcreated\", (target) =&gt; resolve(target.page()))\n      ),\n      page.click(\".ui.button.problemOfTheDay_POTDCntBtn__SSQfX\"),\n    ]);\n</code></pre>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/#type-on-a-input-box","title":"Type on a input box","text":"<pre><code>await newPage.waitForSelector(\".next_input\");\nconst inputbox = await newPage.$$(\".next_input\");\nawait inputbox[0].type(\"harshsharma20503\");\nawait inputbox[1].type(\"H@rsh123sharma\");\nawait newPage.click(\".notSocialLoginBtnText\");\n</code></pre>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/#get-all-links","title":"Get all links","text":"<pre><code>  const hrefs = await page.evaluate(() =&gt; {\n    // Select all &lt;a&gt; tags on the page\n    const anchorTags = document.querySelectorAll(\"a\");\n\n    // Extract and return the href attributes from all &lt;a&gt; tags\n    return Array.from(anchorTags)\n      .map((a) =&gt; a.href)\n      .filter((href) =&gt; href)\n      .filter((href) =&gt; href.includes(\"envType=daily-question\"));\n  });\n</code></pre>"},{"location":"development/Tutorials/Node%20-%20Puppeteer/#snippet","title":"Snippet","text":"<pre><code>import puppeteer from \"puppeteer\";\n\n(async () =&gt; {\n  try {\n    const page = await browser.newPage();\n    await page.goto(\"https://www.geeksforgeeks.org/problem-of-the-day\");\n\n    // Listen for new target (tab) creation\n    const [newPage] = await Promise.all([\n      new Promise((resolve) =&gt;\n        browser.once(\"targetcreated\", (target) =&gt; resolve(target.page()))\n      ),\n      page.click(\".ui.button.problemOfTheDay_POTDCntBtn__SSQfX\"),\n    ]);\n    await newPage.waitForNavigation();\n    //   console.log(\"Page content is ready: \", await newPage.content());\n    await newPage.waitForSelector(\n      \".signinButton.gfg_loginModalBtn.login-modal-btn\"\n    );\n    await newPage.click(\".signinButton.gfg_loginModalBtn.login-modal-btn\");\n\n    await newPage.waitForSelector(\".next_input\");\n\n    const inputbox = await newPage.$$(\".next_input\");\n\n    await inputbox[0].type(\"harshsharma20503\");\n    await inputbox[1].type(\"H@rsh123sharma\");\n    await newPage.click(\".notSocialLoginBtnText\");\n\n    //   await newPage.waitForSelector(\".mb15.next_input \");\n    //   await newPage.type(\".mb15.next_input \", \"harshsharma20503@gmail.com\");\n    //   await newPage.type(\".next_input\", \"H@rsh123sharma\");\n    //   await newPage.click(\".notSocialLoginBtnText\");\n\n    // Perform further actions if needed\n    await browser.close();\n  } catch (err) {\n    console.log(\"Error: \", err);\n  }\n})();\n</code></pre>"},{"location":"development/miscellaneous/Add%20environment%20variable%20in%20React-Vite/","title":"Add environment variable in React Vite","text":""},{"location":"development/miscellaneous/Add%20environment%20variable%20in%20React-Vite/#react","title":"React","text":"<p>Write every environment variable with prefix REACT_APP_.... e.g.</p> <pre><code>REACT_APP_URL = http://localhost:8080/\n</code></pre> <p>In the jsx file use the variable using </p> <pre><code>process.env.REACT_APP_URL\n</code></pre>"},{"location":"development/miscellaneous/Add%20environment%20variable%20in%20React-Vite/#vite","title":"Vite","text":"<p>Write every environment variable using prefix VITE_...</p> <pre><code>VITE_URL = http://localhost:8080/\n</code></pre> <p>In the jsx file use the variable using</p> <pre><code>import.meta.env.VITE_URL\n</code></pre>"},{"location":"development/miscellaneous/Add%20environment%20variable%20in%20React-Vite/#reference","title":"Reference","text":"<ul> <li>youtube</li> </ul>"},{"location":"development/miscellaneous/Add%20environment%20variable%20in%20React-Vite/#tags","title":"Tags","text":""},{"location":"development/miscellaneous/Add%20environment%20variable%20in%20React-Vite/#react-vite-environment-variables","title":"react #vite #environment-variables","text":""},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/","title":"Use Two GitHub Account from single PC","text":"<p>Reference - Gist</p> <p>Let suppose I have two github accounts, https://github.com/rahul-office and https://github.com/rahul-personal. Now i want to setup my mac to easily talk to both the github accounts.</p> <p>NOTE: This logic can be extended to more than two accounts also. :)</p> <p>The setup can be done in 5 easy steps:</p>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#steps","title":"Steps:","text":"<ul> <li>Step 1 : Create SSH keys for all accounts</li> <li>Step 2 : Add SSH keys to SSH Agent</li> <li>Step 3 : Add SSH public key to the Github</li> <li>Step 4 : Create a Config File and Make Host Entries</li> <li>Step 5 : Cloning GitHub repositories using different accounts </li> </ul>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#step-1","title":"Step 1","text":""},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#create-ssh-keys-for-all-accounts","title":"Create SSH keys for all accounts","text":"<p>First make sure your current directory is your .ssh folder. <pre><code>     $ cd ~/.ssh\n</code></pre> Syntax for generating unique ssh key for ann account is: <pre><code>     ssh-keygen -t rsa -C \"your-email-address\" -f \"github-username\"\n</code></pre> here,</p> <p>-C stands for comment to help identify your ssh key</p> <p>-f stands for the file name where your ssh key get saved</p>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#now-generating-ssh-keys-for-my-two-accounts","title":"Now generating SSH keys for my two accounts","text":"<pre><code>     ssh-keygen -t rsa -C \"my_office_email@gmail.com\" -f \"github-rahul-office\"\n     ssh-keygen -t rsa -C \"my_personal_email@gmail.com\" -f \"github-rahul-personal\"\n</code></pre> <p>Notice here rahul-office and rahul-work are the username of my github accounts corresponding to my_office_email@gmail.com and my_personal_email@gmail.com email ids respectively.</p> <p>After entering the command the terminal will ask for passphrase, leave it empty and proceed.</p> <p>Now after adding keys , in your .ssh folder, a public key and a private will get generated.</p> <p>The public key will have an extention .pub and private key will be there without any extention both having same name which you have passed after -f option in the above command. (in my case github-rahul-office and github-rahu-personal)</p> <p></p>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#step-2","title":"Step 2","text":""},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#add-ssh-keys-to-ssh-agent","title":"Add SSH keys to SSH Agent","text":"<p>Now we have the keys but it cannot be used until we add them to the SSH Agent. <pre><code>     ssh-add -K ~/.ssh/github-rahul-office\n     ssh-add -K ~/.ssh/github-rahul-personal\n</code></pre></p> <p>You can read more about adding keys to SSH Agent here. </p>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#step-3","title":"Step 3","text":""},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#add-ssh-public-key-to-the-github","title":"Add SSH public key to the Github","text":"<p>For the next step we need to add our public key (that we have generated in our previous step) and add it to corresponding github accounts.</p> <p>For doing this we need to:</p> <p>1. Copy the public key</p> <p><code>We can copy the public key either by opening the github-rahul-office.pub file in vim and then copying the content of it.</code> <pre><code>     vim ~/.ssh/github-rahul-office.pub\n     vim ~/.ssh/github-rahul-personal.pub\n</code></pre></p> <p>OR</p> <p>We can directly copy the content of the public key file in the clipboard.</p> <pre><code>     pbcopy &lt; ~/.ssh/github-rahul-office.pub\n     pbcopy &lt; ~/.ssh/github-rahul-personal.pub\n</code></pre> <ol> <li> <p>Paste the public key on Github</p> </li> <li> <p>Sign in to Github Account</p> </li> <li>Goto Settings &gt; SSH and GPG keys &gt; New SSH Key</li> <li>Paste your copied public key and give it a Title of your choice.</li> </ol> <p>OR</p> <ul> <li>Sign in to Github </li> <li>Paste this link in your browser (https://github.com/settings/keys) or click here</li> <li>Click on New SSH Key and paste your copied key. </li> </ul>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#step-4","title":"Step 4","text":""},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#create-a-config-file-and-make-host-entries","title":"Create a Config File and Make Host Entries","text":"<p>The ~/.ssh/config file allows us specify many config options for SSH.</p> <p>If config file not already exists then create one (make sure you are in ~/.ssh directory)</p> <pre><code>     touch config\n</code></pre> <p>The commands below opens config in your default editor....Likely TextEdit, VS Code. <pre><code>     open config\n</code></pre> Now we need to add these lines to the file, each block corresponding to each account we created earlier. <pre><code>     #rahul-office account\n     Host github.com-rahul-office\n          HostName github.com\n          User git\n          IdentityFile ~/.ssh/github-rahul-office\n\n     #rahul-personal account\n     Host github.com-rahul-personal\n          HostName github.com\n          User git\n          IdentityFile ~/.ssh/github-rahul-personal\n</code></pre> </p>"},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#step-5","title":"Step 5","text":""},{"location":"development/miscellaneous/Use%20Two%20GitHub%20Account%20from%20single%20PC/#cloning-github-repositories-using-different-accounts","title":"Cloning GitHub repositories using different accounts","text":"<p>So we are done with our setups and now its time to see it in action. We will clone a repository using one of the account we have added.</p> <p>Make a new project folder where you want to clone your repository and go to that directory from your terminal.</p> <p>For Example: I am making a repository on my personal github account and naming it TestRepo Now for cloning the repo use the below command:  <pre><code>    git clone git@github.com-{your-username}:{owner-user-name}/{the-repo-name}.git\n\n    [e.g.] git clone git@github.com-rahul-personal:rahul-personal/TestRepo.git\n</code></pre>   ## Finally</p> <p>From now on, to ensure that our commits and pushes from each repository on the system uses the correct GitHub user \u2014 we will have to configure user.email and user.name in every repository freshly cloned or existing before.</p> <p>To do this use the following commands.</p> <p><pre><code>     git config user.email \"my_office_email@gmail.com\"\n     git config user.name \"Rahul Pandey\"\n\n     git config user.email \"my-personal-email@gmail.com\"\n     git config user.name \"Rahul Pandey\"\n</code></pre> Pick the correct pair for your repository accordingly.</p> <p>To push or pull to the correct account we need to add the remote origin to the project <pre><code>     git remote add origin git@github.com-rahul-personal:rahul-personal\n\n     git remote add origin git@github.com-rahul-office:rahul-office\n</code></pre></p> <p>Now you can use: <pre><code>     git push\n\n     git pull\n</code></pre></p> <p>P.S:  If this gist has been helpful to you, kindly consider leaving a star.       If you'd like, let's connect on LinkedIn and build a supportive community together.</p>"},{"location":"development/setup/Chrome%20Extension%20Setup%20V3%20-%20Typescript/","title":"Chrome Extension Setup V3   Typescript","text":"<p>Coming Soon</p>"},{"location":"development/setup/Create%20React%20Native%20Mobile%20Application/","title":"Create React Native Mobile Application","text":""},{"location":"development/setup/Create%20React%20Native%20Mobile%20Application/#prerequisites","title":"Prerequisites","text":"<ol> <li>Node should be installed</li> <li>Android studio should be installed</li> <li>Java should be installed</li> <li>Environment variables should setup for both java and android sdk and packages</li> <li>Either a simulator (abd devices should be up and running or use USB to get output on your mobile phone).</li> <li>For all the step above follow the official documentation.</li> </ol> <p>Note: I will be only creating a android application, IOS have some extra steps involved so please refer some other documentation.</p>"},{"location":"development/setup/Create%20React%20Native%20Mobile%20Application/#initialising-react-native-project","title":"Initialising react native project","text":"<p>Run the the following command</p> <pre><code>npx react-native init &lt;project-name&gt;\n</code></pre> <p>A folder will be created with the name <code>&lt;project-name&gt;</code>. Go inside the folder.</p>"},{"location":"development/setup/Create%20React%20Native%20Mobile%20Application/#run-the-project","title":"Run the project","text":"<p>run the following command</p> <pre><code>npx react-native run-android\n</code></pre>"},{"location":"development/setup/Full%20Stack%20Mern%20Setup%20-%20Typescript/","title":"Full Stack Mern Setup   Typescript","text":"<p>Coming Soon</p>"},{"location":"development/setup/Mkdocs%20Setup/","title":"Mkdocs Setup","text":""},{"location":"development/setup/Mkdocs%20Setup/#running-setup-locally","title":"Running Setup Locally","text":"<ol> <li>Create python environment and activate it <pre><code>python3 venv env-name\nsource env-name/bin/activate\n</code></pre></li> <li>install <code>mkdocs</code> and <code>mkdocs-material</code> and some extensions and plugins <pre><code>pip3 install mkdocs mkdocs-material mkdocs-minify-plugin\n</code></pre></li> <li>Run the website via following command <pre><code>mkdocs serve\n</code></pre></li> <li>change the config file to the following  <pre><code># # Project Information\nsite_name: XOXO Docs\nsite_url: https://docs.xoxoharsh.in/\nsite_author: Harsh Sharma\nsite_description: &gt;-\n  My Personal Documentation Website for all my projects and blogs.\n\n# Repository\nrepo_name: harshsharma20503/docs\nrepo_url: https://github.com/harshsharma20503/docs\n\n# Copyright\ncopyright: Copyright &amp;copy; 2024 Harsh Sharma\n\n# Theme\ntheme:\n  name: material\n  logo: https://e7.pngegg.com/pngimages/392/294/png-clipart-documents-logo-docs-logo-documents-documentation.png\n  favicon: https://e7.pngegg.com/pngimages/392/294/png-clipart-documents-logo-docs-logo-documents-documentation.png\n  features:\n    - announce.dismiss\n    # - content.action.edit\n    # - content.action.view\n    - content.code.annotate\n    - content.code.copy\n    # - content.code.select\n    # - content.footnote.tooltips\n    # - content.tabs.link\n    - content.tooltips\n    # - header.autohide\n    # - navigation.expand\n    - navigation.footer\n    - navigation.indexes\n    # - navigation.instant\n    # - navigation.instant.prefetch\n    # - navigation.instant.progress\n    # - navigation.prune\n    # - navigation.sections\n    # - navigation.tabs\n    # - navigation.tabs.sticky\n    - navigation.top\n    - navigation.tracking\n    - search.highlight\n    - search.share\n    - search.suggest\n    - toc.follow\n    # - toc.integrate\n  palette:\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: indigo\n      accent: indigo\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      primary: black\n      accent: indigo\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\n  font:\n    text: Roboto\n    code: Roboto Mono\n  language: en\n# # Plugins\nplugins:\n  # - blog\n  - search:\n      separator: '[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&amp;[lg]t;|(?!\\b)(?=[A-Z][a-z])'\n  - minify:\n      minify_html: true\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/harshsharma20503\n      name: GitHub\n    - icon: fontawesome/brands/linkedin\n      link: https://www.linkedin.com/in/harshsharma20503/\n      name: LinkedIn\n  generator: false\nmarkdown_extensions:\n  - abbr\n  - admonition\n  - attr_list\n  - def_list\n  - footnotes\n  - md_in_html\n  - toc:\n      permalink: true\n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.keys\n  - pymdownx.magiclink:\n      normalize_issue_symbols: true\n      repo_url_shorthand: true\n      user: squidfunk\n      repo: mkdocs-material\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.snippets:\n      auto_append:\n        - includes/mkdocs.md\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed:\n      alternate_style: true\n      combine_header_slug: true\n      slugify: !!python/object/apply:pymdownx.slugs.slugify\n        kwds:\n          case: lower\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.tilde\n</code></pre></li> <li>Open the docs folder as vault in Obsidian</li> <li>Write the docs using Obsidian</li> </ol>"},{"location":"development/setup/Mkdocs%20Setup/#deploying-the-setup","title":"Deploying the setup","text":"<pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/","title":"Node Backend Setup   Typescript","text":""},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/#1-project-setup","title":"1. Project Setup:","text":"<ul> <li> <p>Create a new directory: <pre><code>mkdir my-ts-project\ncd my-ts-project\n</code></pre></p> </li> <li> <p>Initialize npm: <pre><code>npm init -y\n</code></pre></p> </li> <li> <p>Install Dependencies: <pre><code>npm install express\nnpm install typescript ts-node @types/express --save-dev\nnpm install nodemon --save-dev\n</code></pre></p> </li> </ul>"},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/#configure-typescript","title":"Configure Typescript","text":"<ul> <li> <p>Initialise typescript configuration <pre><code>npx tsx --init\n</code></pre></p> </li> <li> <p>Update tsconfig.json file For using the <code>require</code> syntax <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true\n  }\n}\n</code></pre></p> </li> </ul> <p>For using the import syntax <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",        // Ensure compatibility with modern JavaScript\n    \"module\": \"ESNext\",        // Use ES Modules\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"node\",  // Ensure module resolution works correctly\n    \"resolveJsonModule\": true,   // If you plan to import JSON\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n</code></pre></p> <ul> <li>Configure <code>package.json</code> file: For using <code>import</code> syntax <pre><code>{\n  \"name\": \"my-ts-server\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",  // This enables ESM\n    \"scripts\": {\n      \"start\": \"node dist/index.js\",\n      \"dev\": \"nodemon --watch src --exec 'ts-node --esm' src/index.ts\",\n      \"build\": \"tsc\"\n    }\n  \"dependencies\": {\n    \"express\": \"^4.18.2\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^4.9.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"nodemon\": \"^2.0.19\",\n    \"@types/express\": \"^4.17.14\"\n  }\n}\n</code></pre></li> </ul> <p>For using <code>require</code> syntax <pre><code>\"scripts\": {\n  \"start\": \"node dist/index.js\",\n  \"dev\": \"nodemon --watch src --exec ts-node src/index.ts\",\n  \"build\": \"tsc\"\n}\n</code></pre></p>"},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/#setup-folder-structure","title":"Setup Folder structure","text":"<ul> <li>Create src folder and than internal folders <pre><code>mkdir src public\ntouch .env .env.dev\ncd public\nmkdir temp\ncd temp\ntouch .gitkeep\ncd ../../src\ncd src\ntouch index.ts app.ts \nmkdir controllers models routes middlewares config scripts utils\n</code></pre> .env to store environment variables and .env.dev to store the enviornement variable names so that it could be pushed to GitHub</li> </ul>"},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/#basic-server-code","title":"Basic Server code","text":"<pre><code>import express, { Request, Response } from \"express\";\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\n\napp.get(\"/\", (req: Request, res: Response) =&gt; {\n  res.send(\"Hello, TypeScript with Node and Express!\");\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/#run-in-development","title":"Run in development","text":"<ul> <li>Run the command <code>npm run dev</code> to run the project <code>Note</code>: There might be error <code>TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\"</code>, this error can be resolved by installing node version 19 because ts-node is not updated to the latest node version. Use NVM to install node verison 19</li> </ul>"},{"location":"development/setup/Node%20Backend%20Setup%20-%20Typescript/#run-in-production","title":"Run in production","text":"<ul> <li><code>npm build</code> and then <code>npm start</code></li> </ul>"},{"location":"development/setup/Obsidian%20Setup/","title":"Obsidian Setup","text":""},{"location":"development/setup/Obsidian%20Setup/#1-download-and-install-obsidian","title":"1. Download and Install Obsidian","text":"<ul> <li>Go to the Obsidian website.</li> <li>Download the appropriate installer for your operating system (Windows, macOS, or Linux).</li> <li>Install the application by following the on-screen instructions.</li> </ul>"},{"location":"development/setup/Obsidian%20Setup/#2-changes-in-settings","title":"2. Changes in Settings","text":"<ul> <li>Add English to the <code>Spellcheck languages</code> in  <code>Editor</code> section in the <code>settings</code> and remove English (united kingdom).</li> <li>Set <code>default location for new notes</code> to <code>same folder as current file</code> in <code>Files and links</code> section.</li> <li>Set <code>default location for new attachments</code> to <code>in subfolder under current folder</code> in <code>Files and links</code> section. Write <code>attachments</code> as the subfolder name.</li> <li>Set the <code>themes</code> to <code>obsidianite</code> in <code>appearance</code> section.</li> <li>Set <code>default location of new canvas</code> to <code>same folder as current file</code> in <code>Canvas</code> Section.</li> <li>Set <code>New link format</code> to <code>Relative path to file</code> and disable <code>Wikilinks</code> in the <code>files and links</code> section to be able to use Mkdocs or other markdown to static site builder.</li> </ul>"},{"location":"development/setup/Obsidian%20Setup/#3-get-the-previous-vault","title":"3. Get the previous Vault","text":"<ul> <li>run the command <code>git clone https://github.com/HarshSharma20503/docs.git</code></li> <li>open the folder as vault in obsidian</li> </ul>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/","title":"React Frontend Setup   Typescript","text":""},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#installing-react-using-vite-bundler","title":"Installing React using vite bundler","text":"<p>Create a folder in which you want to create your project. Write following command in it.</p> <pre><code>npm create vite@latest\n</code></pre> <p>Answer all the question related to it.</p> <pre><code> Project name: \u2026 &lt;project-name&gt;\n\u2714 Package name: \u2026 &lt;package-name&gt;\n\u2714 Select a framework: \u203a React\n\u2714 Select a variant: \u203a Typescript\n\nScaffolding project in /home/../..\n\nDone. Now run:\n  cd &lt;project-name&gt;\n  npm install\n  npm run dev\n</code></pre> <p>Run \\(npm \\space install\\) to install node modules.</p> <pre><code>npm install\n</code></pre> <p>Now to run the file write following command in terminal</p> <pre><code>npm run dev\n</code></pre>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#removing-unnecessary-files","title":"Removing Unnecessary files","text":"<p>Remove the following files - public/vite.svg - assets folder</p> <p>Remove the icon from index.html and the extra meta tags and put your own meta tags like icon, title and description.</p> <p>Clear the app.css, index.css and app.jsx file. Write rafce (used to create react arrow functional component) and start making changes.</p> <p>The index.html will look something like this</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;!-- Favicon --&gt;\n    &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/path/to/favicon.svg\" /&gt;\n    &lt;!-- Responsive design for mobile devices --&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;!-- Page title --&gt;\n    &lt;title&gt;Generic Website Title&lt;/title&gt;\n    &lt;!-- Page description for SEO --&gt;\n    &lt;meta\n      name=\"description\"\n      content=\"This is a generic description for your website, helping improve SEO by describing the content of your page.\"\n    /&gt;\n    &lt;!-- Keywords for SEO --&gt;\n    &lt;meta\n      name=\"keywords\"\n      content=\"generic, keywords, website, SEO, description\"\n    /&gt;\n\n    &lt;!-- Open Graph Meta Tags for social sharing --&gt;\n    &lt;meta\n      property=\"og:title\"\n      content=\"Generic Open Graph Title\"\n    /&gt;\n    &lt;meta\n      property=\"og:description\"\n      content=\"This is a generic description for Open Graph, used when sharing the website on social platforms.\"\n    /&gt;\n    &lt;meta\n      property=\"og:image\"\n      content=\"https://example.com/path/to/og-image.jpg\"\n    /&gt;\n    &lt;meta property=\"og:url\" content=\"https://example.com\" /&gt;\n\n    &lt;!-- Twitter Card Meta Tags for sharing on Twitter --&gt;\n    &lt;meta name=\"twitter:card\" content=\"summary_large_image\" /&gt;\n    &lt;meta\n      name=\"twitter:title\"\n      content=\"Generic Twitter Title\"\n    /&gt;\n    &lt;meta\n      name=\"twitter:description\"\n      content=\"This is a generic description for Twitter Card, used when sharing the website on Twitter.\"\n    /&gt;\n    &lt;meta\n      name=\"twitter:image\"\n      content=\"https://example.com/path/to/twitter-image.jpg\"\n    /&gt;\n\n    &lt;!-- Compatibility for older IE versions --&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- Root element for app --&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;!-- Main script (app entry point) --&gt;\n    &lt;script type=\"module\" src=\"/path/to/main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#setting-up-folders-and-files","title":"Setting up folders and files","text":"<ul> <li>Create a \\(components\\) folder inside the src to store the components.</li> <li>Create a \\(pages\\) folder inside the src to store the pages files.</li> <li>Create a \\(utils\\) folder inside the src to store the utility functions.</li> </ul> <p>Create .prettierrc and add the configurations <pre><code>{\n    \"singleQuote\": false,\n    \"bracketSpacing\": true,\n    \"tabWidth\": 4,\n    \"trailingComma\": \"es5\",\n    \"semi\": true\n}\n</code></pre></p> <p>Create .prettierignore and add the configurations. You can also use prettierignore generator to generate it.</p> <pre><code>*.env\n.env\n.env.*\n/.vscode\n/node_modules\n./dist\n</code></pre>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#create-your-apicall-util-function","title":"Create your APICall Util function","text":"<ol> <li> <p>Install <code>Axios</code> package <pre><code>npm install axios\n</code></pre></p> </li> <li> <p>Create a ApiCall.ts file in the utils folder and paste the following code <pre><code>import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\n\n// Create an Axios instance\nconst axiosInstance: AxiosInstance = axios.create({\n  baseURL: import.meta.env.VITE_SERVER_URL, // Base URL for requests\n  timeout: 10000, // Timeout for requests\n  headers: {\n    \"Content-Type\": \"application/json\", // Default content type\n  },\n});\n\n// Request interceptor to include token\naxiosInstance.interceptors.request.use(\n  (config) =&gt; {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) =&gt; Promise.reject(error) // Handle request error\n);\n\n// Response interceptor for global error handling\naxiosInstance.interceptors.response.use(\n  (response) =&gt; response, // Return response as is\n  (error) =&gt; {\n    console.error(\n      \"Global error handler:\",\n      error.response?.data || error.message\n    );\n    return Promise.reject(error); // Pass error to the catch block\n  }\n);\n\ninterface ApiCallOptions {\n  url: string;\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\";\n  data?: any;\n  headers?: Record&lt;string, string&gt;;\n}\n\n// Function to handle API errors\nconst handleApiError = (error: any) =&gt; {\n  if (error.response) {\n    console.error(\"API Error:\", error.response.data);\n    switch (error.response.status) {\n      case 401:\n        console.error(\"Unauthorized access. Please log in again.\");\n        break;\n      case 404:\n        console.error(\"Requested resource not found.\");\n        break;\n      case 500:\n        console.error(\"Server error. Please try again later.\");\n        break;\n      default:\n        console.error(\"An unexpected error occurred.\");\n    }\n  } else if (error.request) {\n    console.error(\"No response received from the server.\");\n  } else {\n    console.error(\"Error setting up the request:\", error.message);\n  }\n};\n\n// API call function\nexport const apiCall = async &lt;T&gt;({\n  url,\n  method,\n  data,\n  headers = {},\n}: ApiCallOptions): Promise&lt;T | null&gt; =&gt; {\n  try {\n    const config: AxiosRequestConfig = {\n      url,\n      method,\n      headers: {\n        ...headers,\n        // Default headers if necessary\n      },\n      data,\n    };\n\n    const response: AxiosResponse&lt;T&gt; = await axiosInstance(config);\n    return response.data ?? null; // Handle null or undefined data\n  } catch (error) {\n    handleApiError(error); // Handle errors using the internal error handler\n    return null;\n  }\n};\n</code></pre></p> </li> <li> <p>How to use that apicall function <pre><code>interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\n// Define the API endpoint and request options\nconst fetchUserData = async (userId: number) =&gt; {\n  try {\n    const result = await apiCall&lt;User&gt;({\n      url: `/users/${userId}`,\n      method: \"GET\",\n    });\n\n    if (result) {\n      console.log(\"User Data:\", result);\n    } else {\n      console.log(\"No data returned from the API.\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching user data:\", error);\n  }\n};\n\n// Call the function to fetch user data\nfetchUserData(1); // Replace 1 with the actual user ID you want to fetch\n</code></pre></p> </li> </ol>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#setup-different-component-libraries-or-styling-mechanism","title":"Setup Different Component libraries or styling mechanism","text":"<ol> <li>Some basic css stuff in index.css <pre><code>:root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --background-color: #f4f4f4;\n  --text-color: #333;\n  --header-footer-bg: #333;\n  --card-bg: #fff;\n  --border-color: #ddd;\n  --button-hover-bg: #2980b9;\n  --font-family: \"Arial\", sans-serif;\n  --font-size: 16px;\n  --line-height: 1.6;\n}\n\n/* Global Styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  font-family: var(--font-family);\n  line-height: var(--line-height);\n  color: var(--text-color);\n  background-color: var(--background-color);\n  height: 100%; /* Ensures body takes full height */\n}\n</code></pre></li> </ol>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#different-ui-libraries","title":"Different UI Libraries","text":"<ul> <li>React Bootstrap</li> </ul>"},{"location":"development/setup/React%20Frontend%20Setup%20-%20Typescript/#setup-storage","title":"Setup Storage","text":"<ul> <li>Context API - Hitesh Chaudhary (Youtube)</li> </ul>"},{"location":"development/snippets/ai/Gemini%20Api/","title":"Gemini Api","text":"<pre><code>import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst GetGiminiResponse = async (prompt) =&gt; {\n    try {\n        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\n        const generationConfig = {\n            maxOutputTokens: 250,\n            temperature: 0, //this is used to control the randomness of the output, it ranges from 0 to 1, the higher the value the more random the output\n            topP: 1,\n            topK: 16, //this is used to control the diversity of the output, it ranges from 1 to infinity, the higher the value the more diverse the output\n        };\n\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-pro\",\n            generationConfig,\n        });\n\n        const result = await model.generateContent(prompt);\n        const response = result.response;\n        const text = response.text();\n        return text;\n    } catch (e) {\n        console.log(e);\n        return \"Error Generating AI response. Please try again later.\";\n    }\n};\n\nconst Prompt = \"Write a program to print hello world in C++\";\nconst GeminiResponse = await GetGiminiResponse(Prompt);\nconsole.log(GeminiResponse);\n</code></pre>"},{"location":"development/snippets/firebase/Firebase%20Cloud%20Messaging%20FCM/","title":"Firebase Cloud Messaging FCM","text":""},{"location":"development/snippets/firebase/Firebase%20Cloud%20Messaging%20FCM/#website-notification-react","title":"Website Notification (React)","text":""},{"location":"development/snippets/firebase/Firebase%20Cloud%20Messaging%20FCM/#steps","title":"Steps","text":"<ol> <li>Set up the firebase project and copy the configuration file.</li> <li>Create a file named firebase-messaging-sw.js in the public folder of the source code. write the following code. <pre><code>importScripts(\n  \"https://www.gstatic.com/firebasejs/9.16.0/firebase-app-compat.js\"\n);\nimportScripts(\n  \"https://www.gstatic.com/firebasejs/9.16.0/firebase-messaging-compat.js\"\n);\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD6YDqr6n-xQIJgg3MH6Zwb511LeuY_Faw\",\n  authDomain: \"red-alert-a6d6f.firebaseapp.com\",\n  projectId: \"red-alert-a6d6f\",\n  storageBucket: \"red-alert-a6d6f.appspot.com\",\n  messagingSenderId: \"373170844915\",\n  appId: \"1:373170844915:web:828a276a71efbbfd547386\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\n\nmessaging.onBackgroundMessage((payload) =&gt; {\n  console.log(\"Received background message \", payload);\n\n  const notificationTitle = payload.data.title;\n  const notificationOptions = {\n    body: payload.data.body,\n    icon: \"./images/logo.png\",\n    vibrate: [200, 100, 200, 100, 200, 100, 200],\n    tag: \"test-tag\",\n    data: {\n      url: \"https://web.dev/push-notifications-overview/\",\n    },\n  };\n\n  return self.registration.showNotification(\n    notificationTitle,\n    notificationOptions\n  );\n});\n</code></pre></li> </ol> <p>This code sets up Firebase Cloud Messaging (FCM) for a web application to handle background notifications. It initialises Firebase with the provided configuration and listens for incoming messages while the app is in the background. When a background message is received, it displays a notification with a title and body, along with an icon and vibration pattern. The notification also includes a URL for further action when clicked.</p> <ol> <li>Write the following code to request for notification and get the notification token required for pushing notification. <pre><code>  const requestNotificationPermission = async () =&gt; {\n    try {\n      const permission = await Notification.requestPermission();\n      if (permission === \"granted\") {\n        console.log(\"Notification permission granted\");\n        const notificationToken = await getToken(messaging, {\n          vapidKey: import.meta.env.VITE_VAPID_KEY,\n        });\n        console.log(\"Token\", notificationToken);\n        // const response = await apiCall({\n        //   url: \"/api/user/notification-token\",\n        //   method: \"POST\",\n        //   data: { notificationToken },\n        // });\n        // console.log(\"Response\", response);\n      } else if (permission === \"denied\") {\n        toast.error(\n          \"Please allow notification permission to get notified about stock updates\"\n        );\n      }\n    } catch (err) {\n      console.log(\"Error in requesting notification permission\");\n      console.log(err);\n    }\n  };\n\n    useEffect(()=&gt;{\n        requestNotificationPermission();\n    },[])\n</code></pre> This code defines an asynchronous function, requestNotificationPermission, that requests permission from the user to send notifications. If granted, it retrieves a notification token using Firebase Cloud Messaging and logs it to the console. If permission is denied, it displays an error message prompting the user</li> </ol> <p>you can store the token in the database and use that token to send notification to the users.</p>"},{"location":"development/snippets/firebase/Firebase%20Cloud%20Messaging%20FCM/#send-notification-from-server","title":"Send Notification from server","text":""},{"location":"development/snippets/firebase/Firebase%20Cloud%20Messaging%20FCM/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Make sure to allow the notifications in browser and operating system.</li> </ol>"},{"location":"development/snippets/npm-packages/Axios/","title":"Axios","text":""},{"location":"development/snippets/npm-packages/Axios/#installation","title":"Installation","text":"<pre><code>npm install axios\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#basic-code","title":"Basic Code","text":"<pre><code>const getUser = async () =&gt; {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#set-default-url","title":"Set default URL","text":"<ul> <li>In the starting file of react application write the following  <pre><code>if (import.meta.env.DEV) { //for vite application\n    console.log(\"Running in development mode\");\n    axios.defaults.baseURL = import.meta.env.VITE_LOCALHOST;\n} else {\n    console.log(\"Running in production mode\");\n    axios.defaults.baseURL = import.meta.env.VITE_SERVER_URL;\n}\n</code></pre></li> </ul> <p>Reference Link -&gt; Vitejs.dev</p> <p>You do not require to create .Dev environment variables in .env, it is default for vite application  For other react application you can use  following :</p> <pre><code>if (process.env.NODE_ENV === \"development\") {\n    console.log(\"Running in development mode\");\n    axios.defaults.baseURL = process.env.REACT_APP_LOCALHOST;\n} else {\n    console.log(\"Running in production mode\");\n    axios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;\n}\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#set-protected-call-function","title":"Set protected call function","text":""},{"location":"development/snippets/npm-packages/Axios/#method-1-when-backend-returns-a-message","title":"Method 1 - When backend returns a message","text":"<pre><code>import axios from \"axios\";\nimport Cookies from \"js-cookie\";\n\nasync function ApiCall(url, httpMethod, data) {\n    const token = Cookies.get(\"studentsToken\") || Cookies.get(\"professorsToken\");\n    try {\n        const config = {\n            headers: {\n                Authorization: `Bearer ${token}`,\n            },\n        };\n        if (httpMethod === \"GET\") {\n            const response = await axios.get(url, config);\n            if (response.data.message === \"Invalid token\" || response.data.message === \"No Token Provided\") {\n                // remove Cookies if used\n                window.location.href = \"/\";\n            }\n            return response;\n        } else if (httpMethod === \"POST\") {\n            const response = await axios.post(url, data, config);\n            if (response.data.message === \"Invalid token\" || response.data.message === \"No Token Provided\") {\n                // remove Cookies if used\n                window.location.href = \"/\";\n            }\n            return response;\n        }\n    } catch (error) {\n        console.error(\"Error in API call:\", error);\n        throw error;\n    }\n}\n\nexport default ApiCall;\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#method-2-when-backend-return-status-code","title":"Method 2 - When Backend return status code","text":"<pre><code>import { toast } from \"react-toastify\";\nimport axios from \"axios\";\n\nconst ApiCall = async (url, method, navigate, data) =&gt; {\n  console.log(\"******** Inside ApiCall function ********\");\n\n  if (method === \"GET\") {\n    try {\n      const response = await axios.get(url);\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in API call:\", error);\n      if (error.response.status === 401) {\n        toast.error(\"You are not authorized to access this page. Please login first.\");\n        navigate(\"/login\");\n      } else if (error.response.status === 404) {\n        toast.error(\"The requested resource was not found.\");\n        navigate(\"/\");\n      } else if (error.response.status === 500) {\n        toast.error(\"Server Error. Please try again later.\");\n        navigate(\"/\");\n      } else {\n        toast.error(\"An error occurred. Please try again later.\");\n        navigate(\"/\");\n      }\n    }\n  } else if (method === \"POST\") {\n    try {\n      const response = await axios.post(url, data);\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in API call:\", error);\n      if (error.response.status === 401) {\n        toast.error(\"You are not authorized to access this page. Please login first.\");\n        navigate(\"/login\");\n      } else if (error.response.status === 404) {\n        toast.error(\"The requested resource was not found.\");\n        navigate(\"/\");\n      } else if (error.response.status === 500) {\n        toast.error(\"Server Error. Please try again later.\");\n        navigate(\"/\");\n      } else {\n        toast.error(\"An error occurred. Please try again later.\");\n        navigate(\"/\");\n      }\n    }\n  }\n};\n\nexport default ApiCall;\n</code></pre> <p>Make axios call using protected function</p> <pre><code>import ApiCall from \"../../util/ApiCall\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Discover = () =&gt; {\n  const navigate = useNavigate();\n\n  useEffect(() =&gt; {\n    const getUser = async () =&gt; {\n      const response = await ApiCall(\"/user/getDetails\", \"GET\", navigate, null);\n      console.log(response.data);\n      setUser(response.data.name);\n    };\n    getUser();\n  }, []);\n\n  return &lt;&gt;&lt;/&gt;;\n};\n\nexport default Discover;\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#send-post-request-with-token","title":"Send post request with token","text":"<pre><code>const config = {\n                headers: {\n                    Authorization: `Bearer ${\n                        JSON.parse(localStorage.getItem(\"userInfo\")).jwt\n                    }`,\n                },\n            };\n            const res = await axios.post(\n                \"/admin/sendTicketafterVerification/\",\n                {},\n                config\n            );\n            console.log(\"After Sending Ticket\", res);\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#send-get-request-with-token","title":"Send get request with token","text":"<pre><code>const response = await axios.get(\n                `/admin/verify/${props.details._id}`,\n                config\n            );\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#how-to-show-uploading-of-file-in-frontend","title":"How to show uploading of file in frontend","text":"<p>Yes, you can add a feature to show the upload percentage of the file using Axios's <code>onUploadProgress</code> event. This event allows you to track the progress of the upload and update the state accordingly. Here's how you can do it:</p>"},{"location":"development/snippets/npm-packages/Axios/#updated-frontend-code-with-upload-progress","title":"Updated Frontend Code with Upload Progress","text":"<p>FileUpload.js:</p> <pre><code>import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst FileUpload = () =&gt; {\n  const [file, setFile] = useState(null);\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n\n  const handleFileChange = (e) =&gt; {\n    setFile(e.target.files[0]);\n  };\n\n  const handleNameChange = (e) =&gt; {\n    setName(e.target.value);\n  };\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', name);\n\n    try {\n      const res = await axios.post('http://localhost:5000/upload', formData, {\n        onUploadProgress: (progressEvent) =&gt; {\n          const { loaded, total } = progressEvent;\n          const percent = Math.round((loaded * 100) / total);\n          setUploadPercentage(percent);\n        },\n      });\n\n      setMessage(res.data.message);\n      setUploadPercentage(0); // Reset progress bar on successful upload\n    } catch (err) {\n      console.error(err);\n      setMessage('Upload failed');\n      setUploadPercentage(0); // Reset progress bar on error\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;input type=\"text\" placeholder=\"Enter name\" value={name} onChange={handleNameChange} /&gt;\n        &lt;input type=\"file\" onChange={handleFileChange} /&gt;\n        &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n      &lt;/form&gt;\n      {uploadPercentage &gt; 0 &amp;&amp; (\n        &lt;div&gt;\n          &lt;progress value={uploadPercentage} max=\"100\"&gt;{uploadPercentage}%&lt;/progress&gt;\n          &lt;span&gt;{uploadPercentage}%&lt;/span&gt;\n        &lt;/div&gt;\n      )}\n      &lt;p&gt;{message}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default FileUpload;\n</code></pre>"},{"location":"development/snippets/npm-packages/Axios/#explanation","title":"Explanation:","text":"<ol> <li>State Management:</li> <li> <p><code>uploadPercentage</code>: State to keep track of the upload percentage.</p> </li> <li> <p>Event Handlers:</p> </li> <li><code>handleFileChange</code>: Updates the file state when a file is selected.</li> <li><code>handleNameChange</code>: Updates the name state when the input value changes.</li> <li> <p><code>handleSubmit</code>: Handles form submission, sets up the <code>FormData</code>, and makes the Axios request with <code>onUploadProgress</code>.</p> </li> <li> <p>Axios Request:</p> </li> <li>The <code>onUploadProgress</code> event is used to track the upload progress. It receives a <code>progressEvent</code> object, from which you can extract the <code>loaded</code> and <code>total</code> bytes.</li> <li> <p>Calculate the upload percentage and update the <code>uploadPercentage</code> state.</p> </li> <li> <p>Render:</p> </li> <li>Displays a progress bar and percentage text if <code>uploadPercentage</code> is greater than 0.</li> <li>Shows the response message or an error message after the upload attempt.</li> </ol>"},{"location":"development/snippets/npm-packages/Axios/#backend-code-unchanged","title":"Backend Code (unchanged):","text":"<p>server.js: <pre><code>const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\n\nconst app = express();\nconst PORT = 5000;\n\n// Set up storage engine\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) =&gt; {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) =&gt; {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  },\n});\n\n// Initialize upload\nconst upload = multer({ storage });\n\n// Middleware to handle file upload and name\napp.post('/upload', upload.single('file'), (req, res) =&gt; {\n  try {\n    const { name } = req.body;\n    console.log(req.file); // File information\n    console.log(name); // Name information\n    res.status(200).json({ message: 'File and name uploaded successfully', file: req.file, name });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Upload failed', error });\n  }\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n</code></pre></p>"},{"location":"development/snippets/npm-packages/Axios/#summary","title":"Summary","text":"<ul> <li>The frontend code now includes an upload progress bar that updates in real-time using Axios's <code>onUploadProgress</code> event.</li> <li>The progress bar and percentage are displayed during the file upload process, providing feedback to the user.</li> </ul> <p>With this implementation, users will see a progress bar indicating the percentage of the file that has been uploaded, enhancing the user experience.</p>"},{"location":"development/snippets/npm-packages/React-toastify/","title":"React toastify","text":""},{"location":"development/snippets/npm-packages/React-toastify/#installation","title":"Installation","text":"<p>Install the package</p> <pre><code>npm install react-toastify\n</code></pre>"},{"location":"development/snippets/npm-packages/React-toastify/#usage","title":"Usage","text":"<p>Inside your main file (App.jsx)</p> <pre><code>import { ToastContainer } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;ToastContainer position='top-center'/&gt;\n    &lt;/div&gt;\n);\n}\n</code></pre> <p>Now to show toast you can import toast and use it wherever you want</p> <pre><code>import { toast} from 'react-toastify';\n\nfunction Component() {\n  return (\n    &lt;div className=\"Section\"&gt;\n      toast.info(\"Loged in Successfully\");\n      toast.error('Enter College Email-ID (Should have @mail in it)');\n      toast.success(\"Logging successfull\");\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"development/snippets/npm-packages/React-toastify/#customisation","title":"Customisation","text":"<p>For Customisation you can add property to the ToastContainer or toast itself</p> <pre><code>&lt;ToastContainer\n    position=\"top-right\"\n    autoClose={2000}\n    hideProgressBar={false}\n    newestOnTop={false}\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable\n    pauseOnHover\n    theme=\"light\"\n/&gt;\ntoast('\ud83e\udd84 Wow so easy!', {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: \"light\",\n});\n</code></pre>"},{"location":"development/snippets/npm-packages/React-toastify/#reference","title":"Reference","text":"<p>npm package docs</p>"},{"location":"development/snippets/npm-packages/Socket.io/","title":"Socket.io","text":"<ol> <li>Install the socket.io package inside the backend folder <code>npm i socket.io</code></li> <li>inside the index.js create the socket server <pre><code>import dotenv from \"dotenv\";\nimport connectDB from \"./config/connectDB.js\";\nimport { app } from \"./app.js\";\nimport { Server } from \"socket.io\";\n\ndotenv.config();\n\nconst port = process.env.PORT || 8000;\n\nconnectDB()\n  .then(() =&gt; {\n    console.log(\"Database connected\");\n    const server = app.listen(port, () =&gt; {\n      console.log(`Server listening on port ${port}`);\n    });\n\n    const io = new Server(server, {\n      pingTimeout: 60000,\n      cors: {\n        origin: \"*\",\n      },\n    });\n\n    io.on(\"connection\", (socket) =&gt; {\n      console.log(\"Connected to socket\");\n      socket.on(\"setup\", (userData) =&gt; {\n        console.log(\"Connected to socket in setup: \", userData.username);\n        socket.join(userData._id);\n        socket.emit(\"connected\");\n      });\n      socket.off(\"setup\", () =&gt; {\n        console.log(\"Disconnected from socket\");\n        socket.leave(userData._id);\n      });\n    });\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });\n</code></pre></li> <li>socket.on means creating a listener that will listen to the event from the client</li> <li>connection is special listener <pre><code>io.on(\"connection\", (socket) =&gt; {\n  console.log(\"Connected to socket\");\n\n});\n</code></pre></li> <li>Corresponding the frontend will look like <pre><code>socket = io(\"url of the backend\");\n</code></pre></li> <li>After connection you can create different event listeners using the socket <pre><code>io.on(\"connection\", (socket) =&gt; {\n  console.log(\"Connected to socket\");\n\n  socket.on(\"join chat\", (room) =&gt; {\n    console.log(\"Joining chat: \", room);\n    socket.join(room);\n    console.log(\"Joined chat: \", room);\n  });\n\n});\n</code></pre></li> <li>Inside the frontend you can call for the event using emit <pre><code>socket.emit(\"join chat\", id);\n</code></pre></li> <li>similarly you can define event listeners in the frontend and than emit message or something to them from backend.</li> <li><code>io.to(id).emit(\"message recieved\", newMessage)</code> can be used to send message to a particular room;</li> <li>make sure to remove the event listeners using off  <pre><code>useEffect(() =&gt; {\n    socket = io(axios.defaults.baseURL);\n    if (user) {\n      socket.emit(\"setup\", user);\n    }\n    socket.on(\"connected\", () =&gt; setSocketConnected(true));\n    socket.on(\"typing\", () =&gt; setIsTyping(true));\n    socket.on(\"stop typing\", () =&gt; setIsTyping(false));\n    socket.on(\"message recieved\", (newMessageRecieved) =&gt; {\n      console.log(\"New Message Recieved: \", newMessageRecieved);\n      console.log(\"Selected Chat: \", selectedChat);\n      console.log(\"Selected Chat ID: \", selectedChat.id);\n      console.log(\"New Message Chat ID: \", newMessageRecieved.chatId._id);\n      if (selectedChat &amp;&amp; selectedChat.id === newMessageRecieved.chatId._id) {\n        setChatMessages((prevState) =&gt; [...prevState, newMessageRecieved]);\n      }\n    });\n    return () =&gt; {\n      socket.off(\"connected\");\n      socket.off(\"typing\");\n      socket.off(\"stop typing\");\n      socket.off(\"message recieved\");\n    };\n}, [selectedChat]);\n</code></pre></li> </ol>"},{"location":"development/snippets/npm-packages/react-router-dom/","title":"React router dom","text":""},{"location":"development/snippets/npm-packages/react-router-dom/#installation","title":"Installation","text":"<pre><code>npm install react-router-dom\n</code></pre> <p>Inside main.jsx or app.jsx wrap the browserRouter <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  &lt;React.StrictMode&gt;\n    &lt;Router&gt;\n        &lt;App /&gt;\n    &lt;/Router&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre></p> <p>Now Inside app.jsx declare url paths <pre><code>import { Routes, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Chat from \"./pages/Chat\";\n\nconst App = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/chat\" element={&lt;Chat /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default App;\n</code></pre></p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/","title":"Modulo Multiplicative Inverse","text":""},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#definition","title":"Definition","text":"<p>A modular multiplicative inverse of an integer a is an integer x such that a.x is congruent to 1 modular some modulus m. To write it in a formal way: we want to find an integer x so that</p> \\[ a.x \u2245 1 (mod\\space m) \\] <p>We also denote x simply with a<sup>-1</sup>.</p> <p>We should note that modular inverse does not always exist. It can be proven that the modular inverse exists if and only if a and m are relatively prime (i.e. gcd(a, m) = 1).</p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#finding-modular-inverse-using-extended-euclidean-algorithm","title":"Finding Modular Inverse using Extended Euclidean algorithm","text":"<p>$$ a.x + m.y = 1 $$ This is linear Diophantine equation in two variables. When gcd(a, m)  = 1, the equation has a solution and can be found using extended Euclidean algorithm. Note that gcd(a, m) = 1 is also the condition for the modular inverse to exist.</p> <p>Now, if we take modulo m of both sides, we can get rid of m.y and the equation become $$ a.x \u2245 1 (mod\\space m) $$ Thus, the modular inverse of a is x.</p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#implementation","title":"Implementation","text":""},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#brute","title":"Brute","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint modInverse(int A, int M)\n{\n\u00a0\u00a0\u00a0\u00a0for(int X = 1; X &lt; M; X++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (((A % M) * (X % M)) % M == 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return X;\n}\n\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int A = 3, M = 11;\n\u00a0\u00a0\u00a0\u00a0cout &lt;&lt; modInverse(A, M);\n\u00a0\u00a0\u00a0\u00a0return 0;\n\n}\n</code></pre> <p>\\(Time \\space Complexity - O(M)\\) \\(Space \\space Complexity - O(1)\\)</p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#a-and-m-are-co-prime-gcda-m-1","title":"A and M are co-prime (GCD(A, M) = 1)","text":"<pre><code>using namespace std;\nint gcdExtended(int a, int b, int &amp;x, int &amp;y) {\n    if (a == 0) {\n        x = 0;\n        y = 1;\n        return b;\n    }\n\n    int x1, y1;\n    int gcd = extendedGCD(b % a, a, x1, y1);\n\n    x = y1 - (b / a) * x1;\n    y = x1;\n\n    return gcd;\n}\nvoid modInverse(int A, int M)\n{\n    int x, y;\n    int g = gcdExtended(A, M, &amp;x, &amp;y);\n    if (g != 1)\n        cout &lt;&lt; \"Inverse doesn't exist\";\n    else {\n        int res = (x % M + M) % M;\n        cout &lt;&lt; \"Modular multiplicative inverse is \" &lt;&lt; res;\n    }\n}\nint main()\n{\n    int A = 3, M = 11;\n    modInverse(A, M);\n    return 0;\n}\n</code></pre> <p>\\(Time \\space Complexity - O(log \\space m)\\) \\(Space \\space Complexity - O(log \\space m)\\)</p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#modular-multiplicative-inverse-when-m-is-prime","title":"Modular multiplicative inverse when M is prime","text":"<pre><code>#include &lt;iostream&gt; \nusing namespace std; \nint power(int base, int exponent, int mod) \n{ \n    int result = 1; \n    while (exponent &gt; 0) \n    { \n        if (exponent % 2 == 1) \n            result = (result * base) % mod; \n        exponent &gt;&gt;= 1; \n        base = (base * base) % mod; \n    } \n    return result; \n} \nint modInverse(int a, int m) \n{ \n    a = (a % m + m) % m; \n    return power(a, m - 2, m); \n} \nint main() \n{ \n    int a, m; \n    cin &gt;&gt; a &gt;&gt; m; \n    int result = modInverse(a, m); \n    cout &lt;&lt; (result == 0 ? \"No modular inverse\" : to_string(result)) &lt;&lt; endl; \n    return 0; \n}\n</code></pre> <p>\\(Time \\space Complexity - O(log \\space m)\\) \\(Space \\space Complexity - O(log \\space m)\\)</p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#references","title":"References","text":"<p>https://cp-algorithms.com/algebra/module-inverse.html https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/</p>"},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#tags","title":"Tags","text":""},{"location":"dsa-cp/Concepts/Modulo%20Multiplicative%20Inverse/#modulo-inverse-modulo-inverse-cp-concept-cp","title":"modulo-inverse #modulo #inverse #cp-concept #cp","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/","title":"Memset Initialisation errorr","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#summary","title":"Summary","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#-memset-cant-be-used-to-initialise-int-array-with-1-an-array-of-int-can-only-be-initialised-with-0-or-1-using-memset","title":"- <code>memset</code>\u00a0can't be used to initialise\u00a0<code>int</code>\u00a0array with\u00a0<code>1</code>, an array of <code>int</code> can only be initialised with <code>0</code> or <code>-1</code> using memset","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#lessons-learned","title":"Lessons Learned","text":"<p>Therefore, <code>memset</code> cannot be used to initialise an <code>int</code> array with <code>1</code> because if an <code>int</code> is represented by 4 bytes, then <code>memset</code> will initialise each byte with <code>1</code>.</p> <p>The value <code>16843009</code> is equivalent to <code>0x01010101</code>. Each of the 4 bytes is initialised with <code>01</code>.</p> <p>Using <code>memset</code>, an array of <code>int</code> can only be initialised with <code>0</code> or <code>-1</code> because <code>0</code> and <code>-1</code> both have all bits <code>0</code> and <code>1</code> respectively in the two's complement binary representation, regardless of the size of the <code>int</code> data type.</p>"},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#reference-url","title":"Reference URL","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#-stack-overflow","title":"- Stack Overflow","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#tags","title":"Tags","text":""},{"location":"errors-solutions/cpp-errors/Memset%20Initialisation%20errorr/#cpp-memset-initialisation","title":"cpp #memset #initialisation","text":""},{"location":"errors-solutions/development-errors/Correct%20CORS%20Configuration%20for%20Handling%20Credentials%20Like%20Cookies/","title":"Correct CORS Configuration for Handling Credentials Like Cookies","text":"<p>When working with credentials such as cookies that are set by the backend, it\u2019s crucial to configure CORS (Cross-Origin Resource Sharing) correctly to ensure that the browser can send the cookies along with the request. Misconfiguring CORS can prevent the browser from sending cookies, leading to issues with authentication and session management.</p> <p>Avoid Using Wildcard (*) in CORS Configuration A common mistake is to set the origin option in the CORS configuration to \"*\", which allows any origin. When you also set credentials: true, this configuration will prevent the browser from sending cookies because the Access-Control-Allow-Origin header cannot be set to * if credentials are used.</p> <p>Example of incorrect configuration: <pre><code>app.use(\n  cors({\n    origin: \"*\",\n    credentials: true,\n  })\n);\n</code></pre></p> <p>Why is this wrong? \u2022 The browser will not send cookies or other credentials along with the request.</p> <p>\u2022 The Access-Control-Allow-Origin header cannot be set to \"*\" when credentials: true is used, resulting in a CORS error.</p> <p>Specify the Allowed Origin Explicitly To allow the browser to send cookies, you must specify the exact origin that is permitted to access the resource.</p> <p>Example of correct configuration: <pre><code>app.use(\n  cors({\n    origin: \"http://localhost:5173\",\n    credentials: true,\n  })\n);\n</code></pre></p> <p>Why is this correct? \u2022 By specifying the exact origin (http://localhost:5173), you ensure that the browser will send cookies along with the request.</p> <p>\u2022 This configuration adheres to CORS policy requirements, allowing the server to handle credentials properly.</p>"},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/","title":"Node + Python deployment error","text":""},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/#summary","title":"Summary","text":"<p>You cannot Run Python script with Node JS on render, but you can run node js with Python configuration.So use Python native environment to deploy the project which has both Python and node js</p>"},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/#lessons-learned","title":"Lessons Learned","text":"<p>Node is available on all\u00a0Native Environments, so you\u2019d need to use a Python Native Environment if you wanted to run Python scripts, which would still allow you to configure Node.</p>"},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/#reference-url","title":"Reference URL","text":""},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/#-render","title":"- Render","text":""},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/#tags","title":"Tags","text":""},{"location":"errors-solutions/development-errors/Node%20%2B%20Python%20deployment%20error/#error-node-python-error-render","title":"error #node-python-error #render","text":""},{"location":"general/ubuntu/Install%20a%20application%20and%20get%20it%20on%20launcher/","title":"Install a application and get it on launcher","text":"<ol> <li>First download the tar package and then extract in the <code>/usr/local/</code> folder.</li> <li>After that Export path variables if necessary.</li> <li>After that go to <code>/usr/share/applications</code> and create a <code>your-application.desktop</code> and add the content similar to the given below <pre><code>[Desktop Entry]\nVersion=1.0\nType=Application\nTerminal=true\nName=Android Studio\nComment=Launches Android Studio\nIcon=/usr/local/android-studio/bin/studio.png\nExec=/usr/local/android-studio/bin/studio.sh\nX-Desktop-File-Install-Version=0.26\n</code></pre></li> </ol> <p>after this check if it is running 4. <code>desktop-file-validate android-studio.desktop</code> 5. install the file by <code>sudo desktop-file-install android-studio.desktop</code> This is an example of getting application to the launcher.</p>"},{"location":"general/ubuntu/Install%20a%20application%20and%20get%20it%20on%20launcher/#launcher-application-launcher-android-studio-usrlocal-usrshareapplications-android-studio-desktop","title":"launcher #application-launcher #android-studio #/usr/local/ #/usr/share/applications #android-studio-desktop","text":"<p>Reference: https://bterczynski.medium.com/adding-android-studio-to-your-applications-launcher-and-favorites-bar-in-ubuntu-eff05e6abfd</p>"},{"location":"general/ubuntu/Remove%20Icons%20from%20Ubuntu/","title":"Remove Icons from Ubuntu","text":"<p>Search for extensions in the search bar. You will get option there. From there you can remove icons display or turn it on.</p>"},{"location":"general/ubuntu/Remove%20Icons%20from%20Ubuntu/#install-gnome-extension","title":"Install gnome Extension","text":""},{"location":"general/ubuntu/Remove%20Icons%20from%20Ubuntu/#installing-gnome-shell-extensions","title":"Installing GNOME Shell Extensions","text":"<p>Now that you know what GNOME Shell Extensions are, let\u2019s see how to install them.</p> <p>There are three ways you can use GNOME Extensions:</p> <ol> <li>Use a minimal set of extensions from Ubuntu (or your Linux distribution)</li> <li>Find and install extensions in your web browser</li> <li>Install extensions using Extension Manager App</li> <li>Download and manually install extensions</li> </ol> <p>Although GNOME Tweaks is not required for extensions to work,\u00a0installing GNOME Tweak Tool in Ubuntu\u00a0or whichever distribution you are using is better.</p> <pre><code>sudo apt install gnome-tweaks\n</code></pre> <p>At times, you would also need to know the version of GNOME Shell you are using. This helps determine whether an extension is compatible with your system. You can use the command below to find it:</p> <pre><code>gnome-shell --version\n</code></pre>"},{"location":"general/ubuntu/Remove%20Icons%20from%20Ubuntu/#method-1-use-the-gnome-shell-extensions-package","title":"Method 1: Use the gnome-shell-extensions package","text":"<p>Ubuntu (and several other Linux distributions such as Fedora) provide a package with a minimal set of GNOME extensions. You don\u2019t have to worry about compatibility here as it is tested by your Linux distribution.</p> <p>If you want a no-brainer, just get this package and you\u2019ll have 8-10 GNOME extensions installed.</p> <pre><code>sudo apt install gnome-shell-extensions\n</code></pre> <p>Once installed, log out and re-login to your system. After that, start GNOME Extensions App from Overview. This extensions app will be installed as part of\u00a0<code>gnome-shell-extensions</code>\u00a0package.</p> <p>You\u2019ll find a few extensions installed. You can just toggle the button to start using an installed extension.</p>"},{"location":"general/ubuntu/Transfer%20File%20from%20laptop%20to%20PC/","title":"Transfer File from laptop to PC","text":"<p>1. Install a WiFi FTP Server on Android 1. Download an FTP Server App: Install an app like \u201cWiFi FTP Server\u201d or any similar app from the Google Play Store. 2. Configure the FTP Server:     \u2022 Open the app and configure the FTP server settings (port number, username, password, etc.).     \u2022 Start the FTP server. 2. Connect Your Linux Laptop to the Android Hotspot 1. Enable Mobile Hotspot on Android:     \u2022 Go to Settings &gt; Network &amp; internet &gt; Hotspot &amp; tethering &gt; Wi-Fi hotspot and enable it.     \u2022 Make a note of the hotspot\u2019s SSID (name) and password. 2. Connect Your Linux Laptop to the Android Hotspot:     \u2022 On your Linux laptop, open the Wi-Fi settings and connect to the Android hotspot using the provided SSID and password. 3. Access the FTP Server from Linux 1. Open Your File Manager:     \u2022 On your Linux laptop, open your file manager (e.g., Nautilus, Dolphin, Thunar). 2. Connect to the FTP Server:     \u2022 In the file manager, find the option to connect to a server (often under the \u201cOther Locations\u201d or \u201cNetwork\u201d tab).     \u2022 Enter the FTP URL you configured in the Android app, typically in the format: <code>ftp://192.168.x.x:port</code> for example <code>ftp://192.168.115.185:2221</code>     \u2022 If prompted, enter the username and password you set up in the FTP server app. Alternatively, choose \u201cAnonymous\u201d if you set the FTP server to allow anonymous connections. 4. Access Files:     \u2022 Once connected, you\u2019ll see the Android device\u2019s storage as a folder in your file manager. You can now transfer files between your Linux laptop and Android device.</p>"},{"location":"learning/Kubernetes/Kubernetes%20-%20Hitesh%20Chaudhary%20%28Youtube%29/","title":"Kubernetes   Hitesh Chaudhary (Youtube)","text":""},{"location":"learning/Kubernetes/Kubernetes%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#what-is-kubernetes","title":"What is Kubernetes?","text":"<p>Kubernetes is a tool that helps manage and run containerized applications automatically, making it easier to deploy, scale, and maintain apps.</p>"},{"location":"learning/Kubernetes/Kubernetes%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#why-use-kubernetes","title":"Why use Kubernetes?","text":"<p>\u2022 Scalability: Automatically adjusts resources based on demand. \u2022 Automation: Simplifies app deployment and updates. \u2022 Resilience: Recovers from failures automatically. \u2022 Portability: Works across different environments (cloud or on-premises). \u2022 Efficiency: Makes better use of resources to save costs.</p>"},{"location":"learning/Kubernetes/Kubernetes%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#where-is-kubernetes-used","title":"Where is Kubernetes used?","text":"<p>\u2022 Managing Microservices: For running small, independent services.</p> <p>\u2022 CI/CD Pipelines: Automates development workflows.</p> <p>\u2022 Cloud Applications: For apps built to run in the cloud.</p> <p>\u2022 Hybrid Cloud: Runs apps across cloud and local servers.</p>"},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/","title":"React Bootstrap","text":""},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/#installation","title":"Installation","text":"<p>To get started with React Bootstrap, you need to install both react-bootstrap and bootstrap. Run the following commands to install them: <pre><code>npm install react react-bootstrap\n</code></pre></p> <p>After installation, you need to import Bootstrap\u2019s CSS in your project. Add the following line to your src/index.tsx or src/App.tsx file:</p> <pre><code>import 'bootstrap/dist/css/bootstrap.min.css';\n</code></pre>"},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/#basic-components","title":"Basic Components","text":""},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/#navbar","title":"Navbar","text":"<p>The Navbar component provides a responsive navigation header. <pre><code>import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst AppNavbar: React.FC = () =&gt; (\n  &lt;Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\"&gt;\n    &lt;Navbar.Brand href=\"#home\"&gt;React Bootstrap&lt;/Navbar.Brand&gt;\n    &lt;Navbar.Toggle aria-controls=\"basic-navbar-nav\" /&gt;\n    &lt;Navbar.Collapse id=\"basic-navbar-nav\"&gt;\n      &lt;Nav className=\"mr-auto\"&gt;\n        &lt;Nav.Link href=\"#home\"&gt;Home&lt;/Nav.Link&gt;\n        &lt;Nav.Link href=\"#link\"&gt;Link&lt;/Nav.Link&gt;\n      &lt;/Nav&gt;\n    &lt;/Navbar.Collapse&gt;\n  &lt;/Navbar&gt;\n);\n\nexport default AppNavbar;\n</code></pre></p>"},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/#modals","title":"Modals","text":"<p>The Modal component is used to create dialogs or popups. <pre><code>import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\n\nconst AppModal: React.FC = () =&gt; {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () =&gt; setShow(false);\n  const handleShow = () =&gt; setShow(true);\n\n  return (\n    &lt;&gt;\n      &lt;Button variant=\"primary\" onClick={handleShow}&gt;\n        Launch Modal\n      &lt;/Button&gt;\n\n      &lt;Modal show={show} onHide={handleClose}&gt;\n        &lt;Modal.Header closeButton&gt;\n          &lt;Modal.Title&gt;Modal Title&lt;/Modal.Title&gt;\n        &lt;/Modal.Header&gt;\n        &lt;Modal.Body&gt;Modal Body Text&lt;/Modal.Body&gt;\n        &lt;Modal.Footer&gt;\n          &lt;Button variant=\"secondary\" onClick={handleClose}&gt;\n            Close\n          &lt;/Button&gt;\n          &lt;Button variant=\"primary\" onClick={handleClose}&gt;\n            Save Changes\n          &lt;/Button&gt;\n        &lt;/Modal.Footer&gt;\n      &lt;/Modal&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default AppModal;\n</code></pre></p>"},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/#form","title":"Form","text":"<p>The Form component allows you to create forms with various input types. <pre><code>import React from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nconst AppForm: React.FC = () =&gt; (\n  &lt;Form&gt;\n    &lt;Form.Group controlId=\"formBasicEmail\"&gt;\n      &lt;Form.Label&gt;Email address&lt;/Form.Label&gt;\n      &lt;Form.Control type=\"email\" placeholder=\"Enter email\" /&gt;\n      &lt;Form.Text className=\"text-muted\"&gt;\n        We'll never share your email with anyone else.\n      &lt;/Form.Text&gt;\n    &lt;/Form.Group&gt;\n\n    &lt;Form.Group controlId=\"formBasicPassword\"&gt;\n      &lt;Form.Label&gt;Password&lt;/Form.Label&gt;\n      &lt;Form.Control type=\"password\" placeholder=\"Password\" /&gt;\n    &lt;/Form.Group&gt;\n\n    &lt;Form.Group controlId=\"formBasicCheckbox\"&gt;\n      &lt;Form.Check type=\"checkbox\" label=\"Check me out\" /&gt;\n    &lt;/Form.Group&gt;\n\n    &lt;Button variant=\"primary\" type=\"submit\"&gt;\n      Submit\n    &lt;/Button&gt;\n  &lt;/Form&gt;\n);\n\nexport default AppForm;\n</code></pre></p>"},{"location":"learning/UI-Libraries-Frontend-Styling/React%20Bootstrap/#dropdown","title":"Dropdown","text":"<p>The Dropdown component allows users to select an option from a dropdown list. <pre><code>import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\n\nconst AppDropdown: React.FC = () =&gt; (\n  &lt;Dropdown&gt;\n    &lt;Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\"&gt;\n      Dropdown Button\n    &lt;/Dropdown.Toggle&gt;\n\n    &lt;Dropdown.Menu&gt;\n      &lt;Dropdown.Item href=\"#action/1\"&gt;Action&lt;/Dropdown.Item&gt;\n      &lt;Dropdown.Item href=\"#action/2\"&gt;Another action&lt;/Dropdown.Item&gt;\n      &lt;Dropdown.Item href=\"#action/3\"&gt;Something else here&lt;/Dropdown.Item&gt;\n    &lt;/Dropdown.Menu&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default AppDropdown;\n</code></pre></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/","title":"Docker   Hitesh Chaudhary (Youtube)","text":""},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#what-is-docker-and-its-usage","title":"What is Docker and its usage?","text":"<p>Docker is an open platform for developing, shipping, and running applications. Docker provides the ability to package and run an application in a loosely isolated environment called a container. The isolation and security lets you run many containers simultaneously on a given host. Containers are lightweight and contain everything needed to run the application, so you don't need to rely on what's installed on the host. You can share containers while you work, and be sure that everyone you share with gets the same container that works in the same way.</p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#what-can-i-use-docker-for","title":"What can I use Docker for?","text":"<ul> <li>Fast, consistent delivery of your applications</li> <li>Responsive deployment and scaling</li> <li>Running more workloads on the same hardware</li> </ul>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#docker-architecture","title":"Docker Architecture","text":"<p> Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface. Another Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.</p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#what-is-image-and-container","title":"What is image and container","text":"<p>Think of image as like software and your PC or laptop is the container that runs that software. Similarly you build containers to run that image and that container runs on the docker engine. Virtual Machine (VM) runs whole of the operating system over the OS but containers actually contains the software and bare minimum of whatever configuration is required of OS.</p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#some-useful-commands","title":"Some useful Commands","text":""},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#pulling-an-image","title":"Pulling an image","text":"<p><code>docker pull &lt;image-name&gt;</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#view-all-downloaded-images","title":"View all downloaded images","text":"<p><code>docker image ls</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#running-a-docker-image","title":"Running a docker image","text":"<p><code>docker run --name &lt;container-name&gt; &lt;image-name&gt;</code> some other arguments that you can pass 1. <code>docker run --name &lt;container-name&gt; -d &lt;image-name&gt;</code> : this runs the container in detached mode, meaning your terminal won't be used to display output and the container will run in background. 2. <code>docker run &lt;image-name&gt;:&lt;version</code> to run a specific version of the image 3. <code>docker run --network &lt;network-name&gt;</code> to run a container on specific network</p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#running-a-existing-container","title":"Running a existing container","text":"<p><code>docker start &lt;container-name/container-tag&gt;</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#stopping-a-running-container","title":"Stopping a running container","text":"<p><code>docker stop &lt;container-name/container-tag&gt;</code> or <code>docker container stop &lt;container-name/container-tag&gt;</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#viewing-containers","title":"Viewing Containers","text":"<ol> <li>Running containers: <code>docker ps</code> or <code>docker container ls</code></li> <li>All containers: <code>docker ps -a</code></li> </ol>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#remove-all-stoped-containers","title":"Remove all stoped Containers","text":"<p><code>docker container prune</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#see-containers-log","title":"See Containers log","text":"<p><code>docker logs &lt;container-name/container-id&gt;</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#write-docker-commands-in-multiple-line-in-terminal","title":"Write docker commands in multiple line in terminal","text":"<pre><code>docker run --name test \\\n-p 8081:8081 \\\n-e ...\n</code></pre>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n    &lt;container-name-1&gt;:\n        image: &lt;image-name-1&gt;\n        ports:\n            - \"&lt;host-port&gt;:&lt;container-port&gt;\"\n        environment:\n            - &lt;environment-key&gt;=&lt;environment-value&gt;\n        volumes:\n            - mymongo-data:/data/db\n    &lt;container-name-2&gt;:\n        image: &lt;image-name-2&gt;\n        restart: always       %% makes sure to restart container if it exits %%\n        ports:\n            - \"&lt;host-port&gt;:&lt;container-port&gt;\"\nvolumes:\n    mymongo-data:\n        driver: local\n</code></pre> <p>Note: All the containers in a docker-compose.yml file share the same network</p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#run-docker-compose","title":"Run docker-compose","text":"<p><code>docker-compose -f docker-compose.yml up</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#close-all-the-containers-in-docker-compose","title":"Close all the containers in docker-compose","text":"<p><code>docker-compose -f docker-compose.yml down</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#dockerfile-creating-an-image","title":"Dockerfile (Creating an Image)","text":"<ol> <li>Create the dockerfile in the root dir.</li> <li>Given a example of a flask image</li> </ol> <pre><code>FROM python:3-alpine3.15\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN pip install -r requirements.txt\n\nEXPOSE 3000\n\nCMD python ./index.py\n</code></pre>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#build-docker-image-using-dockerfile","title":"Build docker image using dockerfile","text":"<p><code>docker build -t &lt;username&gt;/&lt;image-name&gt;:&lt;version&gt; &lt;Dockerfile-path&gt;</code></p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#run-the-image-built-using-dockerfile","title":"Run the image built using dockerfile","text":"<p><code>docker container run -d -p 3000:3000 &lt;username&gt;/&lt;image-name&gt;:&lt;version&gt;</code> </p>"},{"location":"learning/docker/Docker%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#push-image-to-docker-hub","title":"Push image to docker hub","text":"<p><code>docker push &lt;username&gt;/&lt;image-name&gt;:&lt;version&gt;</code></p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/","title":"Git GitHub   Hitesh Chaudhary (Youtube)","text":"<p>Reference Link : Youtube Link</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#check-version","title":"Check Version","text":"<p><code>git --version</code> or <code>git -v</code></p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#initialising-git-repo","title":"Initialising git repo","text":"<p><code>git init</code> \u2192 Creates a hidden .git folder which keeps track of all the track-able files</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#check-status","title":"Check Status","text":"<p><code>git status</code> \u2192 Tell the status of the working directory, staging area, files tracked, untracked, etc.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#pulling-from-the-remote-repo-using-rebase","title":"Pulling from the Remote Repo using rebase","text":"<pre><code>git pull --rebase\n# if the merge conflict arise than\ngit rebase --abort\n# than do it the normal way \ngit pull\n# and resolve merge conflict through traditional ways.\n</code></pre>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#stage-a-file","title":"Stage a file","text":"<p><code>git add &lt;file-name&gt;</code></p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#unstage-a-file","title":"Unstage a file","text":"<p><code>git rm --cached &lt;file-name&gt;</code> \u2192 do not use it without \u2014cached as it would delete the file itself.</p> <p><code>git restore --staged &lt;file-name&gt;</code> \u2192 unstages the file, without the \u2014stage it would completely discard the changes.</p> <p><code>git restore --dry-run &lt;file&gt;</code> \u2192 f you want to see what changes would be made without actually applying them</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#make-a-commit","title":"Make a commit","text":"<p><code>git commit -m \u201ccommit-message\u201d</code></p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#view-all-commits","title":"View all commits","text":"<p><code>git log</code> \u2192 shows you commit logs (author, time, message, hash)</p> <p><code>git log --oneline</code> \u2192 shows you commit in one line (hash, message)</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#best-practices-for-git-commit-messages","title":"Best Practices for Git Commit Messages","text":"<p>They should focus on one feature and be in the present tense.</p> <p>for e.g. \u201cAdd user authentication feature\u201d, \u201cUpdate README with installation instructions\u201d</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#changes-in-git-configuration-git-config","title":"Changes in git configuration (git config)","text":"<p><code>git config --global user.name \"Your Name\"</code> \u2192 This specifies your username for Git Globally. <code>git config --global user.email \"your.email@example.com\"</code> \u2192This specifies your email address associated with Git commits globally.</p> <p><code>git config --global core.editor \"code --wait\"</code> \u2192 This sets your preferred text editor for Git i.e. vs-code and \u2014wait tells git to wait till the vs-code closes before resuming.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#how-to-ignore-a-file","title":"How to ignore a file","text":"<p>Create a file name .gitignore and inside it write the file name of the file you do not want git to track. The files inside the .gitignore won\u2019t be track able.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#how-to-create-a-branch","title":"How to create a branch","text":"<p><code>git branch \"branch-name\"</code> \u2192 creates a new branch but remains on the same branch as before</p> <p><code>git switch -c \"branch-name\"</code> \u2192 creates a new branch and switches to that newly created branch</p> <p><code>git checkout -b \"branch-name\"</code> \u2192 creates a new branch and switches to that newly created branch</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#how-to-switch-to-a-branch","title":"How to switch to a branch","text":"<p><code>git checkout \u201cbranch-name\u201d</code> \u2192 switches to the mentioned branch</p> <p><code>git switch \"branch-name\"</code> \u2192switches to the mentioned branch</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#discarding-changes-in-the-working-directory-for-a-specific-file","title":"Discarding changes in the working directory for a specific file","text":"<p><code>git checkout -- \"file-name\"</code> \u2192 removes all the changes done in a file</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#merging-the-branches","title":"Merging the branches","text":"<p>switch to the main/master branch (the primary branch in which you want the secondary branch to merge into)</p> <p><code>git merge \"branch-name\"</code> \u2192 merges the branch to the current branch</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#delete-a-branch","title":"Delete a branch","text":"<p><code>git branch -d \"branch-name\"</code></p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#understand-merge-conflicts","title":"Understand merge conflicts","text":"<p>Everything above the <code>===========</code> and below <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> is from the current branch of local repo, and everything below is the other branch code. You can go and keep the file as you want and than make another commit.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#how-to-compare-a-file-between-different-commits","title":"How to compare a file between different commits","text":"<p>we use <code>git diff</code> to compare a file between 2 point of time (commit, staging, etc)</p> <p>How to read diff:</p> <p>a\u2192file1 &amp; b\u2192file2 (same file over time)</p> <p><code>-----</code> file1 (indicates code of file1)</p> <p><code>+++++</code> file2 (indicates code of file2)</p> <p>changes in lines &amp; little preview of it</p> <p>minus and plus does not mean insertion and deletion</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#difference-between-files-in-staging-area-and-last-commit","title":"Difference between files in staging area and last commit","text":"<p><code>git diff --staged</code> : shows the differences between the files in the staging area (index) and the last commit.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#difference-between-snapshots-of-two-commits","title":"Difference between snapshots of two commits","text":"<p><code>git diff &lt;commit-hash 1&gt; &lt;commit-hash 2&gt;</code> : shows the differences between the snapshots of two specified commits.</p> <p>or</p> <p><code>git diff &lt;commit-hash 1&gt;..&lt;commit-hash 2&gt;</code> : shows the differences between the snapshots of two specified commits.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#difference-between-snapshots-of-two-branch","title":"Difference between snapshots of two branch","text":"<p><code>git diff &lt;branch-name 1&gt; &lt;branch-name 2&gt;</code> or <code>git diff &lt;branch-name 1&gt;..&lt;branch-name 2&gt;</code> : shows the difference between the snapshots of two branches.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#understanding-git-stash","title":"Understanding git stash","text":"<p>When you are working on a branch and you work is not completed so you cannot commit yet but you need to switch branch to do some changes in other branch. Git does not allow you to change branch without committing the changes. This is resolved by the <code>git stash</code>.</p> <p><code>git stash</code> : temporarily saves changes in the working directory that are not yet committed, allowing you to work on a clean slate without committing those changes.</p> <p><code>git stash pop</code> : applies the most recently stashed changes back to the working directory and removes that stash from the stash list.</p> <p>Note: I can even pop the stash in other branches too.</p> <p><code>git stash list</code> : displays a list of all stashed change-sets.</p> <p><code>git stash apply</code> : applies the most recently stashed changes back to the working directory without removing that stash from the stash list</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#advance-commands","title":"Advance Commands","text":"<p><code>git checkout &lt;commit-hash&gt;</code> : switches the working directory to the state of the specified commit, putting the repository in a \"detached HEAD\" state where you can view and work with the files from that commit without being on any branch</p> <p><code>git switch main</code> : \u201cre-attach Head\u201d</p> <p><code>git checkout HEAD~2</code> : checks out the commit that is two commits before the current HEAD, putting the repository in a \"detached HEAD\" state.</p> <p><code>git restore &lt;file-name&gt;</code> : reverts the file to its last committed state, discarding any local changes.</p> <p><code>git restore .</code> : reverts all files in the working directory to their last committed state, discarding any local changes</p> <p><code>git restore --staged --worktree .</code> reverts all files in both the staging area and the working directory to their last committed state, discarding all local changes.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#understanding-git-rebase","title":"Understanding git rebase","text":"<p>Note: Be cautious when running this command as it rewrites the git history.</p> <p>Run this command from side branch, never run this command on main or master branch.</p> <p>run <code>git rebase master</code> on other branch like bugfix. It takes bugfix commits and put it ahead of master branch.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#github","title":"GitHub","text":""},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#generating-ssh-key-and-adding-it-to-the-ssh-agent","title":"Generating ssh key and adding it to the ssh-agent","text":"<p>https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</p> <p>Go to settings\u2192SSH GPG keys \u2192 new SSH key \u2192 authentication key</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#create-new-repo-and-upload-the-project","title":"Create new repo and upload the project","text":"<p><code>git branch -M main</code> : renames the current branch to \"main\u201d</p> <p><code>git remote add origin &lt;repo url&gt;</code></p> <p><code>git push -u origin main</code></p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#cloning-repo","title":"Cloning repo","text":"<p><code>git clone &lt;repo-url&gt;</code> : creates a local copy of a Git repository from the provided <code>&lt;repo-url</code> (usually from a Git hosting platform).</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#remote-commands","title":"Remote commands","text":"<p><code>git remote -v</code> : It displays information about all configured remotes, including their URLs and the configured fetch refspec.</p> <p><code>git remote add &lt;name&gt; &lt;url&gt;</code> : creates a shortcut named  for a remote Git repository at  <p><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code> : updates the local reference for a remote repository, changing its name from  to pen_spark <p><code>git remote remove &lt;name&gt;</code> : removes the configured remote repository named <code>&lt;name&gt;</code> from your local Git repository.</p>"},{"location":"learning/git-github/Git-GitHub%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#push-commands","title":"Push Commands","text":"<p><code>git push &lt;remote&gt; &lt;branch&gt;</code> : uploads local commits from your branch named <code>&lt;branch&gt;</code> to the corresponding branch named <code>&lt;branch&gt;</code> on the remote repository named <code>&lt;remote&gt;</code>.</p> <p><code>git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt;</code> : pushes commits from your local branch <code>&lt;local-branch&gt;</code> to a specific branch named <code>&lt;remote-branch&gt;</code> on the remote repository named <code>&lt;remote&gt;</code>.</p> <p><code>git push -u origin main</code> : uploads your local \"main\" branch to \"origin\" and makes it the default for future pushes. After this you can directly use <code>git push</code> command.</p> <p><code>git pull</code> = <code>git fetch</code> + <code>git merge</code></p>"},{"location":"learning/google-cloud-console/Virtual%20Machine%20-%20Compute%20Engine/","title":"Virtual Machine   Compute Engine","text":"<p>Learning Soon</p>"},{"location":"learning/mongodb/Aggregation%20Pipeline%20-%20Hitesh%20Chaudhary%20%28Youtube%29/","title":"Aggregation Pipeline   Hitesh Chaudhary (Youtube)","text":"<p>Reference Link : Youtube Link</p> <p>Here we are doing question based learning so only questions and answers are provided.</p> <p>Q1. How many active users are there? <pre><code>[\n    {\n        $match : { isActive : true }        \n    },\n    {\n        $count : \"activeUsersCount\"\n    }\n]\n</code></pre></p> <ul> <li>Explanation:<ul> <li>$match: Filters users with <code>isActive: true</code>.</li> <li>$count: Counts the resulting users and outputs the count as <code>activeUsersCount</code>.</li> </ul> </li> <li>Note: Each stage processes the output of the previous stage.</li> </ul> <p>Q2. What is the average age of all users?</p> <pre><code>[\n    {\n        $group : {\n            _id : null,\n            averageAge : { $avg : \"$age\" }\n        }      \n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$group: Groups all users into a single group with <code>_id: null</code>.</li> <li>$avg: Calculates the average value of the <code>age</code> field and stores it as <code>averageAge</code>.</li> </ul> </li> <li>Note: Setting <code>_id: null</code> groups all documents together.</li> </ul> <p>Q3. List the top 5 most common favorite fruits among the users?</p> <pre><code>[\n    {\n        $group : {\n            _id : \"$favoriteFruit\",\n            count : {\n                $sum : 1\n            }\n        }      \n    },\n    {\n        $sort : {\n            count : -1 // descending order for ascending write 1\n        }\n    },\n    {\n        $limit : 5\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$group: Groups users by <code>favoriteFruit</code> and counts occurrences with <code>$sum: 1</code>.</li> <li>$sort: Sorts the fruits by <code>count</code> in descending order.</li> <li>$limit: Limits the output to the top 5 fruits.</li> </ul> </li> <li>Note: Sorting and limiting are key to finding the top results.</li> </ul> <p>Q4. Find the total number of males and the females.</p> <pre><code>[\n    {\n        $group : {\n            _id : \"$gender\",\n            genderCount : {\n                $sum : 1\n            }\n        }      \n    },\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$group: Groups users by <code>gender</code>.</li> <li>$sum: Counts the number of documents for each gender (e.g., male and female) and stores the count as <code>genderCount</code>.</li> </ul> </li> <li>Note: The result will show the total count for each gender.</li> </ul> <p>Q5. Which country has the highest number of the registered users?</p> <pre><code>[\n    {\n        $group : {\n            _id : \"$company.location.country\",\n            count : {\n                $sum : 1\n            }\n        }      \n    },\n    {\n        $sort : {\n            count : -1\n        }\n    },\n    {\n        $limit : 1\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$group: Groups users by <code>company.location.country</code> and counts the number of users per country.</li> <li>$sort: Sorts the countries by user count in descending order.</li> <li>$limit: Limits the result to the top country with the highest user count.</li> </ul> </li> <li>Note: This gives the country with the most registered users.</li> </ul> <p>Q6. List all the unique eye colors present in the collection.</p> <pre><code>[\n    {\n        $group : {\n            _id : \"$eyeColor\",\n        }   \n    },\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$group: Groups documents by <code>eyeColor</code>, ensuring each color is listed only once as <code>_id</code>.</li> </ul> </li> <li>Note: This returns all unique eye colors present in the collection.</li> </ul> <p>Q7. What is the average number of tags per user?</p> <p>Solution 1: Using <code>$unwind</code> <pre><code>[\n    {\n        $unwind : \"$tags\"\n    },\n    {\n        $group : {\n            _id : \"$_id\",\n            numberOfTags : {\n                $sum : 1\n            }\n        }\n    },\n    {\n        $group : {\n            _id : null,\n            averageNumberOfTags : {\n                $avg : \"$numberOfTags\"\n            }\n        }\n    }\n]\n</code></pre></p> <p>Explanation: - (unwind**: Deconstructs the <code>tags</code> array into multiple documents. - **\\)group: Groups by user <code>_id</code> to count <code>numberOfTags</code>. - $group (again): Calculates the average <code>numberOfTags</code> across all users.</p> <p>Solution 2: Using <code>$addFields</code> <pre><code>[\n    {\n        $addFields : {\n            numberofTags : {\n                $size : {\n                    $ifNull : [\"$tags\", []]\n                }\n            }\n        }\n    },\n    {\n        $groups : {\n            _id : \"$numberofTags\"\n            averageNumberOfTags : {\n                $avg : \"$numberofTags\"\n            }\n        }\n    }\n]\n</code></pre></p> <ul> <li>Explanation:<ul> <li>$addFields: Adds <code>numberOfTags</code> by calculating the size of the <code>tags</code> array. Handles null/empty arrays with <code>$ifNull</code>.</li> <li>$group: Calculates the average <code>numberOfTags</code> across all users.</li> </ul> </li> <li>Note: Both approaches achieve the same goal but use different methods to calculate the average number of tags per user.</li> </ul> <p>Q8. How many users have the tag \u2018enim\u2019 in the tags array?</p> <pre><code>[\n    {\n        $match : {\n            tags : 'enim'\n        }\n    },\n    {\n        $count : \"userWithEnimTag\"\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$match: Filters users who have the tag <code>'enim'</code> in their <code>tags</code> array.</li> <li>$count: Counts the number of users with the <code>'enim'</code> tag and outputs it as <code>userWithEnimTag</code>.</li> </ul> </li> <li>Note: This finds all users whose <code>tags</code> array contains the specific tag <code>'enim'</code>.</li> </ul> <p>Q9. What are the name and age of the users who are inactive and have \u2018velit\u2019 as a tag?</p> <pre><code>[\n    {\n        $match : {\n            isActive : false,\n            tags : \"velit\"\n        }\n    },\n    {\n        $project : {\n            name : 1,\n            age : 1\n        }\n    }\n]\n</code></pre> <ul> <li> <p>Explanation:</p> <ul> <li>$match: Filters users who are inactive (<code>isActive: false</code>) and have <code>'velit'</code> in their <code>tags</code> array.</li> <li>$project: Includes only the <code>name</code> and <code>age</code> fields in the output.</li> <li>Note: The <code>$project</code> stage ensures that only the required fields are returned.</li> </ul> </li> </ul> <p>Q10. How many users have phone number starting with \u2018+1 (940)\u2019 ?</p> <pre><code>[\n    {\n        $match : {\n            \"company.phone\" : \"/^\\\\+1 \\\\(940\\\\)/\",\n\n        }\n    },\n    {\n        $count : \"usersWithSpecialPhoneNumber\"\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$match: Filters users whose <code>company.phone</code> starts with <code>+1 (940)</code> using a regular expression (<code>$regex</code>).</li> <li>$count: Counts the number of users with matching phone numbers and outputs as <code>usersWithSpecialPhoneNumber</code>.</li> </ul> </li> <li>Note: The <code>$regex</code> operator is used for pattern matching in MongoDB queries.</li> </ul> <p>Q11. Who has registered the most recently?</p> <pre><code>[\n    {\n        $sort : {\n            registered : -1\n        }\n    },\n    {\n        $limit : 1\n    },\n    {\n        $project : {\n            name : 1,\n            registered : 1\n        }\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$sort: Sorts users by the <code>registered</code> field in descending order (most recent first).</li> <li>$limit: Limits the result to the top 1 user.</li> <li>$project: Includes only the <code>name</code> and <code>registered</code> fields in the output.</li> </ul> </li> <li>Note: This pipeline identifies the user who registered most recently by sorting and limiting the results.</li> </ul> <p>Q12. Categories user by there favorite fruit?</p> <pre><code>[\n    {\n        $group : {\n            _id : \"$favoriteFruit\",\n            users : {\n                $push : \"$name\"\n            }\n        }\n    },\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$group: Groups users by <code>favoriteFruit</code>.</li> <li>$push: Collects names of users with the same <code>favoriteFruit</code> into an array called <code>users</code>.</li> </ul> </li> <li>Note: This pipeline categorizes users based on their favorite fruit, with each fruit as a group containing an array of user names.</li> </ul> <p>Q13. How many users have \u2018ad\u2019 as the second tag in their list of tags?</p> <pre><code>[\n    {\n        $match : {\n            \"tags.1\" : \"ads\"\n        }\n    },\n    {\n        $count : 'secondTagAd'\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$match: Filters users where the second tag in the <code>tags</code> array (<code>tags[1]</code>) is <code>\"ad\"</code>.</li> <li>$count: Counts the number of users matching the condition and outputs the count as <code>secondTagAd</code>.</li> </ul> </li> <li>Note: Array indexing starts from 0, so <code>tags.1</code> refers to the second element in the <code>tags</code> array.</li> </ul> <p>Q14. Find users who have both \u2018enim\u2019 and \u2018ad\u2019 as tags.</p> <pre><code>[\n    {\n        $match : {\n            tags : {\n                $all : [\"enim\", \"ad\"]\n            }\n        }\n    },\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$match: Filters users who have both <code>'enim'</code> and <code>'ad'</code> in their <code>tags</code> array.</li> <li>$all: Ensures that all specified tags are present in the array.</li> </ul> </li> <li>Note: This query retrieves users who have both tags in their <code>tags</code> array.</li> </ul> <p>Q15. List all companies located in the USA with their corresponding user count.</p> <pre><code>[\n    {\n        $match : {\n            \"company.location.country\" : \"USA\"\n        }\n    },\n    {\n        $group : {\n            _id: \"$company.title\",\n            userCount : {\n                $sum : 1\n            }\n        }\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$match: Filters users whose company is located in the USA.</li> <li>$group: Groups users by their company title (<code>$company.title</code>) and counts the number of users per company with <code>$sum: 1</code>.</li> </ul> </li> <li>Note: This pipeline provides a list of companies in the USA along with the count of users for each company.</li> </ul> <p>Q16. Find the author details of the books.</p> <pre><code>[\n    {\n        $lookup : {\n            from : \"authors\",\n            localField : \"author_id\",\n            foreignField : \"_id\",\n            as : \"author_details\"\n        }\n    },\n    {\n        $addFields : {\n            author_details : {\n                $first : \"$author_details\"\n            }\n        }\n    }\n]\n</code></pre> <p>or</p> <pre><code>[\n    {\n        $lookup : {\n            from : \"authors\",\n            localField : \"author_id\",\n            foreignField : \"_id\",\n            as : \"author_details\"\n        }\n    },\n    {\n        $addFields : {\n            author_details : {\n                $arrayElemAt : [\"$author_details\", 0]\n            }\n        }\n    }\n]\n</code></pre> <ul> <li>Explanation:<ul> <li>$lookup: Joins the <code>authors</code> collection with the <code>books</code> collection on <code>author_id</code> and <code>_id</code>, storing the result in <code>author_details</code>.</li> <li>$addFields: Adjusts the <code>author_details</code> field to only include the first element of the array (since <code>$lookup</code> returns an array).</li> </ul> </li> <li>Note: Both solutions achieve the same result, converting the array of <code>author_details</code> into a single document by extracting the first element.</li> </ul>"},{"location":"learning/react/Context%20API%20-%20Hitesh%20Chaudhary%20%28Youtube%29/","title":"Context API   Hitesh Chaudhary (Youtube)","text":"<p>Reference Link : Youtube Link</p> <p>This guide will walk you through setting up and using React Context for managing global state across your application.</p>"},{"location":"learning/react/Context%20API%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#1-create-a-context","title":"1. Create a Context","text":"<p>Start by creating a context. This will allow you to manage and share data across components without having to pass props down manually through each component.</p> <p>File: <code>UserContext.js</code></p> <pre><code>import React from 'react';\nconst UserContext = React.createContext();\nexport default UserContext;\n</code></pre>"},{"location":"learning/react/Context%20API%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#2-create-a-context-provider","title":"2. Create a Context Provider","text":"<p>Next, create a provider component that will wrap around your application or specific components that need access to the shared context. This provider will store the data and provide it to any component that consumes the context.</p> <p>File: <code>UserContextProvider.jsx</code></p> <pre><code>import React, { useState } from 'react';\nimport UserContext from './UserContext';\n\nconst UserContextProvider = ({ children }) =&gt; {\n    const [user, setUser] = useState(null);\n\n    return (\n        &lt;UserContext.Provider value={{ user, setUser }}&gt;\n            {children}\n        &lt;/UserContext.Provider&gt;\n    );\n};\n\nexport default UserContextProvider;\n</code></pre>"},{"location":"learning/react/Context%20API%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#3-wrap-your-application-with-the-context-provider","title":"3. Wrap Your Application with the Context Provider","text":"<p>To make the context available throughout your application, wrap your main component (e.g., <code>App.js</code>) with the <code>UserContextProvider</code>.</p> <p>File: <code>App.js</code></p> <pre><code>import React from 'react';\nimport UserContextProvider from './context/UserContextProvider';\n\nconst App = () =&gt; {\n    return (\n        &lt;UserContextProvider&gt;\n            {/* Your components here */}\n        &lt;/UserContextProvider&gt;\n    );\n};\n\nexport default App;\n</code></pre>"},{"location":"learning/react/Context%20API%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#4-using-the-context-in-components","title":"4. Using the Context in Components","text":"<p>To use the context data in a component, you can use the <code>useContext</code> hook. This allows you to access and update the shared state.</p> <p>Example: <code>Login.js</code></p> <pre><code>import React, { useContext } from 'react';\nimport UserContext from '../context/UserContext';\n\nfunction Login() {\n    const { setUser } = useContext(UserContext);\n\n    // Example usage\n    const handleLogin = () =&gt; {\n        setUser({ name: 'John Doe' }); // Set user data on login\n    };\n\n    return (\n        &lt;button onClick={handleLogin}&gt;\n            Login\n        &lt;/button&gt;\n    );\n}\n\nexport default Login;\n</code></pre>"},{"location":"learning/react/Context%20API%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#summary","title":"Summary","text":"<ul> <li>Create Context: Define your context using <code>React.createContext()</code>.</li> <li>Context Provider: Create a provider component that manages the state and provides it to the child components.</li> <li>Wrap Application: Use the context provider to wrap the components that need access to the context data.</li> <li>Consume Context: Use <code>useContext</code> to access and manipulate context data in your components.</li> </ul> <p>This pattern can be extended to manage any global state in your React application effectively.</p>"},{"location":"learning/react/Handle%20Change%20in%20React%20Forms/","title":"Handle Change in React Forms","text":"<p>This guide covers how to handle form data changes in React, specifically treating checkboxes differently while managing other input types with a simple state update.</p>"},{"location":"learning/react/Handle%20Change%20in%20React%20Forms/#1-initialize-form-state","title":"1. Initialize Form State","text":"<p>Create a <code>useState</code> hook to manage form data, initializing with default values:</p> <pre><code>const [formData, setFormData] = useState({\n    year: \"\",\n    batches: [],\n    questions: [],\n});\n</code></pre>"},{"location":"learning/react/Handle%20Change%20in%20React%20Forms/#2-handle-input-changes","title":"2. Handle Input Changes","text":"<p>Create a <code>handleChange</code> function that updates the state based on user input:</p> <ul> <li>Checkbox: If the checkbox is checked, add its name to the <code>batches</code> array. If unchecked, remove it.</li> <li>Other Input Types: For text inputs and others, update the state with the new value for the given field. <pre><code>const handleChange = (e) =&gt; {\n    const { name, value, type, checked } = e.target;\n    if (type === \"checkbox\") {\n        setFormData((prevData) =&gt; ({\n            ...prevData,\n            batches: checked\n                ? [...prevData.batches, name]\n                : prevData.batches.filter((batchName) =&gt; batchName !== name),\n        }));\n    } else {\n        setFormData((prevData) =&gt; ({\n            ...prevData,\n            [name]: value,\n        }));\n    }\n};\n</code></pre> This simple approach handles form state updates efficiently, with special handling for check-boxes.</li> </ul>"},{"location":"learning/react/Handle%20Change%20in%20React%20Forms/#3-complete-example-given-by-chatgpt-and-not-confirmed-yet","title":"3. Complete example (Given by chatGPT and not confirmed yet)","text":"<pre><code>import React, { useState } from 'react';\n\nconst FormComponent = () =&gt; {\n    const [formData, setFormData] = useState({\n        name: \"\",\n        age: \"\",\n        acceptTerms: false,\n        gender: \"\",\n        favoriteColor: \"\",\n    });\n\n    const handleChange = (e) =&gt; {\n        const { name, value, type, checked } = e.target;\n\n        // Handle checkboxes\n        if (type === \"checkbox\") {\n            setFormData((prevData) =&gt; ({\n                ...prevData,\n                [name]: checked,\n            }));\n        }\n        // Handle radio buttons\n        else if (type === \"radio\") {\n            setFormData((prevData) =&gt; ({\n                ...prevData,\n                [name]: value,\n            }));\n        }\n        // Handle other input types (text, number, select, etc.)\n        else {\n            setFormData((prevData) =&gt; ({\n                ...prevData,\n                [name]: value,\n            }));\n        }\n    };\n\n    const handleSubmit = (e) =&gt; {\n        e.preventDefault();\n        console.log(formData);  // Handle form submission (e.g., send data to an API)\n    };\n\n    return (\n        &lt;form onSubmit={handleSubmit}&gt;\n            {/* Text Input */}\n            &lt;label&gt;\n                Name:\n                &lt;input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleChange}\n                /&gt;\n            &lt;/label&gt;\n\n            {/* Number Input */}\n            &lt;label&gt;\n                Age:\n                &lt;input\n                    type=\"number\"\n                    name=\"age\"\n                    value={formData.age}\n                    onChange={handleChange}\n                /&gt;\n            &lt;/label&gt;\n\n            {/* Checkbox */}\n            &lt;label&gt;\n                Accept Terms:\n                &lt;input\n                    type=\"checkbox\"\n                    name=\"acceptTerms\"\n                    checked={formData.acceptTerms}\n                    onChange={handleChange}\n                /&gt;\n            &lt;/label&gt;\n\n            {/* Radio Buttons */}\n            &lt;fieldset&gt;\n                &lt;legend&gt;Gender:&lt;/legend&gt;\n                &lt;label&gt;\n                    Male\n                    &lt;input\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"male\"\n                        checked={formData.gender === \"male\"}\n                        onChange={handleChange}\n                    /&gt;\n                &lt;/label&gt;\n                &lt;label&gt;\n                    Female\n                    &lt;input\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"female\"\n                        checked={formData.gender === \"female\"}\n                        onChange={handleChange}\n                    /&gt;\n                &lt;/label&gt;\n            &lt;/fieldset&gt;\n\n            {/* Select Dropdown */}\n            &lt;label&gt;\n                Favorite Color:\n                &lt;select\n                    name=\"favoriteColor\"\n                    value={formData.favoriteColor}\n                    onChange={handleChange}\n                &gt;\n                    &lt;option value=\"\"&gt;-- Select Color --&lt;/option&gt;\n                    &lt;option value=\"red\"&gt;Red&lt;/option&gt;\n                    &lt;option value=\"blue\"&gt;Blue&lt;/option&gt;\n                    &lt;option value=\"green\"&gt;Green&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/label&gt;\n\n            &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    );\n};\n\nexport default FormComponent;\n</code></pre>"},{"location":"learning/react-native/Getting%20Started/","title":"Getting Started","text":""},{"location":"learning/react-native/Getting%20Started/#environment-setup","title":"Environment setup","text":"<ol> <li>Make sure to install android studio, jdk 11 or above and set paths as stated by official documentation. docs</li> <li>To get the output shown on mobile using USB cable follow these docs .</li> </ol>"},{"location":"learning/react-native/Getting%20Started/#creating-project","title":"Creating project","text":"<ol> <li>Initialise the project - <code>npx react-native init AwesomeProject</code>. Reference</li> <li>To run the project - <code>npx react-native run-android</code> and <code>npm start</code> in the project directory. (make sure that your phone is connected, you can check this by running command <code>adb devices</code>. If this command you shows a connected devices and you are all set.)</li> <li>If the project does not run and shows error reinstall watchman or run <code>npm install</code> in root folder.</li> </ol>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/","title":"Typescript   Hitesh Chaudhary (Youtube)","text":"<p>Reference Link : Youtube Link</p>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#provides-type-safety","title":"Provides Type Safety","text":"<p>Example: <pre><code>2 + \"2\" // Outputs: '22' in JavaScript\n</code></pre></p> <p>Typescript helps prevent such issues with type safety.</p>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#what-does-typescript-do","title":"What does TypeScript do?","text":"<ul> <li>Static Checking: Catches errors at compile-time instead of runtime.</li> <li>TypeScript is a development tool; the project still runs in JavaScript.</li> </ul>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#installation","title":"Installation","text":"<p>Refer to the official TypeScript documentation for installation instructions. docs</p>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#running-a-typescript-file","title":"Running a TypeScript File","text":"<pre><code>tsc index.ts\n</code></pre> <p>This command compiles the TypeScript file into a JavaScript file (<code>index.js</code>).</p>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#basic-syntax","title":"Basic Syntax","text":"<pre><code>let variableName: type = value;\n</code></pre>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#type-inference","title":"Type Inference","text":"<p>In many cases, TypeScript can infer the type. For example:</p> <pre><code>let userId = 3; // TypeScript infers 'userId' as a number.\n</code></pre>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#functions","title":"Functions","text":""},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#basic-function","title":"Basic Function","text":"<pre><code>function addTwo(num: number): number {     return num + 2; }\n</code></pre> <p>Or using an arrow function:</p> <pre><code>const addTwo = (num: number): number =&gt; num + 2;\n</code></pre>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#objects-in-functions","title":"Objects in Functions","text":"<pre><code>function createUser({name: string, isPaid: boolean}): {name: string, price: boolean} {     \n    return {name: \"harsh\", price: false}; \n}\n</code></pre>"},{"location":"learning/typescript/Typescript%20-%20Hitesh%20Chaudhary%20%28Youtube%29/#working-with-types","title":"Working with Types","text":"<p>You can define types for complex data structures. <pre><code>type User = {     \n        name: string;     \n        email: string;     \n        isActive: boolean; \n        };  \nfunction createUser(user: User) {     \n    // Function logic here \n    }\n</code></pre></p>"},{"location":"legacy-docs/Quick%20Access/","title":"Front-End","text":"<ul> <li>[[My Documentation/Frontend-Development/Getting Started|Getting Started]]</li> </ul>"},{"location":"legacy-docs/Quick%20Access/#back-end","title":"Back-End","text":"<ul> <li>[[My Documentation/Backend-Development/Getting Started|Getting Started]]</li> </ul>"},{"location":"legacy-docs/Quick%20Access/#various-scripts","title":"Various Scripts","text":"<ol> <li>Full Stack MERN application with email Verification</li> <li>Speech Recognition</li> <li>Gemini API Script</li> <li>Send Mail Using Nodemailer</li> <li>Send Message on Whatsapp</li> </ol>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/","title":"Modulo Multiplicative Inverse","text":"<p>[!SUMMARY]- Table of Contents - [[Modulo Multiplicative Inverse#Definition|Definition]] - [[Modulo Multiplicative Inverse#Finding Modular Inverse using Extended Euclidean algorithm|Finding Modular Inverse using Extended Euclidean algorithm]] \u00a0\u00a0\u00a0- [[Modulo Multiplicative Inverse#Implementation|Implementation]] \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0- [[Modulo Multiplicative Inverse#Brute |Brute ]] \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0- [[Modulo Multiplicative Inverse#A and M are co-prime (GCD(A, M) = 1)|A and M are co-prime (GCD(A, M) = 1)]] \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0- [[Modulo Multiplicative Inverse#Modular multiplicative inverse when M is prime|Modular multiplicative inverse when M is prime]] - [[Modulo Multiplicative Inverse#References |References ]] - [[Modulo Multiplicative Inverse#Tags|Tags]]</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#definition","title":"Definition","text":"<p>A modular multiplicative inverse of an integer a is an integer x such that a.x is congruent to 1 modular some modulus m. To write it in a formal way: we want to find an integer x so that</p> \\[ a.x \u2245 1 (mod\\space m) \\] <p>We also denote x simply with a<sup>-1</sup>.</p> <p>We should note that modular inverse does not always exist. It can be proven that the modular inverse exists if and only if a and m are relatively prime (i.e. gcd(a, m) = 1).</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#finding-modular-inverse-using-extended-euclidean-algorithm","title":"Finding Modular Inverse using Extended Euclidean algorithm","text":"<p>$$ a.x + m.y = 1 $$ This is linear Diophantine equation in two variables. When gcd(a, m)  = 1, the equation has a solution and can be found using extended Euclidean algorithm. Note that gcd(a, m) = 1 is also the condition for the modular inverse to exist.</p> <p>Now, if we take modulo m of both sides, we can get rid of m.y and the equation become $$ a.x \u2245 1 (mod\\space m) $$ Thus, the modular inverse of a is x.</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#implementation","title":"Implementation","text":""},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#brute","title":"Brute","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint modInverse(int A, int M)\n{\n\u00a0\u00a0\u00a0\u00a0for(int X = 1; X &lt; M; X++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (((A % M) * (X % M)) % M == 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return X;\n}\n\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int A = 3, M = 11;\n\u00a0\u00a0\u00a0\u00a0cout &lt;&lt; modInverse(A, M);\n\u00a0\u00a0\u00a0\u00a0return 0;\n\n}\n</code></pre> <p>\\(Time \\space Complexity - O(M)\\) \\(Space \\space Complexity - O(1)\\)</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#a-and-m-are-co-prime-gcda-m-1","title":"A and M are co-prime (GCD(A, M) = 1)","text":"<pre><code>using namespace std;\nint gcdExtended(int a, int b, int &amp;x, int &amp;y) {\n    if (a == 0) {\n        x = 0;\n        y = 1;\n        return b;\n    }\n\n    int x1, y1;\n    int gcd = extendedGCD(b % a, a, x1, y1);\n\n    x = y1 - (b / a) * x1;\n    y = x1;\n\n    return gcd;\n}\nvoid modInverse(int A, int M)\n{\n    int x, y;\n    int g = gcdExtended(A, M, &amp;x, &amp;y);\n    if (g != 1)\n        cout &lt;&lt; \"Inverse doesn't exist\";\n    else {\n        int res = (x % M + M) % M;\n        cout &lt;&lt; \"Modular multiplicative inverse is \" &lt;&lt; res;\n    }\n}\nint main()\n{\n    int A = 3, M = 11;\n    modInverse(A, M);\n    return 0;\n}\n</code></pre> <p>\\(Time \\space Complexity - O(log \\space m)\\) \\(Space \\space Complexity - O(log \\space m)\\)</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#modular-multiplicative-inverse-when-m-is-prime","title":"Modular multiplicative inverse when M is prime","text":"<pre><code>#include &lt;iostream&gt; \nusing namespace std; \nint power(int base, int exponent, int mod) \n{ \n    int result = 1; \n    while (exponent &gt; 0) \n    { \n        if (exponent % 2 == 1) \n            result = (result * base) % mod; \n        exponent &gt;&gt;= 1; \n        base = (base * base) % mod; \n    } \n    return result; \n} \nint modInverse(int a, int m) \n{ \n    a = (a % m + m) % m; \n    return power(a, m - 2, m); \n} \nint main() \n{ \n    int a, m; \n    cin &gt;&gt; a &gt;&gt; m; \n    int result = modInverse(a, m); \n    cout &lt;&lt; (result == 0 ? \"No modular inverse\" : to_string(result)) &lt;&lt; endl; \n    return 0; \n}\n</code></pre> <p>\\(Time \\space Complexity - O(log \\space m)\\) \\(Space \\space Complexity - O(log \\space m)\\)</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#references","title":"References","text":"<p>https://cp-algorithms.com/algebra/module-inverse.html https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/</p>"},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#tags","title":"Tags","text":""},{"location":"legacy-docs/DSA-CP/Modulo%20Multiplicative%20Inverse/#modulo-inverse-modulo-inverse-cp-concept-cp","title":"modulo-inverse #modulo #inverse #cp-concept #cp","text":""},{"location":"legacy-docs/DSA-CP/Good%20Questions/Online%20Assessment/Beautiful%20Painting/","title":"Beautiful Painting","text":"<p>There are\u00a0n\u00a0pictures delivered for the new exhibition. The\u00a0i-Th painting has beauty\u00a0a__i. We know that a visitor becomes happy every time he passes from a painting to a more beautiful one.</p> <p>We are allowed to arranged pictures in any order. What is the maximum possible number of times the visitor may become happy while passing all pictures from first to last? In other words, we are allowed to rearrange elements of\u00a0a\u00a0in any order. What is the maximum possible number of indices\u00a0i\u00a0(1\u2009\u2264\u2009i\u2009\u2264\u2009n\u2009-\u20091), such that\u00a0a__i\u2009+\u20091\u2009&gt;\u2009ai.</p> <p>Input The first line of the input contains integer\u00a0n\u00a0(1\u2009\u2264\u2009n\u2009\u2264\u20091000)\u00a0\u2014 the number of painting.</p> <p>The second line contains the sequence\u00a0a_1,\u2009_a_2,\u2009...,\u2009_a__n\u00a0(1\u2009\u2264\u2009a__i\u2009\u2264\u20091000), where\u00a0a__i\u00a0means the beauty of the\u00a0i-Th painting.</p> <p>Output Print one integer\u00a0\u2014 the maximum possible number of neighbouring pairs, such that\u00a0ai\u2009+\u20091\u2009&gt;\u2009ai, after the optimal rearrangement.</p> <p>Examples input 5 20 30 10 50 40  </p> <p>output 4  </p> <p>input 4 200 100 100 200  </p> <p>output 2  </p> <p>Note In the first sample, the optimal order is:\u00a010,\u200920,\u200930,\u200940,\u200950. In the second sample, the optimal order is:\u00a0100,\u2009200,\u2009100,\u2009200.</p> <pre><code> #include &lt;bits/stdc++.h&gt;\n using namespace std;\n map&lt;int,int&gt; frequency;\n int main(){\n    int n;\n    cin&gt;&gt;n;\n    int c=0;\n    for(int i=0;i&lt;n;i++)\n    {\n       int x; cin&gt;&gt;x;\n       frequency[x]++;\n       c=max(c,frequency[x]);\n    }\n    cout&lt;&lt;n-c&lt;&lt;endl;\n }\n</code></pre> <p>https://codeforces.com/problemset/problem/651/B</p>"},{"location":"legacy-docs/DSA-CP/Good%20Questions/Online%20Assessment/Beautiful%20Painting/#shreya-oa-oa-codeforces","title":"shreya-oa #oa #codeforces","text":""},{"location":"legacy-docs/Errors/Cors%20Error%20in%20while%20sending%20cookies/","title":"Cors Error in while sending cookies","text":"<p>when using credentials like cookie that are begin set by backend make sure to not use cors configuration like this:</p> <pre><code>app.use(\n  cors({\n    origin: \"*\",\n    credentials: true,\n  })\n);\n</code></pre> <p>The above approach will not let browser send the cookies</p> <p>Instead be specific like this:</p> <pre><code>app.use(\n  cors({\n    origin: \"http://localhost:5173\",\n    credentials: true,\n  })\n);\n</code></pre>"},{"location":"legacy-docs/Errors/Errors%20while%20installing%20android%20studio/","title":"Errors while installing android studio","text":"<ol> <li>Download package</li> <li>Install it insid /usr/local/</li> <li>Set enviornment variables</li> <li>make sure to install java 17 </li> </ol>"},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/","title":"Memset Initialisation error","text":""},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#summary","title":"Summary","text":""},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#-memset-cant-be-used-to-initialise-int-array-with-1-an-array-of-int-can-only-be-initialised-with-0-or-1-using-memset","title":"- <code>memset</code>\u00a0can't be used to initialise\u00a0<code>int</code>\u00a0array with\u00a0<code>1</code>, an array of <code>int</code> can only be initialised with <code>0</code> or <code>-1</code> using memset","text":""},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#lessons-learned","title":"Lessons Learned","text":"<p>Therefore, <code>memset</code> cannot be used to initialise an <code>int</code> array with <code>1</code> because if an <code>int</code> is represented by 4 bytes, then <code>memset</code> will initialise each byte with <code>1</code>.</p> <p>The value <code>16843009</code> is equivalent to <code>0x01010101</code>. Each of the 4 bytes is initialised with <code>01</code>.</p> <p>Using <code>memset</code>, an array of <code>int</code> can only be initialised with <code>0</code> or <code>-1</code> because <code>0</code> and <code>-1</code> both have all bits <code>0</code> and <code>1</code> respectively in the two's complement binary representation, regardless of the size of the <code>int</code> data type.</p>"},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#reference-url","title":"Reference URL","text":""},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#-stack-overflow","title":"- Stack Overflow","text":""},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#tags","title":"Tags","text":""},{"location":"legacy-docs/Errors/Memset%20Initialisation%20error/#cpp-memset-initialisation","title":"cpp #memset #initialisation","text":""},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/","title":"Node + Python deployment error","text":""},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/#summary","title":"Summary","text":"<p>You cannot Run Python script with Node JS on render, but you can run node js with Python configuration.So use Python native environment to deploy the project which has both Python and node js</p>"},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/#lessons-learned","title":"Lessons Learned","text":"<p>Node is available on all\u00a0Native Environments, so you\u2019d need to use a Python Native Environment if you wanted to run Python scripts, which would still allow you to configure Node.</p>"},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/#reference-url","title":"Reference URL","text":""},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/#-render","title":"- Render","text":""},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/#tags","title":"Tags","text":""},{"location":"legacy-docs/Errors/Node%20%2B%20Python%20deployment%20error/#error-node-python-error-render","title":"error #node-python-error #render","text":""},{"location":"legacy-docs/General/Create%20Code%20documentation/","title":"Just the docs (Jekyll)","text":"<ol> <li>Create a obsidian vault with name docs folder inside the project root directory.</li> <li>Create a ____config.yml__ file inside it and paste the below code <pre><code>remote_theme: \"pmarsceill/just-the-docs@main\"\n\ntitle: Documentation\ndescription: this is the official documentation on how to use this repo.\n\ntheme:\n  name: jekyll-theme-cayman\n\ncolor_scheme: dark \n</code></pre></li> <li>Create a create a index file inside the docs folder which has all the main pages link in relative formatting ([Login](./API/login)).</li> <li>Create a indexing for every big folder.</li> <li>Every Heading tag will be visible in the left side navbar</li> </ol>"},{"location":"legacy-docs/General/Create%20Code%20documentation/#mk-docs","title":"Mk docs","text":"<p>https://www.youtube.com/watch?v=Q-YA_dA8C20</p>"},{"location":"legacy-docs/General/HDMI%20PORT%20not%20working%20in%20Ubuntu/","title":"HDMI PORT not working in Ubuntu","text":"<p>HDMI Port not working in Ubuntu which has NVIDIA graphic card.</p> <p>Run the following commands in terminal</p> <pre><code>sudo ubuntu-drivers autoinstall\nsudo apt install nvidia-kernel-source-470\nsudo ubuntu-drivers autoinstall\n</code></pre> <p>Now restart the laptop.</p>"},{"location":"legacy-docs/General/HDMI%20PORT%20not%20working%20in%20Ubuntu/#ubuntu-monitor-display","title":"ubuntu #monitor #display","text":""},{"location":"legacy-docs/General/Install%20a%20application%20and%20get%20it%20on%20launcher/","title":"Install a application and get it on launcher","text":"<ol> <li>First download the tar package and then extract in the <code>/usr/local/</code> folder.</li> <li>After that Export path variables if necessary.</li> <li>After that go to <code>/usr/share/applications</code> and create a <code>your-application.desktop</code> and add the content similar to the given below <pre><code>[Desktop Entry]\nVersion=1.0\nType=Application\nTerminal=true\nName=Android Studio\nComment=Launches Android Studio\nIcon=/usr/local/android-studio/bin/studio.png\nExec=/usr/local/android-studio/bin/studio.sh\nX-Desktop-File-Install-Version=0.26\n</code></pre></li> </ol> <p>after this check if it is running 4. <code>desktop-file-validate android-studio.desktop</code> 5. install the file by <code>sudo desktop-file-install android-studio.desktop</code> This is an example of getting application to the launcher.</p>"},{"location":"legacy-docs/General/Install%20a%20application%20and%20get%20it%20on%20launcher/#launcher-application-launcher-android-studio-usrlocal-usrshareapplications-android-studio-desktop","title":"launcher #application-launcher #android-studio #/usr/local/ #/usr/share/applications #android-studio-desktop","text":"<p>Reference: https://bterczynski.medium.com/adding-android-studio-to-your-applications-launcher-and-favorites-bar-in-ubuntu-eff05e6abfd</p>"},{"location":"legacy-docs/General/Install%20node%20latest%20version/","title":"Install node latest version","text":"<ol> <li>Install nvm if not installed</li> <li>using nvm install latest node verison by <code>nvm install --lts</code></li> </ol>"},{"location":"legacy-docs/General/Remove%20Icons%20from%20Ubuntu/","title":"Remove Icons from Ubuntu","text":"<p>Search for extensions in the search bar. You will get option there. From there you can remove icons display or turn it on.</p>"},{"location":"legacy-docs/General/Remove%20Icons%20from%20Ubuntu/#install-gnome-extension","title":"Install gnome Extension","text":""},{"location":"legacy-docs/General/Remove%20Icons%20from%20Ubuntu/#installing-gnome-shell-extensions","title":"Installing GNOME Shell Extensions","text":"<p>Now that you know what GNOME Shell Extensions are, let\u2019s see how to install them.</p> <p>There are three ways you can use GNOME Extensions:</p> <ol> <li>Use a minimal set of extensions from Ubuntu (or your Linux distribution)</li> <li>Find and install extensions in your web browser</li> <li>Install extensions using Extension Manager App</li> <li>Download and manually install extensions</li> </ol> <p>Although GNOME Tweaks is not required for extensions to work,\u00a0installing GNOME Tweak Tool in Ubuntu\u00a0or whichever distribution you are using is better.</p> <pre><code>sudo apt install gnome-tweaks\n</code></pre> <p>At times, you would also need to know the version of GNOME Shell you are using. This helps determine whether an extension is compatible with your system. You can use the command below to find it:</p> <pre><code>gnome-shell --version\n</code></pre>"},{"location":"legacy-docs/General/Remove%20Icons%20from%20Ubuntu/#method-1-use-the-gnome-shell-extensions-package","title":"Method 1: Use the gnome-shell-extensions package","text":"<p>Ubuntu (and several other Linux distributions such as Fedora) provide a package with a minimal set of GNOME extensions. You don\u2019t have to worry about compatibility here as it is tested by your Linux distribution.</p> <p>If you want a no-brainer, just get this package and you\u2019ll have 8-10 GNOME extensions installed.</p> <pre><code>sudo apt install gnome-shell-extensions\n</code></pre> <p>Once installed, log out and re-login to your system. After that, start GNOME Extensions App from Overview. This extensions app will be installed as part of\u00a0<code>gnome-shell-extensions</code>\u00a0package.</p> <p>You\u2019ll find a few extensions installed. You can just toggle the button to start using an installed extension.</p>"},{"location":"legacy-docs/General/Sync%20Obsidian%20for%20free/","title":"Import the Existing Project","text":"<ol> <li>Install the community plugin called remotely save.</li> <li>In the settings of the plugin insert the following credentials<ul> <li>Endpoint - https://gateway.storjshare.io</li> <li>Region - ap1</li> <li>Access Key ID - jwo5uohqbwlrwnwe23wgdo4jbnfa</li> <li>Secret Access Key - jyrvzkv4vpcl4z7hp4pddqv7l7zekpnzycsipygbdbjrktrhhbd2u</li> <li>Bucket Name - obsidian</li> <li>Run once on startup - 10 second after startup</li> <li>Encryption paraphase - H@rsh1234 (not required saving just in case) Sync using the icon given on the left and then you will fetch everything in this current directory</li> </ul> </li> </ol>"},{"location":"legacy-docs/General/Sync%20Obsidian%20for%20free/#sync-for-new-vault","title":"Sync for new vault","text":"<ol> <li>Create a account on storjshare.io and than create a bucket.</li> <li>Get the access key id, region, secret access key and then follow the same procedure as the existing project</li> </ol>"},{"location":"legacy-docs/General/Sync%20Obsidian%20for%20free/#reference","title":"Reference","text":""},{"location":"legacy-docs/General/Sync%20Obsidian%20for%20free/#-youtube","title":"- Youtube","text":""},{"location":"legacy-docs/General/Template%20for%20Full%20Stack%20Mern%20Application/","title":"Template for Full Stack Mern Application","text":"<ol> <li>Download the script <code>fullstack_template.sh</code></li> <li>Give the execute right to the script <code>chmod +x fullstack_template.sh</code></li> <li>run the script <code>./fullstack_template.sh</code></li> </ol> <pre><code># for port\nPORT = 8000\nSERVER_URL = http://localhost:8000\n\n# for sending mail\nEMAIL_ID = &lt;your-email&gt;\nAPP_PASSWORD = &lt;your-app-password&gt;\n\n# for cross origin resource sharing\nCORS_ORIGIN = http://localhost:5173\n\n# for mongodb connection\nMONGODB_URI = mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.&lt;&gt;.mongodb.net/mern_template\n\n# for jwt secret\nJWT_SECRET = example1234\n</code></pre>"},{"location":"legacy-docs/General/Transfer%20File%20from%20laptop%20to%20PC/","title":"Linux to Android","text":"<ul> <li>Create FTP server in android using WiFi FTP server using some kind of app.</li> <li>Connect laptop to android wifi laptop wifi and mobile hotspot.</li> <li>In the other location tab, write the ftp URL than the file will open up.</li> </ul> <pre><code>ftp://192.168.115.185:2221\n</code></pre> <p>Now it will ask for credentials or anonymous connect. After Connecting you will see the folder of the ip in the files.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/","title":"Getting Started","text":"<p>[!SUMMARY]- Table of Contents - [[Getting Started#Initialising Package.json|Initialising Package.json]] - [[Getting Started#Installing Packages|Installing Packages]] - [[Getting Started#Create file and folders|Create file and folders]] - [[Getting Started#Making Changes in package.json|Making Changes in package.json]] - [[Getting Started#Further Things|Further Things]] - [[Getting Started#Basic Code|Basic Code]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#initialising-packagejson","title":"Initialising Package.json","text":"<ul> <li>Create a folder for your back-end project open terminal in vs code and write npm init in it.</li> </ul> <pre><code>npm init\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#-it-will-ask-various-questions-answer-them-and-then-create-a-packagejson-file-in-you-folder","title":"- It will ask various questions answer them and then create a Package.json file in you folder.","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#installing-packages","title":"Installing Packages","text":"<p>Write following line in your terminal.</p> <pre><code>npm install express dotenv mongoose cors\n</code></pre> <pre><code>npm i nodemon prettier -D\n</code></pre> <p>This will install express, dotenv and mongoose in your dependencies and nodemon in your dev dependencies (Check your package.json to confirm).</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#create-file-and-folders","title":"Create file and folders","text":"<p>Create folder such as follows - public (folder) - to keep all public files     - temp - to keep all the temporary files like images.         - .gitkeep - src (folder)- all source code     - index.js (file) - first file to run     - app.js (file) -      - constants (file) - to keep all the constants     - controllers (folder) - to keep all the functionalities files     - routes (folder) - to keep all the routes files     - config (folder) - all the configuration (database and third party api) related files     - middlewares (folder) - all the middlewares     - utils (folder) - all the utility files and functions     - models (folder) - to store all the schema and models of mongoose - .env (file) - stores all the environment variables. - .gitignore - keeps files names you do not want in GitHub repo. - .prettierrc - to store prettier configuration - .prettierignore - to store all the files that prettier should ignore</p> <p>Create .env file and add your environment variables.</p> <pre><code>PORT = 3000\n</code></pre> <p>Create .gitignore and add the files you do not want in your GitHub repo. You can also use gitignore generator to generate it.</p> <pre><code>node_modules\n.env\n</code></pre> <p>Create .prettierrc and add the configurations</p> <pre><code>{\n  \"singleQuote\": false,\n  \"bracketSpacing\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"es5\",\n  \"semi\": true,\n  \"printWidth\": 120\n}\n</code></pre> <p>Create .prettierignore and add the configurations. You can also use prettierignore generator to generate it.</p> <pre><code>*.env\n.env\n.env.*\n/.vscode\n/node_modules\n./dist\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#making-changes-in-packagejson","title":"Making Changes in package.json","text":"<ul> <li>Add Start and dev scripts in your package.json and also include type module in it.</li> </ul> <pre><code>\"type\": \"module\",\n\"scripts\": {\n        \"start\": \"node index.js\",\n        \"dev\": \"nodemon index.js\"\n    }\n</code></pre> <p>This is how it will look</p> <pre><code>{\n    \"name\": \"chaibackend\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A backend project to learn Backend\",\n    \"main\": \"index.js\",\n    \"type\": \"module\",\n    \"scripts\": {\n        \"dev\": \"nodemon src/index.js\",\n        \"start\": \"node src/index.js\"\n    },\n    \"keywords\": [\n    \"Javascript\",\n    \"Backend\"\n    ],\n    \"author\": \"Harsh Sharma\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"nodemon\": \"^3.0.3\",\n        \"prettier\": \"3.2.4\"\n    },\n    \"dependencies\": {\n        \"dotenv\": \"^16.3.2\",\n        \"express\": \"^4.18.2\",\n        \"mongoose\": \"^8.1.0\"\n    }\n}\n</code></pre> <ul> <li>removed test script and added start and dev script</li> <li>added type as module which will enable ES 6 imports</li> </ul> <p>Now you can run the backend by writing</p> <pre><code>npm run dev\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#further-things","title":"Further Things","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#project-setup","title":"Project Setup","text":"<ul> <li>[[Create Express App]] - Create express server and set up some basic middlewares.</li> <li>[[Connect Database]] - Connect to MongoDB Database</li> <li>Add utility Function and classes<ul> <li>[[AsyncHandler]] - Utility function to get a generalised try catch function.</li> <li>[[ApiError]] - Utility class to standardise the error shown </li> <li>[[ApiResponse]] - Utility class to standardise the response returned </li> </ul> </li> <li>[[Modelling Schema]] - Model your mongoose schema</li> <li>[[Handle File upload]] - Backend to upload file if any</li> <li>[[Setup Postman]] - setup postman for easy url testing</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#creating-actual-backend","title":"Creating actual backend","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#-make-routes-start-making-routes","title":"- [[Make Routes]] - Start making routes","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Getting%20Started/#basic-code","title":"Basic Code","text":"<p>Write the following code in your main entry point file e.g. Index.js.</p> <pre><code>import express from 'express'\nimport 'dotenv/config';\nimport cors from 'cors';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(\n    cors({\n        origin: process.env.CORS_ORIGIN,\n        credentials: true,\n    })\n);\n\napp.get('/', (req, res) =&gt; {\nres.send('Hello World!')\n})\n\napp.listen(port, () =&gt; {\nconsole.log(`Example app listening on port ${port}`)\n})\n</code></pre> <p>This code will create a server that will listen to port 3000 and has create a ' / ' route which will return Hello world in return.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/Google%20Oauth%202.0%20%2B%20JWT/","title":"Google Oauth 2.0 + JWT","text":"<p>[!SUMMARY]- Table of Contents - [[Google Oauth 2.0 + JWT#Step 1 - Create Project in Google Console|Step 1 - Create Project in Google Console]] - [[Google Oauth 2.0 + JWT#Step 2 - Implementation code|Step 2 - Implementation code]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/Google%20Oauth%202.0%20%2B%20JWT/#step-1-create-project-in-google-console","title":"Step 1 - Create Project in Google Console","text":"<p>Create a project in google console - Follow the link and create a project Google Console - From the top navigation menu click on API and services and than Oauth Screen (You are allowed only one Oauth screen per project). - Create the Oauth Screen which will require you to fill the following details:     - App Name : Name of the App e.g. <code>SkillSwap</code>     - User Support Email : For users to contact you with questions about their consent e.g. <code>harshsharma20503@gmail.com</code>     - App Logo: any app logo     - App domain : terms and services link etc (You can leave empty)     - Authorised domain:   domain is used on the consent screen e.g. <code>localhost.com</code> in development and another domain <code>yourCustomDomain.com</code>     - Move on to the next step     - In add Scopes select userinfo.email, userinfo.profile and openid - You also have to select test users  - In the From the top navigation menu click on API and services and than Credentials.     - Click on Create Credentials     - Select Application type     - Authorised JavaScript Origins : e.g. <code>http://localhost:5173</code>     - Authorised redirect URIs : e.g. <code>http://localhost:8080/auth/google</code> This is the backend route where you want the authorisation to redirect to.     - Click on Create</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/Google%20Oauth%202.0%20%2B%20JWT/#step-2-implementation-code","title":"Step 2 - Implementation code","text":"<p>Create a project and initialise express server - Inside app.js <pre><code>//imports\nimport passport from \"passport\";\n//passport middleware\napp.use(passport.initialize());\n//routes\napp.use(\"/auth\", authRouter);\n</code></pre></p> <ul> <li> <p>Inside auth.routes.js <pre><code>import { Router } from \"express\";\nimport { googleAuthCallback, googleAuthHandler, handleGoogleLoginCallback } from \"../controllers/auth.controllers.js\";\n\nconst router = Router();\n\nrouter.get(\"/google\", googleAuthHandler);\nrouter.get(\"/google/callback\", googleAuthCallback, handleGoogleLoginCallback);\n\nexport default router;\n</code></pre></p> </li> <li> <p>inside auth.controller.js <pre><code>import generateJWTToken from \"../utils/generateJWTToken.js\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { User } from \"../models/user.model.js\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: \"/auth/google/callback\",\n    },\n    async (accessToken, refreshToken, profile, done) =&gt; {\n      done(null, profile);\n    }\n  )\n);\n\nexport const googleAuthHandler = passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] });\n\nexport const googleAuthCallback = passport.authenticate(\"google\", {\n  failureRedirect: \"http://localhost:5173/login\",\n  session: false,\n});\n\nexport const handleGoogleLoginCallback = async (req, res) =&gt; {\n// here you handle the things you want to do after authentication\n  const existingUser = await User.findOne({ email: req.user._json.email });\n\n  if (!existingUser) {\n    await User.create({\n      email: req.user._json.email,\n      name: req.user._json.name,\n    });\n  }\n\n  const jwtToken = generateJWTToken(req.user._json);\n  const expiryDate = new Date(Date.now() + 24 * 60 * 60 * 1000);\n  res.cookie(\"accessToken\", jwtToken, { httpOnly: true, expires: expiryDate, secure: false });\n  res.redirect(\"http://localhost:5173/\");\n};\n</code></pre></p> </li> </ul> <p>This is a way in which you get the google authentication and then use jwt token to verify each and every subsequent request using the jwt middleware.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/Google%20Oauth%202.0/","title":"Steps","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/Google%20Oauth%202.0/#google-console-part","title":"Google Console Part","text":"<ol> <li>Go to the console.cloud.google.com and create a project</li> <li>Go to the left navigation and click on APIs &amp; services and than Credentials</li> <li>On the top panel click on the create credentials than Oauth client ID</li> <li>Than configure consent screen</li> <li>Choose External users and than click on create.</li> <li>Enter app name and developer information</li> <li>if this error comes <code>The request has been classified as abusive and was not allowed to proceed</code> than modify the app name and save again e.g. name QuickStart.</li> <li>Add the scope to email, profile and also the openid and than click on update than save, no need to write the test users.</li> <li>Now go back to create credentials same way and select the type of the application you are making.</li> <li>Write the allowed java script origin request to both domain of your frontend and backend. e.g. <code>Authorised Javascript Origin</code> - http://localhost:5173 (or the deployed site link)       <code>Authorised redirect URIs</code> - http://localhost:8000/auth/google/callback (or the deployed backend link)</li> </ol>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/Google%20Oauth%202.0/#now-moving-to-the-coding-part","title":"Now Moving to the coding part","text":"<ol> <li>Install the following dependencies inside your backend  <pre><code>npm install passport express-session passport-google-oauth20\n</code></pre></li> <li>Now go to the file where you have initialised your express app.</li> <li>Initialise the passport strategy <pre><code>passport.use(...);\npassport.serializeUser(...);\npassport.deserializeUser(...);\n</code></pre></li> <li>Initialise the middlewares to use sessions and passport <pre><code>app.use(session(...));\napp.use(passport.initialise());\napp.use(passport.session());\n</code></pre></li> <li>Now write the route that you will hit from frontend when someone click on the signup/login with google button <pre><code>.get('/auth/google'app, passport.authenticate('google', {scope: ['profile']}));\n</code></pre></li> <li>Now write the callback url that will be used to called when the authentication is success. <pre><code>app.get('/auth/google/callback', passport.authenticate('google', {failureRedirect : '/'}), (req, res) =&gt; {\n    res.redirect('/profile');\n})\n\napp.get('/profile', (req, res)=&gt;{\n    if(req.isAuthenticated())\n    {\n        Send whatever data you want\n    } else {\n        res.redirect('/')\n    }\n})\n</code></pre></li> <li>Create logout route <pre><code>app.get('/logout', (req, res)=&gt;{\n    req.logout();\n    req.session.destroy((err) =&gt; {\n        if(err) {\n            console.log(err);\n            return res.status(500).send(\"internal server error);\n        }\n        res.clearCookie('connect.sid');\n        res.redirect('/');\n    })\n})\n</code></pre></li> <li>Now in the frontend when the button of the google sign up is or login is clicked write the following code. <pre><code>onClick((e)=&gt;{\n    windows.location.href(\"http://localhost:8000/auth/google\");\n})\n</code></pre></li> </ol>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20Auth/","title":"Installation","text":"<pre><code>npm i jsonwebtoken bcrypt\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20Auth/#steps","title":"Steps","text":"<ul> <li>Create generate token function in util [[Generate JWT Token]]</li> <li>Create user model</li> <li> <p>Inside user model <pre><code>import mongoose, { Schema } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\n\nconst userSchema = new Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\nuserSchema.methods.matchPassword = async function (enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) {\n    next();\n  }\n  this.password = await bcrypt.hash(this.password, 12);\n});\n\nexport const User = mongoose.model(\"User\", userSchema);\n</code></pre></p> </li> <li> <p>Create routes for registration and login</p> </li> <li>Create user controllers for registerUser and login User</li> <li> <p>Inside user controller <pre><code>import { asyncHandler } from \"../utils/AsyncHandler.js\";\nimport { ApiResponse } from \"../utils/ApiResponse.js\";\nimport { ApiError } from \"../utils/ApiError.js\";\nimport { User } from \"../models/user.model.js\";\nimport { generateJWTToken } from \"../utils/GenerateToken.js\";\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n  console.log(\"******** registerUser Function ********\");\n\n  const { name, email, password, pic } = req.body;\n  if (!name || !email || !password) {\n    throw new ApiError(400, \"All fields are required\");\n  }\n\n  const existingUser = await User.findOne({ email });\n  console.log(\"Existing User\", existingUser);\n  if (existingUser) {\n    throw new ApiError(400, \"User already exists\");\n  }\n\n  const user = await User.create({ name, email, password, pic });\n\n  if (user) {\n    return res.status(200).json(\n      new ApiResponse(200, \"User registered successfully\", {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        token: generateJWTToken(user._id),\n      })\n    );\n  }\n\n  throw new ApiError(500, \"Failed to create User\");\n});\n\nconst loginUser = asyncHandler(async (req, res) =&gt; {\n  console.log(\"******** loginUser Function ********\");\n  const { email, password } = req.body;\n  if (!email || !password) {\n    throw new ApiError(400, \"All fields are required\");\n  }\n\n  console.log(\"User details\", email, password);\n\n  const user = await User.findOne({ email });\n  if (user &amp;&amp; (await user.matchPassword(password))) {\n    return res.status(200).json(\n      new ApiResponse(200, \"User logged in successfully\", {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        token: generateJWTToken(user._id),\n      })\n    );\n  }\n  throw new ApiError(401, \"Invalid email or password\");\n});\n\nexport { registerUser, loginUser };\n</code></pre></p> </li> <li> <p>now create a jwtVerify middleware to check every api call is authenticated or not</p> </li> <li>inside JWTverify <pre><code>import { User } from \"../models/user.model.js\";\nimport { ApiError } from \"../utils/ApiError.js\";\nimport { asyncHandler } from \"../utils/asyncHandler.js\";\nimport jwt from \"jsonwebtoken\";\n\nexport const verifyJWT = asyncHandler(async (req, res, next) =&gt; {\n  try {\n    const token = req.cookies?.accessToken || req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\n    if (!token) {\n      throw new ApiError(401, \"Unauthorized request\");\n    }\n\n    const decodedToken = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decodedToken?._id).select(\"-password\");\n    if (!user) {\n      throw new ApiError(401, \"Invalid JWT Token\");\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    throw new ApiError(401, error?.message || \"Invalid JWT Token\");\n  }\n});\n</code></pre></li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20with%20Verification%20Email/","title":"Create Modals","text":"<ol> <li> <p>unverified user schema <pre><code>import mongoose, { Schema } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\n\nconst unverifiedUserSchema = new Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\nunverifiedUserSchema.methods.matchPassword = async function (enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nunverifiedUserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) {\n    next();\n  }\n  this.password = await bcrypt.hash(this.password, 12);\n});\n\nexport const UnverifiedUser = mongoose.model(\"UnverifiedUser\", unverifiedUserSchema);\n</code></pre></p> </li> <li> <p>user schema <pre><code>import mongoose, { Schema } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\n\nconst userSchema = new Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n    companies: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"Company\",\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\nuserSchema.methods.matchPassword = async function (enteredPassword) {\n  console.log(\"Entered Password:\", enteredPassword);\n  const temp = await bcrypt.hash(enteredPassword, 12);\n  console.log(\"Temp: \", temp);\n  console.log(\"Password: \", this.password);\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\") || this.isNew) {\n    next();\n  }\n  this.password = await bcrypt.hash(this.password, 12);\n});\n\nexport const User = mongoose.model(\"User\", userSchema);\n</code></pre></p> </li> </ol>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20with%20Verification%20Email/#create-nodemailer-file","title":"Create Nodemailer file","text":"<ul> <li>inside util create file named send mail.js <pre><code>import nodemailer from \"nodemailer\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  host: \"smtp.gmail.com\",\n  port: 465,\n  auth: {\n    user: process.env.EMAIL_ID,\n    pass: process.env.APP_PASSWORD,\n  },\n});\n\nconst sendConfirmationMail = async (to, id) =&gt; {\n  const mailOptions = {\n    from: process.env.EMAIL_ID,\n    to: [to],\n    subject: \"Email Verification for MERN Chat App\",\n    html: `&lt;h1&gt;Click &lt;a href=http://localhost:5000/api/auth/confirmEmail/${id}&gt;here&lt;/a&gt; to confirm your email&lt;/h1&gt;`,\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log(\"Verification Email sent succesfully\");\n    return true;\n  } catch (error) {\n    console.log(\"Error while sending verification email\", error);\n    return false;\n  }\n};\n\nexport { sendConfirmationMail };\n</code></pre></li> <li>Don't forget to put things in .env</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20with%20Verification%20Email/#create-routes","title":"Create Routes","text":"<ul> <li>create auth.routes.js and auth.controller.js with /api/auth/login /api/auth/register etc</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20with%20Verification%20Email/#create-controllers","title":"Create Controllers","text":"<pre><code>import { asyncHandler } from \"../utils/AsyncHandler.js\";\nimport { ApiResponse } from \"../utils/ApiResponse.js\";\nimport { ApiError } from \"../utils/ApiError.js\";\nimport { User } from \"../models/user.model.js\";\nimport { UnverifiedUser } from \"../models/unverifiedUser.model.js\";\nimport { generateJWTToken } from \"../utils/GenerateToken.js\";\nimport { uploadOnCloudinary } from \"../config/cloudinary.js\";\nimport { sendConfirmationMail } from \"../utils/sendMail.js\";\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n  console.log(\"******** registerUser Function ********\");\n  console.log(\"Request Body\", req.body);\n  const { name, email, password } = req.body;\n  console.log(\"User details\", name, email, password);\n  if (!name || !email || !password) {\n    throw new ApiError(400, \"All fields are required\");\n  }\n\n  const existingUser = await User.findOne({ email });\n  console.log(\"Existing User\", existingUser);\n  if (existingUser) {\n    throw new ApiError(400, \"User already exists\");\n  }\n\n  const existingUnverifiedUser = await UnverifiedUser.findOne({ email });\n  console.log(\"Existing Unverified User\", existingUnverifiedUser);\n  if (existingUnverifiedUser) {\n    throw new ApiError(400, \"Already registered. Please verify your email\");\n  }\n\n  const unverifiedUser = await UnverifiedUser.create({ name, email, password });\n\n  if (!unverifiedUser) {\n    throw new ApiError(500, \"Failed to create User\");\n  }\n\n  const confirmationMail = await sendConfirmationMail(email, unverifiedUser._id);\n\n  if (!confirmationMail) {\n    await UnverifiedUser.deleteOne({ _id: unverifiedUser._id });\n    throw new ApiError(500, \"Failed to send confirmation mail\");\n  }\n\n  return res.status(200).json(\n    new ApiResponse(\n      200,\n      {\n        name: unverifiedUser.name,\n        email: unverifiedUser.email,\n      },\n      \"Please verify your email to continue\"\n    )\n  );\n});\n\nconst confirmEmail = asyncHandler(async (req, res) =&gt; {\n  const { id } = req.params;\n  if (!id) {\n    throw new ApiError(400, \"Invalid request\");\n  }\n\n  const unverifiedUser = await UnverifiedUser.findById(id);\n  if (!unverifiedUser) {\n    throw new ApiError(404, \"User not found\");\n  }\n\n  const user = await User.create({\n    name: unverifiedUser.name,\n    email: unverifiedUser.email,\n    password: unverifiedUser.password,\n  });\n\n  if (!user) {\n    throw new ApiError(500, \"Failed to create User\");\n  }\n\n  await UnverifiedUser.deleteOne({ _id: unverifiedUser._id });\n\n  return res.status(200).send(\"Email confirmed. You can now login\");\n});\n\nconst loginUser = asyncHandler(async (req, res) =&gt; {\n  console.log(\"******** loginUser Function ********\");\n  const { email, password } = req.body;\n  if (!email || !password) {\n    throw new ApiError(400, \"All fields are required\");\n  }\n\n  console.log(\"User details\", email, password);\n\n  const user = await User.findOne({ email });\n  if (user &amp;&amp; (await user.matchPassword(password))) {\n    return res.status(200).json(\n      new ApiResponse(\n        200,\n        {\n          _id: user._id,\n          name: user.name,\n          email: user.email,\n          token: generateJWTToken(user._id),\n        },\n        \"User logged in successfully\"\n      )\n    );\n  }\n  throw new ApiError(401, \"Invalid email or password\");\n});\n\nexport { uploadPicOnCloudinary, registerUser, confirmEmail, loginUser };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20with%20Verification%20Email/#create-generate-jwt-token-function","title":"Create generate  JWT token function","text":"<p>[[Generate JWT Token]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Auth/JWT%20with%20Verification%20Email/#create-verifyjwt-middleware","title":"Create verifyJWT middleware","text":"<pre><code>import { User } from \"../models/user.model.js\";\nimport { ApiError } from \"../utils/ApiError.js\";\nimport { asyncHandler } from \"../utils/asyncHandler.js\";\nimport jwt from \"jsonwebtoken\";\n\nexport const verifyJWT = asyncHandler(async (req, res, next) =&gt; {\n  try {\n    const token = req.cookies?.accessToken || req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\n    if (!token) {\n      throw new ApiError(401, \"Unauthorized request\");\n    }\n\n    const decodedToken = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decodedToken?._id).select(\"-password\");\n    if (!user) {\n      throw new ApiError(401, \"Invalid JWT Token\");\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    throw new ApiError(401, error?.message || \"Invalid JWT Token\");\n  }\n});\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Create%20Express%20App/","title":"Create Express App","text":"<p>[!SUMMARY]+ Table of Contents - [[Create Express App#Set up server |Set up server ]] - [[Create Express App#Set up middlewares|Set up middlewares]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Create%20Express%20App/#set-up-server","title":"Set up server","text":"<p>Inside the app.js file in src folder create the express app and export it.</p> <pre><code>import express from \"express\";\n\nconst app = express();\n\nexport { app };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Create%20Express%20App/#set-up-middlewares","title":"Set up middlewares","text":"<p>install and set up cors and cookie parser.</p> <pre><code>npm i cors cookie-parser\n</code></pre> <p>Enter all the accepted Origins in environment variable</p> <pre><code>CORS_ORIGIN = *\n</code></pre> <p>You can save multiple origins and than while using cors you can split them via space or comma in an array than use it.</p> <p>Set up all the necessary origins:</p> <p><pre><code>import express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\n\nconst app = express();\n\napp.use(\n    cors({\n        origin: process.env.CORS_ORIGIN,\n        credentials: true,\n    })\n);\n\napp.use(express.json({ limit: \"16kb\" })); // to parse json in body\napp.use(express.urlencoded({ extended: true, limit: \"16kb\" })); // to parse url\napp.use(express.static(\"public\")); // to use static public folder\napp.use(cookieParser()); // to enable CRUD operation on browser cookies\n\nexport { app };\n</code></pre> Setting <code>credentials: true</code> in a CORS (Cross-Origin Resource Sharing) middleware configuration allows the inclusion of credentials like cookies, HTTP authentication, and client-side SSL certificates in cross-origin requests. This means that when a request is made from a different origin domain, the browser will include cookies and other credentials associated with the request, allowing the server to determine if the request should be accepted or rejected based on those credentials.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Make%20Routes/","title":"Make Routes","text":"<p>[!SUMMARY]- Table of Contents - [[Make Routes#Inside App.js|Inside App.js]] - [[Make Routes#Inside user.routes.js|Inside user.routes.js]] - [[Make Routes#Inside User.controller.js|Inside User.controller.js]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Make%20Routes/#inside-appjs","title":"Inside App.js","text":"<pre><code>// routes import\nimport userRouter from \"./routes/user.routes.js\";\n//routes declaration\napp.use(\"/api/v1/users\", userRouter);\n</code></pre> <p>These lines of code import and declare a route for handling user-related API requests, specifying that requests to \"/api/v1/users\" should be directed to the userRouter module.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Make%20Routes/#inside-userroutesjs","title":"Inside user.routes.js","text":"<pre><code>import { Router } from \"express\";\nimport { registerUser } from \"../controllers/user.controller.js\";\n\nconst router = Router();\n\nrouter.route(\"/register\").post(registerUser);\n\nexport default router;\n</code></pre> <p>This code snippet creates a router using Express, defines a route for registering users with a POST request, and assigns the registerUser function from the user controller to handle requests to this route. Finally, it exports the router module.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Make%20Routes/#inside-usercontrollerjs","title":"Inside User.controller.js","text":"<pre><code>import { asyncHandler } from \"../utils/asyncHandler.js\";\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n    res.status(200).json({ message: \"User registered successfully\" });\n});\n\nexport { registerUser };\n</code></pre> <p>This code exports a function named registerUser, wrapped with asyncHandler to handle asynchronous operations. When called, it sends a JSON response indicating successful user registration with a status code of 200.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Make%20Routes/#templates","title":"Templates","text":"<ul> <li>[[Login-Logout-refresh]] - login, logout and refresh token endpoints</li> <li>[[Update User Details]] - update user Details like username etc</li> <li>[[Get Current User Details]] - get details of users</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Express/Serve%20Static%20Files%20in%20Express/","title":"Serve Static Files in Express","text":"<p>To serve static files such as images, CSS files, and JavaScript files, use the\u00a0<code>express.static</code> built-in middleware function in Express.</p> <pre><code>app.use(express.static('public'))\n</code></pre> <p>Now this public folder can be anything.</p> <p>You can even build the react application and then move the build folder (dist in case of the vite) in the backend folder and then serve static folder.</p> <p>Than you won't require the ' / ' route.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Send%20Email%20%28NodeMailer%29/","title":"Installation","text":"<pre><code>npm i nodemailer dotenv\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Send%20Email%20%28NodeMailer%29/#usage","title":"Usage","text":"<ul> <li>NOTE - Does not work on College WiFi</li> <li>To Send the mail from an id first you have to enable two factor authentication from the gmail account you want to send mail from.</li> <li>Go to the security and then click on Two Factor Authentication </li> <li> <p>Generate the App password key which will be used in the nodemailer auth code</p> </li> <li> <p>Create a .env file and have the following things <pre><code>emailID = harshsharma20503@gmail.com\n\nAPP_PASSWORD = ---- ---- ---- ----\n</code></pre></p> </li> <li> <p>now you can use the nodemailer</p> </li> </ul> <pre><code>import nodemailer from 'nodemailer';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst transporter = nodemailer.createTransport({\n    service: 'gmail',\n    host: 'smtp.gmail.com',\n    port: 465,\n    auth: {\n        user: process.env.emailID,\n        pass: process.env.APP_PASSWORD\n    }\n});\n\nconst mailOptions = {\n    from: {\n        name: 'Harsh Sharma',\n        address: process.env.USER\n    },\n    to: ['ha9999377507@gmail.com'],\n    subject: 'Test Email',\n    text: 'This is a test email sent using Nodemailer.',\n    // http: '',\n    // attachments: [\n    //     {\n    //         filename: 'test.txt',\n    //         path: path.join(__dirname, 'test.pdf'),\n    //         contentType: 'application/pdf'\n    //     },\n    //     {\n    //         filename: 'test.txt',\n    //         path: path.join(__dirname, 'test.txt'),\n    //         contentType: 'text/plain'\n    //     }\n    // ]\n};\n\nconst sendMail = async (mailOptions) =&gt; {\n    try {\n        await transporter.sendMail(mailOptions);\n        console.log('Email sent successfully');\n    }\n    catch(error){\n        console.log(\"Error \", error);\n    }\n}\n\nsendMail(mailOptions);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Send%20Telegram%20Messages/","title":"Send Telegram Messages","text":"<ol> <li>Search for telegram bot-father and than start it and send /newbot command</li> <li>Create the new bot by adding name of the bot and the username</li> <li>You will get a link like this <code>http://t.me/XoXoHarsh_Bot</code>and a token </li> </ol> <p>Drop the plan</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/","title":"Setup Postman","text":"<p>[!SUMMARY]- Table of Contents - [[Setup Postman#Launch Postman: |Launch Postman: ]] - [[Setup Postman#Create a Collection:|Create a Collection:]] - [[Setup Postman#Create Requests:|Create Requests:]] - [[Setup Postman#Set Environment Variables:|Set Environment Variables:]] - [[Setup Postman#Use Environment Variables in Requests:|Use Environment Variables in Requests:]] - [[Setup Postman#Send Requests:|Send Requests:]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/#launch-postman","title":"Launch Postman:","text":"<p>Once installed, launch the Postman application.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/#create-a-collection","title":"Create a Collection:","text":"<ul> <li>Click on the \"Collections\" tab on the left sidebar.</li> <li>Click on the \"New Collection\" button.</li> <li>Give your collection a name and optionally provide a description.</li> <li>Click \"Create\" to create the collection.</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/#create-requests","title":"Create Requests:","text":"<ul> <li>Inside your newly created collection, click on the \"Add Request\" button.</li> <li>Give your request a name and specify the HTTP method (e.g., POST, GET, PUT, DELETE).</li> <li>Enter the request URL.</li> <li>Add any necessary headers, request body, query parameters, etc.</li> <li>Click \"Save\" to save the request to your collection.</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/#set-environment-variables","title":"Set Environment Variables:","text":"<ul> <li>Click on the gear icon in the top-right corner to access settings.</li> <li>Select \"Manage Environments\" from the dropdown menu.</li> <li>Click on \"Add\" to create a new environment.</li> <li>Give your environment a name (e.g., Development, Production).</li> <li>Add variables by providing a key-value pair (e.g., baseURL: http://localhost:3000).</li> <li>Click \"Add\" to save the environment.</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/#use-environment-variables-in-requests","title":"Use Environment Variables in Requests:","text":"<ul> <li>While editing a request, use double curly braces to enclose the variable name (e.g., {{baseURL}}/api/v1/users/register).</li> <li>Postman will replace these variables with their corresponding values when sending requests.</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/General/Setup%20Postman/#send-requests","title":"Send Requests:","text":"<ul> <li>Click on the request you want to send from your collection. </li> <li>If necessary, select the appropriate environment from the dropdown menu in the top-right corner.</li> <li>Click on the \"Send\" button to send the request.</li> <li>Postman will display the response received from the server.</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/","title":"Connect Database","text":"<p>[!SUMMARY]+ Table of Contents - [[Connect Database#Set up MongoDB Atlas|Set up MongoDB Atlas]] - [[Connect Database#Configure .env|Configure .env]] - [[Connect Database#Add database name to Constraints|Add database name to Constraints]] - [[Connect Database#Connect to database |Connect to database ]] - [[Connect Database#Call connectDB from index.js|Call connectDB from index.js]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#set-up-mongodb-atlas","title":"Set up MongoDB Atlas","text":"<ul> <li>Create account on MongoDB Atlas</li> <li>Create New project</li> <li>Create a deployment</li> <li>Select free tier with cluster name</li> <li>put your username and password</li> <li>Select Local Environment and add 0.0.0.0/0 IP address so that you give full access. Note - You can change IP address setting from network access, you can add user from database access</li> <li>Now click on connect to the cluster you selected</li> <li>you can now get the \\(Connection \\space String\\) from it.</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#configure-env","title":"Configure .env","text":"<p>Put your connection string in you env file and change \\(&lt;password&gt;\\) in it and remove last ' / '.</p> <pre><code>MONGODB_URI = mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.&lt;project-id&gt;.mongodb.net\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#add-database-name-to-constraints","title":"Add database name to Constraints","text":"<p>Add the name of database to constraints file</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#export-const-db_name-youtubedb","title":"<pre><code>export const DB_NAME = \"YoutubeDB\"\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#connect-to-database","title":"Connect to database","text":"<p>Create index.js in db folder and connect to database.</p> <pre><code>import mongoose from 'mongoose';\nimport { DB_NAME } from '../constants.js';\n\nconst connectDB = async () =&gt; {\n    try {\n        const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);\n        console.log(`\\n MongoDB connected: ${connectionInstance.connection.host} \\n`);\n    } catch (error) {\n        console.log('MongoDB connection error: ', error);\n        process.exit(1);\n    }\n};\n\nexport default connectDB;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#call-connectdb-from-indexjs","title":"Call connectDB from index.js","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Connect%20Database/#import-dotenv-from-dotenv-import-connectdb-from-dbindexjs-import-app-from-appjs-dotenvconfig-path-env-const-port-processenvport-8000-connectdb-then-consolelogdatabase-connected-applistenport-consolelogserver-listening-on-port-port-catcherr-consolelogerr","title":"<pre><code>import dotenv from \"dotenv\";\nimport connectDB from \"./db/index.js\";\nimport { app } from \"./app.js\";\n\ndotenv.config({\n    path: \"./.env\",\n});\n\nconst port = process.env.PORT || 8000;\n\nconnectDB()\n    .then(() =&gt; {\n        console.log(\"Database connected\");\n        app.listen(port, () =&gt; {\n            console.log(`Server listening on port ${port}`);\n        });\n    })\n    .catch((err) =&gt; {\n        console.log(err);\n    });\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/","title":"Modelling Schema","text":"<p>[!SUMMARY]+ Table of Contents - [[Modelling Schema#Installation |Installation ]] - [[Modelling Schema#Creating Models Folder|Creating Models Folder]] - [[Modelling Schema#Creating Schema|Creating Schema]] - [[Modelling Schema#Properties of Schema|Properties of Schema]] - [[Modelling Schema#Create reference in Schema|Create reference in Schema]] - [[Modelling Schema#Create middleware (Hashing the password)|Create middleware (Hashing the password)]] - [[Modelling Schema#Create Schema Methods (Access Token and Refresh Token)|Create Schema Methods (Access Token and Refresh Token)]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#installation","title":"Installation","text":"<p>Install mongoose using following command.</p> <pre><code>npm i mongoose\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#creating-models-folder","title":"Creating Models Folder","text":"<p>Create a Models folder and save file in a fix format - models     - user.model.js     - video.model.js</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#creating-schema","title":"Creating Schema","text":"<p>Create schema by using following snippet <pre><code>import mongoose, { Schema } from \"mongoose\";\nconst userSchema = new Schema({}, { timestamps: true });\nexport const User = mongoose.model(\"User\", userSchema);\n</code></pre></p> <p>Now add different arguments</p> <pre><code>import mongoose, { Schema } from \"mongoose\";\n\nconst userSchema = new Schema(\n    {\n        username: {\n            type: String,\n            required: [true, 'Username is required'],\n            unique: true,\n            lowercase: true,\n            trim: true,\n            index: true,\n        },\n        email: {\n            type: String,\n            required: [true, 'Email is required'],\n            unique: true,\n            lowercase: true,\n            trim: true,\n        },\n        fullname: {\n            type: String,\n            required: [true, 'Fullname is required'],\n            trim: true,\n            index: true,\n        },\n        avatar: {\n            type: String, //cloudinary url\n            default:\n                \"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\",\n        },\n        coverImage: {\n            type: String, //cloudinary url\n            default:\n            \"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\",\n        },\n        watchHistory: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Video\",\n            },\n        ],\n        password: {\n            type: String,\n            required: [true, \"Password is required\"],\n        },\n        refreshToken: {\n            type: String,\n        },\n    },\n    { timestamps: true }\n);\n\nexport const User = mongoose.model(\"User\", userSchema);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#properties-of-schema","title":"Properties of Schema","text":"Property Meaning Example Reference Links type This provides the datatype of the field. type:String More Types required Is the field required required:true lowercase Converts string into lowercase lowercase:true timestamps provide timestamps to the document {timestamps:true} About timestamps default give default values to the fields default: true ref giving reference of other schemas ref: Todo enum fix the number of inputs into a set of inputs enum: ['yes', 'no'] trim remove space in the starting and ending if any trim:true index to increase the searching speed index:true"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#create-reference-in-schema","title":"Create reference in Schema","text":"<p>You can create reference of other schema by using property \\('type'\\) with value   \\('mongoose.Schema.Types.ObjectId'\\) and using property \\('ref'\\) with value of the exported value of the schema you want to refer</p> <pre><code>import mongoose, { Schema } from \"mongoose\";\n\nconst userSchema = new Schema(\n    ...\n        watchHistory: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Video\",\n            },\n        ],\n    ...\n);\n</code></pre> <p>ref: 'User' in this User is the value take from the following line</p> <pre><code>export const User = mongoose.model('User', userSchema); // right side User\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#create-middleware-hashing-the-password","title":"Create middleware (Hashing the password)","text":"<p>Install bcrypt package for hashing the password  <pre><code>npm i bcrypt\n</code></pre> Middleware (also called pre and post hooks) are functions which are passed control during execution of asynchronous functions. Middleware is specified on the schema level and is useful for writing plugins.</p> <pre><code>import mongoose, { Schema } from \"mongoose\";\n\nconst userSchema = new Schema(\n    {\n        username: {\n            type: String,\n            required: [true, 'Username is required'],\n            unique: true,\n            lowercase: true,\n            trim: true,\n            index: true,\n        },\n        email: {\n            type: String,\n            required: [true, 'Email is required'],\n            unique: true,\n            lowercase: true,\n            trim: true,\n        },\n        fullname: {\n            type: String,\n            required: [true, 'Fullname is required'],\n            trim: true,\n            index: true,\n        },\n        avatar: {\n            type: String, //cloudinary url\n            default:\n                \"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\",\n        },\n        coverImage: {\n            type: String, //cloudinary url\n            default:\n            \"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\",\n        },\n        watchHistory: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Video\",\n            },\n        ],\n        password: {\n            type: String,\n            required: [true, \"Password is required\"],\n        },\n        refreshToken: {\n            type: String,\n        },\n    },\n    { timestamps: true }\n);\n\nuserSchema.pre(\"save\", async function (next) {\n    // don't use arrow function here, because we need to use this keyword to access the current user document\n    if (this.isModified(\"password\")) {\n        this.password = await bcrypt.hash(this.password, 8);\n    }\n    next();\n});\n\nexport const User = mongoose.model(\"User\", userSchema);\n</code></pre> <p>This middleware ensures that before saving a user document, it checks if the password has been modified. If so, it hashes the password using bcrypt and then allows the save operation to continue. This is a common pattern for securing passwords in a database by hashing them before they are stored.</p> <p>For more middlewares can visit -&gt; Mongoose Docs</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Modelling%20Schema/#create-schema-methods-access-token-and-refresh-token","title":"Create Schema Methods (Access Token and Refresh Token)","text":"<p>Install jsonwebtoken library <pre><code>npm install jsonwebtoken\n</code></pre></p> <pre><code>import mongoose, { Schema } from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nconst userSchema = new Schema(\n    {\n        username: {\n            type: String,\n            required: true,\n            unique: true,\n            lowercase: true,\n            trim: true,\n            index: true,\n        },\n        email: {\n            type: String,\n            required: true,\n            unique: true,\n            lowercase: true,\n            trim: true,\n        },\n        fullname: {\n            type: String,\n            required: true,\n            trim: true,\n            index: true,\n        },\n        avatar: {\n            type: String, //cloudinary url\n            default:\n                \"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\",\n        },\n        coverImage: {\n            type: String, //cloudinary url\n            default:\n                \"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50\",\n        },\n        watchHistory: [\n            {\n                type: Schema.Types.ObjectId,\n                ref: \"Video\",\n            },\n        ],\n        password: {\n            type: String,\n            required: [true, \"Password is required\"],\n        },\n        refreshToken: {\n            type: String,\n        },\n    },\n    { timestamps: true }\n);\nuserSchema.pre(\"save\", async function (next) {\n    // don't use arrow function here, because we need to use this keyword to access the current user document\n    if (this.isModified(\"password\")) {\n        this.password = await bcrypt.hash(this.password, 8);\n    }\n    next();\n});\nuserSchema.methods.isPasswordCorrect = async function (password) {\n    return await bcrypt.compare(password, this.password);\n};\n\nuserSchema.methods.generateAccessToken = function () {\n    return jwt.sign(\n        {\n            _id: this._id,\n            email: this.email,\n            username: this.username,\n            fullname: this.fullname,\n        },\n        process.env.ACCESS_TOKEN_SECRET,\n        {\n            expiresIn: process.env.ACCESS_TOKEN_EXPIRY,\n        }\n    );\n};\n\nuserSchema.methods.generateRefreshToken = function () {\n    return jwt.sign(\n        {\n            _id: this._id,\n        },\n        process.env.REFRESH_TOKEN_SECRET,\n        {\n            expiresIn: process.env.REFRESH_TOKEN_EXPIRY,\n        }\n    );\n};\n\nexport const User = mongoose.model(\"User\", userSchema);\n</code></pre> <p>These methods provide a way to generate access and refresh tokens for a user, allowing for secure authentication and token-based authorization in a Node.js application. The secret keys and token expiration times are stored in environment variables (<code>process.env</code>) for security and configurability. for more info -&gt; JWT npm package docs</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/","title":"Query","text":"<p>[!SUMMARY]- Table of Contents - [[Query#Finding Doc|Finding Doc]] \u00a0\u00a0\u00a0- [[Query#find()|find()]] \u00a0\u00a0\u00a0- [[Query#findOne()|findOne()]] - [[Query#findById()|findById()]] - [[Query#Update|Update]] \u00a0\u00a0\u00a0- [[Query#UpdateOne()|UpdateOne()]] \u00a0\u00a0\u00a0- [[Query#UpdateMany()|UpdateMany()]] \u00a0\u00a0\u00a0- [[Query#findOneAndUpdate()|findOneAndUpdate()]] - [[Query#Delete|Delete]] \u00a0\u00a0\u00a0- [[Query#deleteOne()|deleteOne()]] \u00a0\u00a0\u00a0- [[Query#deleteMany()|deleteMany()]] - [[Query#General|General]] \u00a0\u00a0\u00a0- [[Query#countDocuments()|countDocuments()]] \u00a0\u00a0\u00a0- [[Query#distinct()|distinct()]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#finding-doc","title":"Finding Doc","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#find","title":"find()","text":"<pre><code>// Find all users with the role 'admin' and select only the username and email fields\nconst users = await User.find({ role: 'admin' }).select('username email');\n\n// Find all active users created after a certain date, sort them by registration date, and limit the result to 10 users\nconst users = await User.find({ isActive: true, createdAt: { $gt: new Date('2023-01-01') }})\n.sort({ createdAt: -1 })\n.limit(10);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#findone","title":"findOne()","text":"<pre><code>// Find a user by their email address and select all fields except password and refreshToken\nconst user = await User.findOne({ email: 'example@example.com' }).select('-password -refreshToken');\n\n// Find a user by their email address and populate their associated posts\nconst userEmail = 'example@example.com';\nconst user = await User.findOne({ email: userEmail }).populate('posts');\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#findbyid","title":"findById()","text":"<pre><code>// Find a user by their unique ID and select all fields except password and refreshToken\nconst userId = 'someUserId';\nconst user = await User.findById(userId).select('-password -refreshToken');\n\n// Find a user by their unique ID and update their last login timestamp\nconst userId = 'someUserId';\nconst updateResult = await User.findByIdAndUpdate(userId, { lastLogin: new Date() }, { new: true });\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#update","title":"Update","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#updateone","title":"UpdateOne()","text":"<pre><code>// Update the email address of a user with a specific ID\nconst userId = 'someUserId';\nconst updateResult = await User.updateOne({ _id: userId }, { email: 'newemail@example.com' });\n\n// Update the email address of a user with a specific ID and create a new document if no match is found\nconst userId = 'someUserId';\nconst updateResult = await User.updateOne({ _id: userId }, { email: 'newemail@example.com' }, { upsert: true });\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#updatemany","title":"UpdateMany()","text":"<pre><code>// Update the status of all orders that are pending to 'completed'\nconst updateResult = await Order.updateMany({ status: 'pending' }, { status: 'completed' });\n\n// Update the status of all orders that are pending to 'completed' and apply default values if creating new documents\nconst updateResult = await Order.updateMany({ status: 'pending' }, { status: 'completed' }, { upsert: true, setDefaultsOnInsert: true });\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#findoneandupdate","title":"findOneAndUpdate()","text":"<pre><code>// Find a user by their email address and update their role to 'admin'\nconst updatedUser = await User.findOneAndUpdate({ email: 'example@example.com' }, { role: 'admin' }, { new: true });\n\n// Find a user by their email address, update their role to 'admin', and return the updated document\nconst updatedUser = await User.findOneAndUpdate({ email: 'example@example.com' }, { role: 'admin' }, { new: true });\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#delete","title":"Delete","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#deleteone","title":"deleteOne()","text":"<pre><code>// Delete a product with a specific ID\nconst productId = 'someProductId';\nconst deleteResult = await Product.deleteOne({ _id: productId });\n\n// Delete a product with a specific ID and set a timeout to avoid waiting for the response indefinitely\nconst productId = 'someProductId';\nconst deleteResult = await Product.deleteOne({ _id: productId }).timeout(5000); // Timeout set to 5 seconds\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#deletemany","title":"deleteMany()","text":"<pre><code>// Delete all users with the role 'guest'\nconst deleteResult = await User.deleteMany({ role: 'guest' });\n\n// Delete all users with the role 'guest' and specify a write concern\nconst deleteResult = await User.deleteMany({ role: 'guest' }).writeConcern({ w: 'majority' });\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#general","title":"General","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#countdocuments","title":"countDocuments()","text":"<pre><code>// Count the number of users with the role 'admin'\nconst count = await User.countDocuments({ role: 'admin' });\n\n// Count the number of users with the role 'admin' and specify a maximum execution time\nconst count = await User.countDocuments({ role: 'admin' }).maxTimeMS(5000); // Maximum execution time set to 5 seconds\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/MongoDB%20Database/Query/#distinct","title":"distinct()","text":"<pre><code>// Get a list of unique categories for all products\nconst uniqueCategories = await Product.distinct('category');\n\n// Get a list of unique categories for all products and specify a read preference\nconst uniqueCategories = await Product.distinct('category').read('secondary');\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Get%20Current%20User%20Details/","title":"Get Current User Details","text":"<pre><code>const getCurrentUser = asyncHandler(async (req, res) =&gt; {\n    return res\n        .status(200)\n        .json(\n            new ApiResponse(200, req.user, \"User details fetched successfully\")\n        );\n});\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/","title":"Login Logout refresh","text":"<p>[!SUMMARY]- Table of Contents - [[Login-Logout-refresh#Middleware|Middleware]] - [[Login-Logout-refresh#Add Routes|Add Routes]] - [[Login-Logout-refresh#Add Controllers|Add Controllers]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/#middleware","title":"Middleware","text":"<p>Add middle ware which retrieves the token from either a cookie or the Authorization header, decodes it using the secret key stored in the environment variables, and then queries the user model to find the corresponding user. If the user is found, it attaches the user object to the request object (<code>req.user</code>) and proceeds to the next middleware. If any error occurs during this process, it throws an <code>ApiError</code> with a status code of 401 (Unauthorized) and an appropriate error message.</p> <pre><code>import { User } from \"../models/user.model.js\";\nimport { ApiError } from \"../utils/ApiError.js\";\nimport { asyncHandler } from \"../utils/asyncHandler.js\";\nimport jwt from \"jsonwebtoken\";\n\nexport const verifyJWT = asyncHandler(async (req, res, next) =&gt; {\n    try {\n        const token =\n            req.cookies?.accessToken ||\n            req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\n        if (!token) {\n            throw new ApiError(401, \"Unauthorized request\");\n        }\n\n        const decodedToken = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\n        const user = await User.findById(decodedToken?._id).select(\n            \"-password -refreshToken\"\n        );\n        if (!user) {\n            throw new ApiError(401, \"Invalid Access Token\");\n        }\n\n        req.user = user;\n        next();\n    } catch (error) {\n        throw new ApiError(401, error?.message || \"Invalid Access Token\");\n    }\n    });\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/#add-routes","title":"Add Routes","text":"<p>Set up routes for user authentication and registration using an Express Router. It defines endpoints for registering, logging in, logging out, and refreshing tokens. The /register route expects a POST request for user registration with optional file uploads for avatar and cover image. The /login, /logout, and /refresh-token routes handle user login, logout, and token refreshing respectively. The /logout and /refresh-token routes are secured with the verifyJWT middleware to ensure authentication before accessing them.</p> <pre><code>import { Router } from \"express\";\nimport {\n    loginUser,\n    logoutUser,\n    refreshAccessToken,\n    registerUser,\n} from \"../controllers/user.controller.js\";\nimport { upload } from \"../middlewares/multer.middleware.js\";\nimport { verifyJWT } from \"../middlewares/auth.middleware.js\";\n\nconst router = Router();\n\nrouter.route(\"/register\").post(\n    upload.fields([\n        { name: \"avatar\", maxCount: 1 },\n        { name: \"coverImage\", maxCount: 1 },\n    ]),\n    registerUser\n);\n\nrouter.route(\"/login\").post(loginUser);\n\n// secured routes\nrouter.route(\"/logout\").post(verifyJWT, logoutUser);\nrouter.route(\"/refresh-token\").post(refreshAccessToken);\n\nexport default router;\n</code></pre> <p>Import and mount the user router for handling user-related endpoints under \"/api/v1/users\". Overall, it establishes a foundation for handling user authentication and registration operations within an API.</p> <pre><code>import express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\n\nconst app = express();\n\n// middlewares\napp.use(\n    cors({\n        origin: process.env.CORS_ORIGIN,\n        credentials: true,\n    })\n);\n\napp.use(express.json({ limit: \"16kb\" }));\napp.use(express.urlencoded({ extended: true, limit: \"16kb\" }));\napp.use(express.static(\"public\"));\napp.use(cookieParser());\n\n// routes import\nimport userRouter from \"./routes/user.routes.js\";\n\n//routes declaration\napp.use(\"/api/v1/users\", userRouter);\n\nexport { app };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/#add-controllers","title":"Add Controllers","text":"<pre><code>import { asyncHandler } from \"../utils/asyncHandler.js\";\nimport { ApiError } from \"../utils/ApiError.js\";\nimport { User } from \"../models/user.model.js\";\nimport { uploadOnCloudinary } from \"../utils/cloudinary.js\";\nimport { ApiResponse } from \"../utils/ApiResponse.js\";\nimport jwt from \"jsonwebtoken\";\nimport fs from \"fs\";\n\nconst generateAccessAndRefreshTokens = async (userId) =&gt; {\n    try {\n        const user = await User.findById(userId);\n        const accessToken = user.generateAccessToken();\n        const refreshToken = user.generateRefreshToken();\n\n        user.refreshToken = refreshToken;\n        await user.save({ validateBeforeSave: false });\n\n        return { accessToken, refreshToken };\n    } catch (error) {\n        throw new ApiError(\n            500,\n            \"Something went wrong while generating refresh and access token\"\n        );\n    }\n};\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n    // get user details from frontend\n    // validation of user details - not empty\n    // check if user exists : emails, username\n    // check for images, check for avatar\n    // upload them to cloudinary, avatar\n    // create user object - create entry in db\n    // remove password and refresh token field from response\n    // check for user creation\n    // return response\n\n    const { fullname, email, username, password } = req.body;\n\n    console.log(\n        \"Inside registerUser Controller:\\n Details recieved\",\n        fullname,\n        email,\n        username,\n        password\n    );\n    if (\n        [fullname, email, username, password].some(\n            (field) =&gt; field?.trim() === \"\"\n        )\n    ) {\n        throw new ApiError(400, \"ALL fields are required\");\n    }\n\n    const existedUser = await User.findOne({ $or: [{ username }, { email }] });\n\n    if (existedUser) {\n        throw new ApiError(409, \"User with email or username already exists\");\n    }\n\n    const avatarLocalPath = req.files?.avatar[0]?.path;\n    let coverImageLocalPath;\n    if (\n        req.files &amp;&amp;\n        Array.isArray(req.files.coverImage) &amp;&amp;\n        req.files.coverImage.length &gt; 0\n    ) {\n        coverImageLocalPath = req.files.coverImage[0].path;\n    }\n\n    if (!avatarLocalPath) {\n        throw new ApiError(400, \"Avatar file is required\");\n    }\n\n    const avatar = await uploadOnCloudinary(avatarLocalPath);\n    let coverImage;\n    if (coverImageLocalPath) {\n        coverImage = await uploadOnCloudinary(coverImageLocalPath);\n        console.log(\"uploading cover Image\");\n    }\n\n    if (!avatar) {\n        throw new ApiError(400, \"Avatar file is required\");\n    }\n\n    const user = await User.create({\n        fullname,\n        avatar: avatar.url,\n        coverImage: coverImage?.url || \"\",\n        email,\n        password,\n        username: username.toLowerCase(),\n    });\n\n    const createdUser = await User.findById(user._id).select(\n        \"-password -refreshToken\"\n    );\n\n    if (!createdUser) {\n        throw new ApiError(500, \"Something went wrong while registering User\");\n    }\n    console.log(createdUser);\n    fs.unlinkSync(avatarLocalPath);\n    if (coverImageLocalPath) fs.unlinkSync(coverImageLocalPath);\n    console.log(\"after unlinkSync\");\n    return res\n        .status(201)\n        .json(new ApiResponse(200, createdUser, \"User registered Succesfully\"));\n});\n\nconst loginUser = asyncHandler(async (req, res) =&gt; {\n    // req body -&gt; data\n    // username email validation\n    // find the user\n    // password check\n    // access and refresh token\n    // send cookie\n\n    const { email, username, password } = req.body;\n    if (!username &amp;&amp; !email) {\n        throw new ApiError(400, \"username or email is required\");\n    }\n\n    const user = await User.findOne({ $or: [{ username }, { email }] });\n\n    if (!user) {\n        throw new ApiError(404, \"User does not exist\");\n    }\n\n    const isPasswordValid = await user.isPasswordCorrect(password);\n\n    if (!isPasswordValid) {\n        throw new ApiError(401, \"Invalid user credentials\");\n    }\n\n    const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(\n        user._id\n    );\n\n    const loggedInUser = await User.findById(user._id).select(\n        \"-password -refreshToken\"\n    );\n\n    const options = {\n        httpOnly: true,\n        secure: true,\n    };\n\n    return res\n        .status(200)\n        .cookie(\"accessToken\", accessToken, options)\n        .cookie(\"refreshToken\", refreshToken, options)\n        .json(\n            new ApiResponse(\n                200,\n                {\n                    user: loggedInUser,\n                    accessToken,\n                    refreshToken,\n                },\n                \"User logged in Successfully\"\n            )\n        );\n});\n\nconst logoutUser = asyncHandler(async (req, res) =&gt; {\n    await User.findByIdAndUpdate(\n        req.user._id,\n        {\n            $set: {\n                refreshToken: undefined,\n            },\n        },\n        {\n            new: true,\n        }\n    );\n\n    const options = {\n        httpOnly: true,\n        secure: true,\n    };\n\n    return res\n        .status(200)\n        .clearCookie(\"accessToken\", options)\n        .clearCookie(\"refreshToken\", options)\n        .json(new ApiResponse(200, {}, \"User logged Out Successfully\"));\n});\n\nconst refreshAccessToken = asyncHandler(async (req, res) =&gt; {\n    const incomingRefreshToken =\n        req.cookies.refreshToken || req.body.refreshToken;\n\n    if (!incomingRefreshToken) {\n        throw new ApiError(401, \"Unauthorized request\");\n    }\n    try {\n        const decodedToken = jwt.verify(\n            incomingRefreshToken,\n            process.env.REFRESH_TOKEN_SECRET\n        );\n        console.log(decodedToken);\n        const user = await User.findById(decodedToken?._id);\n\n        if (!user) {\n            throw new ApiError(401, \"Invalid Refresh Token\");\n        }\n\n        if (user?.refreshToken !== incomingRefreshToken) {\n            throw new ApiError(401, \"Refresh token is expired or used\");\n        }\n\n        const { accessToken, refreshToken } =\n            await generateAccessAndRefreshTokens(user._id);\n        console.log(accessToken, refreshToken);\n        const option = {\n            httpOnly: true,\n            secure: true,\n        };\n        return res\n            .status(200)\n            .cookie(\"accessToken\", accessToken, option)\n            .cookie(\"refreshToken\", refreshToken, option)\n            .json(\n                new ApiResponse(\n                    200,\n                    { accessToken, refreshToken },\n                    \"Access Token Refreshed Successfully\"\n                )\n            );\n    } catch (error) {\n        throw new ApiError(401, error?.message || \"Invalid Refresh Token\");\n    }\n});\n\nexport { registerUser, loginUser, logoutUser, refreshAccessToken };\n</code></pre> <ol> <li> <p><code>registerUser</code>: Handles user registration, validates input fields, checks for existing users, uploads avatar and cover images to Cloudinary, creates a new user in the database, generates access and refresh tokens, and returns a success response with the logged-in user details.</p> </li> <li> <p><code>loginUser</code>: Manages user login, validates username/email and password, generates access and refresh tokens upon successful login, sets cookies for tokens, and returns a success response with user details and tokens.</p> </li> <li> <p><code>logoutUser</code>: Handles user logout by removing the refresh token from the database and clearing cookies, then returns a success response.</p> </li> </ol>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/#4-refreshaccesstoken-refreshes-the-access-token-using-the-refresh-token-provided-in-cookies-or-the-request-body-verifies-the-refresh-token-generates-new-access-and-refresh-tokens-sets-cookies-and-returns-a-success-response-with-new-tokens","title":"4. <code>refreshAccessToken</code>: Refreshes the access token using the refresh token provided in cookies or the request body, verifies the refresh token, generates new access and refresh tokens, sets cookies, and returns a success response with new tokens.","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/#tags","title":"Tags","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Login-Logout-refresh/#jwt-jsonwebtoken-jsonwebtokens","title":"jwt #jsonwebtoken #jsonwebtokens","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Update%20User%20Details/","title":"Update Account Details","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Update%20User%20Details/#const-updateaccountdetails-asynchandlerasync-req-res-const-fullname-email-reqbody-if-fullname-email-throw-new-apierror400-fullname-or-email-is-required-const-user-await-userfindbyidandupdate-requser_id-set-fullname-email-email-new-true-select-password-refreshtoken-return-res-status200-jsonnew-apiresponse200-user-account-details-updated","title":"<pre><code>const updateAccountDetails = asyncHandler(async (req, res) =&gt; {\n    const { fullname, email } = req.body;\n    if (!fullname &amp;&amp; !email) {\n        throw new ApiError(400, \"fullname or email is required\");\n    }\n    const user = await User.findByIdAndUpdate(\n        req.user._id,\n        {\n            $set: {\n                fullname,\n                email: email,\n            },\n        },\n        { new: true }\n    ).select(\"-password -refreshToken\");\n\n    return res\n        .status(200)\n        .json(new ApiResponse(200, user, \"Account Details updated\"));\n});\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Update%20User%20Details/#update-user-avatar","title":"Update User Avatar","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Templates/Update%20User%20Details/#const-updateuseravatar-asynchandlerasync-req-res-const-avatarlocalpath-reqfilepath-if-avatarlocalpath-throw-new-apierror400-avatar-file-is-missing-const-avatar-await-uploadoncloudinaryavatarlocalpath-if-avatarurl-throw-new-apierror500-something-went-wrong-while-uploading-avatar-const-user-await-userfindbyidandupdate-requser_id-set-avatar-avatarurl-new-true-select-password-refreshtoken-return-resstatus200jsonnew-apiresponse200-user-avatar-updated","title":"<pre><code>const updateUserAvatar = asyncHandler(async (req, res) =&gt; {\n    const avatarLocalPath = req.file?.path;\n    if (!avatarLocalPath) {\n        throw new ApiError(400, \"Avatar file is missing\");\n    }\n    const avatar = await uploadOnCloudinary(avatarLocalPath);\n    if (!avatar.url) {\n        throw new ApiError(500, \"Something went wrong while uploading avatar\");\n    }\n\n    const user = await User.findByIdAndUpdate(\n        req.user?._id,\n        {\n            $set: {\n                avatar: avatar.url,\n            },\n        },\n        { new: true }\n    ).select(\"-password -refreshToken\");\n\n    return res.status(200).json(new ApiResponse(200, user, \"Avatar updated\"));\n});\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Typescript%20Setup/Typescript%20Backend%20Setup/","title":"Steps","text":"<ol> <li>Initialise project <pre><code>npm init -y\n</code></pre></li> <li>install dependencies <pre><code>npm i -D typescript @types/express @types/node \n</code></pre></li> <li>Initialise typescript config file <pre><code>npx tsc --init\n</code></pre></li> <li>Keep folder structure same as normal backend folder</li> <li>public<ul> <li>temp</li> </ul> </li> <li>src<ul> <li>config</li> <li>controllers</li> <li>middlewares</li> <li>models</li> <li>routes</li> <li>types</li> <li>utils</li> <li>index.ts (file)</li> <li>server.ts (file)</li> </ul> </li> <li></li> </ol>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/ApiError/","title":"ApiError","text":"<p>create a custom error class, <code>ApiError</code>, specifically tailored for handling errors that may occur in the context of API operations. This custom error class extends the built-in JavaScript <code>Error</code> class and includes additional properties and logic to capture relevant information about API-related errors.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/ApiError/#create-file-in-utils-folder","title":"Create file in Utils folder","text":"<ul> <li>Create a file name ApiError.js</li> </ul> <pre><code>class ApiError extends Error {\n    constructor(\n        statusCode,\n        message = \"Something went wrong\",\n        errors = [],\n        stack = \"\"\n    ) {\n        super(message);\n        this.statusCode = statusCode;\n        this.data = null;\n        this.message = message;\n        this.success = false;\n        this.errors = errors;\n\n        if (stack) {\n            this.stack = stack;\n        } else {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n\nexport { ApiError };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/ApiError/#how-to-use-the-apierror-case","title":"How to use the ApiError case","text":"<pre><code>import { ApiError } from \"../utils/ApiError.js\";\n...\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n    ...\n    const { fullname, email, username, password } = req.body;\n    console.log(\n        \"Inside registerUser Controller:\\n Details recieved\",\n        fullname,\n        email,\n        username,\n        password\n    );\n    if (\n        [fullname, email, username, password].some(\n            (field) =&gt; field?.trim() === \"\"\n        )\n    ) {\n        throw new ApiError(400, \"ALL fields are required\");\n    }\n    ...\n});\n\nexport { registerUser };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/ApiResponse/","title":"ApiResponse","text":"<p>Encapsulate information about the outcome of an API operation and provide a standardised format for returning responses.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/ApiResponse/#create-file-in-utils-folder","title":"Create file in Utils folder","text":"<ul> <li>Create a file name ApiResponse.js</li> </ul> <pre><code>class ApiResponse {\n    constructor(statusCode, data, message = \"Success\") {\n        this.statusCode = statusCode;\n        this.data = data;\n        this.message = message;\n        this.success = statusCode &lt; 400;\n    }\n}\n\nexport { ApiResponse };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/ApiResponse/#how-to-use-the-apiresponse-class","title":"How to use the ApiResponse class","text":"<pre><code>import { ApiResponse } from \"../utils/ApiResponse.js\";\n...\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n    ...\n    return res\n        .status(201)\n        .json(new ApiResponse(200, createdUser, \"User registered Succesfully\"));\n});\n\nexport { registerUser };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/AsyncHandler/","title":"AsyncHandler","text":"<p>A utility function which takes function as a parameter and runs it as a async await and also handles the error. Mostly used for middlewares.</p> <p>Two ways it can be done: 1) Using try and catch 2) Using promise resolve and catch</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/AsyncHandler/#try-and-catch","title":"Try and Catch","text":"<pre><code>const asyncHandler = (fn) =&gt; async (req, res, next) =&gt; {\n    try {\n        await fn(req, res, next);\n    } catch (error) {\n        res.status(error.statusCode || 500).json({\n            success: false,\n            message: error.message || \"Internal Server Error\",\n        });\n    }\n};\n\nexport { asyncHandler };\n</code></pre> <pre><code>const asyncHandler = (fn) =&gt; async (req, res, next) =&gt; {\n  try {\n    return await fn(req, res, next);\n  } catch (error) {\n    console.log(\"******** Inside AsyncHandler ********\");\n    console.log(\"Error: \", error);\n    res.status(error.statusCode || 500).json({\n      success: false,\n      message: error.message || \"Internal Server Error\",\n    });\n  }\n};\n\nexport { asyncHandler };\n</code></pre> <p>The version you should use depends on your specific use case. If you need to use the result of fn after asyncHandler is called, you should use the second version. If you don't need the result of fn, you can use the first version.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/AsyncHandler/#promise-resolve-and-catch","title":"Promise, Resolve and Catch","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/AsyncHandler/#const-asynchandler-requesthandler-return-req-res-next-promiseresolverequesthandlerreq-res-nextcatcherr-nexterr-export-asynchandler","title":"<pre><code>const asyncHandler = (requestHandler) =&gt; {\n    return (req, res, next) =&gt; {\n        Promise.resolve(requestHandler(req, res, next)).catch((err) =&gt;\n            next(err)\n        );\n    };\n};\n\nexport { asyncHandler };\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/AsyncHandler/#how-to-use-the-function","title":"How to use the function","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/AsyncHandler/#import-asynchandler-from-utilsasynchandlerjs-const-registeruser-asynchandlerasync-req-res-resstatus200json-message-user-registered-successfully-export-registeruser","title":"<pre><code>import { asyncHandler } from \"../utils/asyncHandler.js\";\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n    res.status(200).json({ message: \"User registered successfully\" });\n});\n\nexport { registerUser };\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Generate%20JWT%20Token/","title":"Generate JWT Token","text":"<p>Inside util function after installing jsonwebtoken package <pre><code>import jwt from \"jsonwebtoken\";\n\nconst generateJWTToken = (_id) =&gt; {\n  return jwt.sign({ _id }, process.env.JWT_SECRET, {\n    expiresIn: \"30d\",\n  });\n};\n\nexport { generateJWTToken };\n</code></pre></p> <p>To use to simply import the function and then use it by providing the id</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/","title":"Handle File upload","text":"<p>[!SUMMARY]- Table of Contents - [[Handle File upload#Installation|Installation]] - [[Handle File upload#Concept|Concept]] - [[Handle File upload#Multer Setup|Multer Setup]] \u00a0\u00a0\u00a0- [[Handle File upload#Create multer.middleware.js file in middlewares|Create multer.middleware.js file in middlewares]] \u00a0\u00a0\u00a0- [[Handle File upload#User Multer upload|User Multer upload]] - [[Handle File upload#Cloudinary Setup|Cloudinary Setup]] \u00a0\u00a0\u00a0- [[Handle File upload#Create Cloudinary.js file in util|Create Cloudinary.js file in util]] \u00a0\u00a0\u00a0- [[Handle File upload#Insert the keys in .env file|Insert the keys in .env file]] \u00a0\u00a0\u00a0- [[Handle File upload#Use uploadOnCloudinary Function|Use uploadOnCloudinary Function]]</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#installation","title":"Installation","text":"<p>Install cloudinary and multer</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#npm-i-cloudinary-multer","title":"<pre><code>npm i cloudinary multer\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#concept","title":"Concept","text":"<p>We will be first uploading the file to a temp folder inside the public folder to save the file on server temporarily and then from there we will upload the file to cloudinary. So you need to create multer middleware which stores the file in the temp folder and a cloudinary function which takes the file from the temp folder and upload it on cloudinary.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#multer-setup","title":"Multer Setup","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#create-multermiddlewarejs-file-in-middlewares","title":"Create multer.middleware.js file in middlewares","text":"<p>Write the following code</p> <pre><code>import multer from \"multer\";\n\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        cb(null, \"./public/temp\");\n    },\n    filename: function (req, file, cb) {\n        cb(null, `${Date.now()}-${file.originalname}`);\n    },\n});\n\nexport const upload = multer({ storage });\n</code></pre> <p>This module sets up a multer middleware configuration for handling file uploads. When integrated into a route or endpoint in a Node.js application, it allows users to upload files, which will be stored in the \"./public/temp\" directory with unique filenames based on the current timestamp and the original filename. This is a common setup for handling file uploads in web applications.</p> <p>for more knowledge -&gt; Multer docs</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#user-multer-upload","title":"User Multer upload","text":"<pre><code>import { Router } from \"express\";\nimport { registerUser } from \"../controllers/user.controller.js\";\nimport { upload } from \"../middlewares/multer.middleware.js\";\n\nconst router = Router();\n\nrouter.route(\"/register\").post(\n    upload.fields([\n        { name: \"avatar\", maxCount: 1 },\n        { name: \"coverImage\", maxCount: 1 },\n    ]),\n    registerUser\n);\n\nexport default router;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#cloudinary-setup","title":"Cloudinary Setup","text":""},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#create-cloudinaryjs-file-in-util","title":"Create Cloudinary.js file in util","text":"<p>write the following code</p> <pre><code>import { v2 as cloudinary } from \"cloudinary\";\nimport fs from \"fs\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\ncloudinary.config({\n    cloud_name: `${process.env.CLOUDINARY_CLOUD_NAME}`,\n    api_key: `${process.env.CLOUDINARY_API_KEY}`,\n    api_secret: `${process.env.CLOUDINARY_API_SECRET}`,\n});\n\nconst uploadOnCloudinary = async (localFilePath) =&gt; {\n    try {\n        if (!localFilePath) {\n            throw new Error(\"File path is required\");\n        }\n        const response = await cloudinary.uploader.upload(localFilePath, {\n            resource_type: \"auto\",\n        });\n        console.log(\"File uploaded successfully on Cloudinary\", response.url);\n        fs.unlinkSync(localFilePath); // remove the locally saved temporary file as the upload operation got successfull\n        return response.url;\n    } catch (error) {\n        console.log(\"Error inside Cloudinary upload function: \", error);\n        fs.unlinkSync(localFilePath); // remove the locally saved temporary file as the upload operation got failed\n        return null;\n    }\n};\n\nexport { uploadOnCloudinary };\n</code></pre> <p>This module provides a convenient function for uploading files to Cloudinary, handling errors gracefully, and logging the success message upon a successful upload. It's commonly used in web applications to manage and serve media files in the cloud.</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#insert-the-keys-in-env-file","title":"Insert the keys in .env file","text":"<pre><code>CLOUDINARY_CLOUD_NAME = dmsxgvl93\nCLOUDINARY_API_KEY = 918976395131442\nCLOUDINARY_API_SECRET = Ll3UDAfgNtv_xLfoZ106aV1bTc8\n</code></pre> <p>insert your own new keys from cloudinary</p> <p>for more knowledge -&gt; Cloudinary docs</p>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#use-uploadoncloudinary-function","title":"Use uploadOnCloudinary Function","text":"<pre><code>import { uploadOnCloudinary } from \"../utils/cloudinary.js\";\n\nconst registerUser = asyncHandler(async (req, res) =&gt; {\n    ...\n    const avatarLocalPath = req.files?.avatar[0]?.path;\n    const coverImageLocalPath = req.files?.coverImage[0]?.path;\n    if (!avatarLocalPath) {\n        throw new ApiError(400, \"Avatar file is required\");\n    }\n\n    const avatar = await uploadOnCloudinary(avatarLocalPath);\n    const coverImage = await uploadOnCloudinary(coverImageLocalPath);\n\n    if (!avatar) {\n        throw new ApiError(400, \"Avatar file is required\");\n    }\n    ...\n});\n\nexport { registerUser };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/Utility%20Function/Handle%20File%20upload/#call-from-frontend","title":"Call from frontend","text":"<pre><code>&lt;Input type=\"file\" p={1.5} accept=\"image/*\" onChange={(e) =&gt; postDetails(e.target.files[0])} /&gt;\n\n\nconst postDetails = async (pics) =&gt; {\n      ...\n      const data = new FormData();\n      data.append(\"avatar\", pics);\n      console.log(\"Data: \", data);\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/auth/uploadPic\", data);\n        setPic(response.data.data.url);\n        console.log(\"Pic url:\", response.data.data.url);\n      ...\n    }\n  };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Backend-Development/docs/Getting%20Started/","title":"Getting Started","text":"<p>Install npm packages <pre><code>npm install swagger-jsdoc swagger-ui-express\n</code></pre></p> <p>Now define the swagger configuration in app.js <pre><code>import swagger\n</code></pre></p>"},{"location":"legacy-docs/My%20Documentation/Docker/Docker%20build/","title":"Docker build","text":"<pre><code>docker build\n --build-arg PORT=8080\n --build-arg CORS_ORIGIN=*\n --build-arg MONGODB_URI=mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.&lt;project-id&gt;.mongodb.net\n --build-arg CLOUDINARY_CLOUD_NAME=&lt;project-id&gt;\n --build-arg CLOUDINARY_API_KEY=&lt;api-key&gt;\n --build-arg CLOUDINARY_API_SECRET=&lt;api-secret&gt;\n --build-arg GOOGLE_CLIENT_ID=&lt;client-id&gt;\n --build-arg GOOGLE_CLIENT_SECRET=&lt;client-secret&gt;\n --build-arg GOOGLE_CALLBACK_URL=http://localhost:8000/auth/google/callback\n --build-arg JWT_SECRET=\"harshsharma20503123123123123123131321231\"\n --build-arg VITE_LOCALHOST=http://localhost:8000\n -t testimage . ; docker run -p 8080:8080 -p 5173:5173 testimage\n</code></pre> <p>where this is the build without env file <pre><code>docker build -t testimage .\ndocker run -p 8080:8080 -p 5173:5173 testimage\n</code></pre></p> <pre><code>sudo docker-compose up\nsudo docker-compose down --rmi all\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Getting%20Started/","title":"Getting Started","text":"<p>[!SUMMARY]+ Table of Contents - [[Getting Started#Installing React using vite bundler|Installing React using vite bundler]] - [[Getting Started#Removing Unnecessary files|Removing Unnecessary files]] - [[Getting Started#Setting up folders and files|Setting up folders and files]] - [[Getting Started#Further you can do |Further you can do ]]</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Getting%20Started/#installing-react-using-vite-bundler","title":"Installing React using vite bundler","text":"<p>Create a folder in which you want to create your project. Write following command in it.</p> <pre><code>npm create vite@latest\n</code></pre> <p>Answer all the question related to it.</p> <pre><code> Project name: \u2026 CodeSphere-Frontend\n\u2714 Package name: \u2026 codesphere-frontend\n\u2714 Select a framework: \u203a React\n\u2714 Select a variant: \u203a JavaScript\n\nScaffolding project in /home/berserk/files/Shiv-Nadar-Hackathon/CodeSphere-Frontend...\n\nDone. Now run:\n\n  cd CodeSphere-Frontend\n  npm install\n  npm run dev\n</code></pre> <p>Run \\(npm \\space install\\) to install node modules.</p> <pre><code>npm install\n</code></pre> <p>Now to run the file write following command in terminal</p> <pre><code>npm run dev\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Getting%20Started/#removing-unnecessary-files","title":"Removing Unnecessary files","text":"<p>Remove the following files - public/vite.svg - assets folder</p> <p>Remove the icon from index.html and the extra meta tags.</p> <p>Clear the app.css, index.css and app.jsx file. Write rafce (used to create react arrow functional component) and start making changes.</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Getting%20Started/#setting-up-folders-and-files","title":"Setting up folders and files","text":"<ul> <li>Create a \\(components\\) folder inside the src to store the components.</li> <li>Create a \\(pages\\) folder inside the src to store the pages files.</li> </ul> <p>Create .prettierrc and add the configurations</p> <pre><code>{\n    \"singleQuote\": false,\n    \"bracketSpacing\": true,\n    \"tabWidth\": 4,\n    \"trailingComma\": \"es5\",\n    \"semi\": true\n}\n</code></pre> <p>Create .prettierignore and add the configurations. You can also use prettierignore generator to generate it.</p> <pre><code>*.env\n.env\n.env.*\n/.vscode\n/node_modules\n./dist\n</code></pre> <p>Create a git repo and connect it with your GitHub and then start working with project.</p> <pre><code>git init\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/HarshSharma20503/CodeSphere.git\ngit push -u origin main\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Getting%20Started/#further-you-can-do","title":"Further you can do","text":"<ul> <li>[[My Documentation/Frontend-Development/React-Bootstrap/Getting Started|Connect React-Bootstrap]]</li> <li>[[Add environment variable in React-Vite]]</li> <li>Use Axios</li> <li>[[Create Routes]]</li> <li></li> </ul>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Chakra%20UI/Getting%20Started/","title":"Installation","text":"<p>Install package</p> <pre><code>npm i @chakra-ui/react @emotion/react @emotion/styled framer-motion\n</code></pre> <p>After installing Chakra UI, you need to set up the\u00a0<code>ChakraProvider</code>\u00a0at the root of your application. This can be either in your\u00a0<code>index.jsx</code>,\u00a0<code>index.tsx</code>\u00a0or\u00a0<code>App.jsx</code>\u00a0depending on the framework you use.</p> <pre><code>import * as React from 'react'\n\n// 1. import `ChakraProvider` component\nimport { ChakraProvider } from '@chakra-ui/react'\n\nfunction App() {\n  // 2. Wrap ChakraProvider at the root of your app\n  return (\n    &lt;ChakraProvider&gt;\n      &lt;TheRestOfYourApplication /&gt;\n    &lt;/ChakraProvider&gt;\n  )\n}\n</code></pre> <p>Now you can start using Chakra UI Components</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Add%20environment%20variable%20in%20React-Vite/","title":"React","text":"<p>Write every environment variable with prefix REACT_APP_.... e.g.</p> <pre><code>REACT_APP_URL = http://localhost:8080/\n</code></pre> <p>In the jsx file use the variable using </p> <pre><code>process.env.REACT_APP_URL\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Add%20environment%20variable%20in%20React-Vite/#vite","title":"Vite","text":"<p>Write every environment variable using prefix VITE_...</p> <pre><code>VITE_URL = http://localhost:8080/\n</code></pre> <p>In the jsx file use the variable using</p> <pre><code>import.meta.env.VITE_URL\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Add%20environment%20variable%20in%20React-Vite/#reference","title":"Reference","text":"<ul> <li>youtube</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Add%20environment%20variable%20in%20React-Vite/#tags","title":"Tags","text":""},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Add%20environment%20variable%20in%20React-Vite/#react-vite-environment-variables","title":"react #vite #environment-variables","text":""},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Create%20Routes/","title":"Installation","text":"<pre><code>npm install react-router-dom\n</code></pre> <p>Inside main.jsx or app.jsx wrap the browserRouter <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  &lt;React.StrictMode&gt;\n    &lt;Router&gt;\n      &lt;ChakraProvider&gt;\n        &lt;App /&gt;\n      &lt;/ChakraProvider&gt;\n    &lt;/Router&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre></p> <p>Now Inside app.jsx declare url paths <pre><code>import { Routes, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Chat from \"./pages/Chat\";\n\nconst App = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/chat\" element={&lt;Chat /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default App;\n</code></pre></p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Save%20User%20data%20in%20local%20storage%20and%20context%20api/","title":"Save User data in local storage and context api","text":"<p>Your data will not disappear if you reload while you are using context api.</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/General/Save%20User%20data%20in%20local%20storage%20and%20context%20api/#steps","title":"Steps","text":"<ol> <li>Fetch the data when login and save the data in local storage by the below method <pre><code>try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\"http://localhost:5000/api/auth/login\", { email, password }, config);\n      toast.success(\"Login Successful\");\n      // setUser(data.data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data.data));\n      setLoading(false);\n      navigate(\"/chats\");\n    } catch (error) {\n      toast.error(\"Error Occured!\");\n      setLoading(false);\n    }\n</code></pre></li> <li>Now inside the context provider paste the following code <pre><code>import React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst UserContext = createContext();\n\nconst UserContextProvider = ({ children }) =&gt; {\n  const [user, setUser] = useState(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() =&gt; {\n    const handleUrlChange = () =&gt; {\n      // Your logic to run when there is a change in the URL\n      console.log(\"URL has changed:\", window.location.href);\n    };\n    window.addEventListener(\"popstate\", handleUrlChange);\n    const userInfoString = localStorage.getItem(\"userInfo\");\n    if (userInfoString) {\n      try {\n        const userInfo = JSON.parse(userInfoString);\n        setUser(userInfo);\n      } catch (error) {\n        console.error(\"Error parsing userInfo:\", error);\n      }\n    } else {\n      const url = window.location.href.split(\"/\").pop();\n      if (url !== \"about_us\" &amp;&amp; url !== \"#why-skill-swap\" &amp;&amp; url === \"\") {\n        navigate(\"/login\");\n      }\n    }\n    return () =&gt; {\n      window.removeEventListener(\"popstate\", handleUrlChange);\n    };\n  }, [window.location.href]);\n\n  return &lt;UserContext.Provider value={{ user, setUser }}&gt;{children}&lt;/UserContext.Provider&gt;;\n};\n\nconst useUser = () =&gt; {\n  return useContext(UserContext);\n};\n\nexport { UserContextProvider, useUser };\n</code></pre></li> <li>Now use the user context api state anywhere you want without fear of reloading and data disappearing</li> <li>Do not forget to remove the user data from local storage when logging out. </li> </ol>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Material%20UI/Getting%20Started/","title":"Installation","text":"<pre><code>npm install @mui/material @emotion/react @emotion/styled\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Material%20UI/Navbar/","title":"Navbar","text":"<pre><code>import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport useScrollTrigger from \"@mui/material/useScrollTrigger\";\nimport Slide from \"@mui/material/Slide\";\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n  });\n\n  return (\n    &lt;Slide appear={false} direction=\"down\" in={!trigger}&gt;\n      {children}\n    &lt;/Slide&gt;\n  );\n}\n\nconst Navbar = (props) =&gt; {\n  return (\n    &lt;&gt;\n      &lt;HideOnScroll {...props}&gt;\n        &lt;AppBar&gt;\n          &lt;Toolbar&gt;\n            &lt;Typography variant=\"h6\" component=\"div\"&gt;\n              SkillSwap\n            &lt;/Typography&gt;\n          &lt;/Toolbar&gt;\n        &lt;/AppBar&gt;\n      &lt;/HideOnScroll&gt;\n      &lt;Toolbar /&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default Navbar;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Context%20API/","title":"Context API","text":"<p>Create a file named UserContext.js or any Context you need</p> <pre><code>import React from 'react';\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n</code></pre> <p>Create a file named UserContextProvider.jsx  or any context provider you need</p> <pre><code>import React, {userState} from 'react'\n\nimport UserContext from './UserContext'\n\nconst UserContextProvider = ({children}) =&gt;{\n    const [user, setUser] = userState(null);\n    return (\n        &lt;UserContext.Provider value={{user, setUser}}&gt;\n            {children}\n        &lt;/UserContext.Provider&gt;\n    )\n}\n\nexport default UserContextProvider\n</code></pre> <p>Now wrap the component app.js with the context provider</p> <pre><code>const App = () =&gt;{\n    return (\n        &lt;UserContextProvider&gt;\n            ...\n        &lt;/UserContextProvider&gt;\n    )\n}\n</code></pre> <p>Now how to use this data</p> <pre><code>import {useContext} from 'react'\nimport UserContext from '../context/UserContext'\n\nfunction Login(){\n    const {setUser} = useContext(UserContext)\n}\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Form%20Handling/","title":"Form Handling","text":"<p>[!SUMMARY]- Table of Contents</p> <ul> <li>[[Form Handling#Handle Change Code|Handle Change Code]]</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Form%20Handling/#handle-change-code","title":"Handle Change Code","text":"<ul> <li>checkbox need to be treated differently</li> <li>rest types can be handles just by creating a formdata useState in react</li> </ul> <pre><code>    const [formData, setFormData] = useState({\n        year: \"\",\n        batches: [],\n        questions: [],\n    });\n\n    const handleChange = (e) =&gt; {\n        const { name, value, type, checked } = e.target;\n        console.log(name, value, type, checked);\n        if (type === \"checkbox\") {\n            if (checked) {\n                setFormData((prevData) =&gt; ({\n                    ...prevData,\n                    batches: [...prevData.batches, name],\n                }));\n            } else {\n                setFormData((prevData) =&gt; ({\n                    ...prevData,\n                    batches: prevData.batches.filter((batchName) =&gt; batchName !== name),\n                }));\n            }\n        } else {\n            // Handle other input types\n            setFormData((prevData) =&gt; ({\n                ...prevData,\n                [name]: value,\n            }));\n        }\n    };\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Proxying%20API%20Requests/","title":"Proxying API Requests","text":"<p>When building a web application with React.js, you may need to request a backend server. However, if the backend server does not allow Cross-Origin Resource Sharing (CORS), you may encounter an error when requesting from the frontend application. In this case, you can use the proxy server to forward requests from the front-end application to the back-end server.</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Proxying%20API%20Requests/#vite-configuration","title":"Vite Configuration","text":"<ul> <li>Go inside vite.config.js</li> <li>add server configuration  <pre><code>server:{\n    proxy:{\n    '/api' : 'https://localhost:3000', \n    }\n}\n</code></pre></li> </ul> <p>This will append 'https://localhost:3000' in front of any api call which is made to the route having /api in it. This will make server believe that the api call is made from 'https://localhost:3000'. </p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Warnings/Props%20Passing%20Error/","title":"Props Passing Error","text":"<p>[!SUMMARY]- Table of Contents \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0- [[Props Passing Error#Code Showing Warning|Code Showing Warning]] \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0- [[Props Passing Error#Code Not Showing Error|Code Not Showing Error]]</p> <p>Invalid value for prop <code>changeindex</code> on  tag. Either remove it from the element, or pass a string or number value to keep it in the DOM</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Warnings/Props%20Passing%20Error/#code-showing-warning","title":"Code Showing Warning","text":"<pre><code>function OffCanvasExample(props){\nreturn (\n...\n&lt;Offcanvas.Body&gt;\n    {props.questions.map((question, index) =&gt; (\n        &lt;div key={index} onClick={(event) =&gt; props.changeindex(index)} style={{ cursor: \"pointer\" }}&gt;\n            ...\n        &lt;/div&gt;\n    ))}\n&lt;/Offcanvas.Body&gt;\n)\n}\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React/Warnings/Props%20Passing%20Error/#code-not-showing-error","title":"Code Not Showing Error","text":"<pre><code>function OffCanvasExample({changeindex, ...props}){\nreturn (\n...\n&lt;Offcanvas.Body&gt;\n    {props.questions.map((question, index) =&gt; (\n        &lt;div key={index} onClick={(event) =&gt; changeindex(index)} style={{ cursor: \"pointer\" }}&gt;\n            ...\n        &lt;/div&gt;\n    ))}\n&lt;/Offcanvas.Body&gt;\n)\n}\n</code></pre> <p>just destructured the changeindex function while receiving the props</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Footer/","title":"Footer","text":"<pre><code>import Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst Footer = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Navbar sticky=\"bottom\" bg=\"primary\" data-bs-theme=\"dark\"&gt;\n        &lt;Container className=\"mx-auto w-100 d-flex justify-content-center\"&gt;\n          &lt;div className=\"text-center\"&gt;Copyright &amp;copy; 2024 SkillSwap. All rights reserved.&lt;/div&gt;\n        &lt;/Container&gt;\n      &lt;/Navbar&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default Footer;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Footer/#how-to-make-footer-not-collapse","title":"How to make Footer not collapse","text":"<p>set height of the page to 91vh</p> <p>Inside app.jsx <pre><code>const App = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;LandingPage /&gt;} /&gt;\n        &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n        &lt;Route path=\"/register\" element={&lt;Register /&gt;} /&gt;\n        &lt;Route path=\"/discover\" element={&lt;Discover /&gt;} /&gt;\n        &lt;Route path=\"/about_us\" element={&lt;AboutUs /&gt;} /&gt;\n        &lt;Route path=\"/why_skillswap\" element={&lt;WhySkillSwap /&gt;} /&gt;\n        &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n      &lt;/Routes&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre></p> <p>Inside login page <pre><code>import Button from \"react-bootstrap/Button\";\nimport { FaGoogle } from \"react-icons/fa\";\n\nconst Login = () =&gt; {\n  const handleGoogleLogin = () =&gt; {\n    window.location.href = \"http://localhost:8000/auth/google\";\n  };\n\n  return (\n    &lt;&gt;\n      &lt;div style={{ height: \"90vh\" }} className=\"d-flex justify-content-center align-items-center \"&gt;\n        &lt;div style={{ height: \"300px\" }} className=\"d-flex flex-column justify-content-between p-3 border rounded\"&gt;\n          &lt;h1 style={{ textDecoration: \"underline\" }} className=\"text-center\"&gt;\n            Login\n          &lt;/h1&gt;\n          &lt;div className=\"h-100 d-flex justify-content-center align-items-center\"&gt;\n            &lt;Button variant=\"primary\" className=\"mx-auto\" onClick={handleGoogleLogin}&gt;\n              &lt;FaGoogle /&gt;\n              &amp;nbsp; Login with Google\n            &lt;/Button&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\nexport default Login;\n</code></pre></p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Getting%20Started/","title":"Getting Started","text":"<p>[!SUMMARY]- Table of Contents - [[Getting Started#Installation|Installation]] - [[Getting Started#React-Bootstrap Components|React-Bootstrap Components]]</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Getting%20Started/#installation","title":"Installation","text":"<p>Install package</p> <pre><code>npm i react-bootstrap bootstrap\n</code></pre> <p>Import CSS file in the main.jsx</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n    &lt;React.StrictMode&gt;\n        &lt;App /&gt;\n    &lt;/React.StrictMode&gt;\n);\n</code></pre> <p>Now you can start using react-bootstrap components.</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Getting%20Started/#react-bootstrap-components","title":"React-Bootstrap Components","text":"<p>[[Navbar]] Footer</p>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Navbar/","title":"Navbar","text":"<pre><code>import Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link } from \"react-router-dom\";\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\n\nconst Header = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;Navbar key=\"md\" expand=\"md\" className=\"bg-body-primary\" bg=\"primary\"&gt;\n        &lt;Container fluid&gt;\n          &lt;Navbar.Brand href=\"/\"&gt;SkillSwap&lt;/Navbar.Brand&gt;\n          &lt;Navbar.Toggle aria-controls={`offcanvasNavbar-expand-md`} /&gt;\n          &lt;Navbar.Offcanvas\n            id={`offcanvasNavbar-expand-md`}\n            aria-labelledby={`offcanvasNavbarLabel-expand-md`}\n            placement=\"end\"\n          &gt;\n            &lt;Offcanvas.Header closeButton&gt;\n              &lt;Offcanvas.Title id={`offcanvasNavbarLabel-expand-md`}&gt;SkillSwap&lt;/Offcanvas.Title&gt;\n            &lt;/Offcanvas.Header&gt;\n            &lt;Offcanvas.Body&gt;\n              &lt;Nav className=\"justify-content-end flex-grow-1 pe-3\"&gt;\n                &lt;Nav.Link as={Link} to=\"/\"&gt;\n                  Home\n                &lt;/Nav.Link&gt;\n                &lt;Nav.Link as={Link} to=\"/about_us\"&gt;\n                  About Us\n                &lt;/Nav.Link&gt;\n                &lt;Nav.Link as={Link} to=\"/why_skillswap\"&gt;\n                  Why SkillSwap\n                &lt;/Nav.Link&gt;\n                &lt;Nav.Link as={Link} to=\"/login\"&gt;\n                  Login/Register\n                &lt;/Nav.Link&gt;\n              &lt;/Nav&gt;\n            &lt;/Offcanvas.Body&gt;\n          &lt;/Navbar.Offcanvas&gt;\n        &lt;/Container&gt;\n      &lt;/Navbar&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default Header;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Utility%20classes/","title":"Spacing","text":"<ul> <li><code>m</code>\u00a0- for classes that set\u00a0<code>margin</code></li> <li><code>p</code>\u00a0- for classes that set\u00a0<code>padding</code></li> </ul> <p>Where\u00a0sides\u00a0is one of:</p> <ul> <li><code>t</code>\u00a0- for classes that set\u00a0<code>margin-top</code>\u00a0or\u00a0<code>padding-top</code></li> <li><code>b</code>\u00a0- for classes that set\u00a0<code>margin-bottom</code>\u00a0or\u00a0<code>padding-bottom</code></li> <li><code>s</code>\u00a0- (start) for classes that set\u00a0<code>margin-left</code>\u00a0or\u00a0<code>padding-left</code>\u00a0in LTR,\u00a0<code>margin-right</code>\u00a0or\u00a0<code>padding-right</code>\u00a0in RTL</li> <li><code>e</code>\u00a0- (end) for classes that set\u00a0<code>margin-right</code>\u00a0or\u00a0<code>padding-right</code>\u00a0in LTR,\u00a0<code>margin-left</code>\u00a0or\u00a0<code>padding-left</code>\u00a0in RTL</li> <li><code>x</code>\u00a0- for classes that set both\u00a0<code>*-left</code>\u00a0and\u00a0<code>*-right</code></li> <li><code>y</code>\u00a0- for classes that set both\u00a0<code>*-top</code>\u00a0and\u00a0<code>*-bottom</code></li> <li>blank - for classes that set a\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0on all 4 sides of the element</li> </ul> <p>Where\u00a0size\u00a0is one of:</p> <ul> <li><code>0</code>\u00a0- for classes that eliminate the\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0by setting it to\u00a0<code>0</code></li> <li><code>1</code>\u00a0- (by default) for classes that set the\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0to\u00a0<code>$spacer * .25</code></li> <li><code>2</code>\u00a0- (by default) for classes that set the\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0to\u00a0<code>$spacer * .5</code></li> <li><code>3</code>\u00a0- (by default) for classes that set the\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0to\u00a0<code>$spacer</code></li> <li><code>4</code>\u00a0- (by default) for classes that set the\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0to\u00a0<code>$spacer * 1.5</code></li> <li><code>5</code>\u00a0- (by default) for classes that set the\u00a0<code>margin</code>\u00a0or\u00a0<code>padding</code>\u00a0to\u00a0<code>$spacer * 3</code></li> <li><code>auto</code>\u00a0- for classes that set the\u00a0<code>margin</code>\u00a0to auto</li> </ul>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/React-Bootstrap/Utility%20classes/#sizing","title":"Sizing","text":"<pre><code>&lt;div class=\"w-25 p-3\" style=\"background-color: #eee;\"&gt;Width 25%&lt;/div&gt;\n&lt;div class=\"w-50 p-3\" style=\"background-color: #eee;\"&gt;Width 50%&lt;/div&gt;\n&lt;div class=\"w-75 p-3\" style=\"background-color: #eee;\"&gt;Width 75%&lt;/div&gt;\n&lt;div class=\"w-100 p-3\" style=\"background-color: #eee;\"&gt;Width 100%&lt;/div&gt;\n&lt;div class=\"w-auto p-3\" style=\"background-color: #eee;\"&gt;Width auto&lt;/div&gt;\n</code></pre> <pre><code>max-height - mh and mw for min-height\n&lt;div class=\"mh-100\" style=\"width: 100px; height: 200px; background-color: rgba(0,0,255,.1);\"&gt;Max-height 100%\n&lt;/div&gt;\nwidth and height relative to the viewport.\n&lt;div class=\"min-vw-100\"&gt;Min-width 100vw&lt;/div&gt;\n&lt;div class=\"min-vh-100\"&gt;Min-height 100vh&lt;/div&gt;\n&lt;div class=\"vw-100\"&gt;Width 100vw&lt;/div&gt;\n&lt;div class=\"vh-100\"&gt;Height 100vh&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Redux/react%20Redux%20Tookit/","title":"Installation","text":"<pre><code>npm install @reduxjs/toolkit react-redux\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Redux/react%20Redux%20Tookit/#steps","title":"Steps","text":"<ol> <li> <p>Create a app folder in the root file and create a store file  <pre><code>import {configureStore} from '@reduxjs/toolkit';\nimport todoReducer from '../features/todo/todoSlice';\n\nexport const store = configureStore({\n    reducer: todoReducer\n})\n</code></pre></p> </li> <li> <p>Create a feature folder inside that create a todoSlice.js  <pre><code>import { createSlice, nanoid } from '@reduxjs/toolkit';\n\n// Initial state with a sample todo item\nconst initialState = {\n    todos: [{ id: 1, text: \"Hello world\" }]\n}\n\n// Create a slice of the Redux store for todos\nexport const todoSlice = createSlice({\n    name: 'todo', // Name of the slice\n    initialState, // Initial state for the slice\n    reducers: {\n        // Reducer to add a new todo\n        addTodo: (state, action) =&gt; {\n            const todo = {\n                id: nanoid(), // Generate a unique ID for the new todo\n                text: action.payload // Use the payload as the text of the todo\n            }\n            state.todos.push(todo) // Add the new todo to the state's todos array\n        },`\n        // Reducer to remove a todo by ID\n        removeTodo: (state, action) =&gt; {\n            state.todos = state.todos.filter((todo) =&gt; todo.id !== action.payload)\n            // Filter out the todo with the matching ID from the state's todos array\n        },\n    }\n})\n\n// Export the action creators for adding and removing todos\nexport const { addTodo, removeTodo } = todoSlice.actions\n\n// Export the reducer to be included in the Redux store\nexport default todoSlice.reducer\n</code></pre></p> </li> <li> <p>Now wrap the component with the provider to use the store and its functionality inside the main.jsx <pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.jsx'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport {store} from './app/store'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n)\n</code></pre></p> </li> <li> <p>Now to use the function create a component addTodo using the useDispatch <pre><code>import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addTodo } from '../features/todo/todoSlice' \n\nfunction AddTodo() {\n    // Local state to manage input value\n    const [input, setInput] = useState('')\n\n    // useDispatch hook to get the dispatch function\n    const dispatch = useDispatch()\n\n    // Handler for form submission to add a new todo\n    const addTodoHandler = (e) =&gt; {\n        e.preventDefault() // Prevent the default form submission behavior\n        dispatch(addTodo(input)) // Dispatch the addTodo action with the input value\n        setInput('') // Clear the input field\n    }\n\n    return (\n        &lt;form onSubmit={addTodoHandler} className=\"space-x-3 mt-12\"&gt;\n            &lt;input\n                type=\"text\"\n                className=\"bg-gray-800 rounded border border-gray-700 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-900 text-base outline-none text-gray-100 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out\"\n                placeholder=\"Enter a Todo...\"\n                value={input} // Bind input value to the local state\n                onChange={(e) =&gt; setInput(e.target.value)} // Update state on input change\n            /&gt;\n            &lt;button\n                type=\"submit\"\n                className=\"text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg\"\n            &gt;\n                Add Todo\n            &lt;/button&gt;\n        &lt;/form&gt;\n    )\n}\nexport default AddTodo\n</code></pre></p> </li> <li> <p>Use Use-selector by creating todo.jsx file  <pre><code>import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { removeTodo } from '../features/todo/todoSlice'\n\nfunction Todos() {\n    // useSelector hook to get the todos from the Redux store\n    const todos = useSelector(state =&gt; state.todos)\n\n    // useDispatch hook to get the dispatch function\n    const dispatch = useDispatch()\n\n    return (\n        &lt;&gt;\n        &lt;div&gt;Todos&lt;/div&gt;\n        &lt;ul className=\"list-none\"&gt;\n            {todos.map((todo) =&gt; (\n                &lt;li key={todo.id} // Unique key for each todo item&gt;\n                    &lt;div className='text-white'&gt;{todo.text}&lt;/div&gt;\n                    &lt;button\n                        onClick={() =&gt; dispatch(removeTodo(todo.id))} // Dispatch removeTodo action with todo id\n                    &gt;\n                    Delete TODO\n                    &lt;/button&gt;\n                &lt;/li&gt;\n            ))}\n        &lt;/ul&gt;\n        &lt;/&gt;\n    )\n}\n\nexport default Todos\n</code></pre></p> </li> </ol> <pre><code>\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Frontend-Development/Redux/react-redux%20dev%20Tools/","title":"Steps","text":"<ol> <li>Install the extension</li> <li>Go to the webpage</li> <li>inspect the web-page and then go the menu form where you see the console button and than at last you will see the redux option</li> <li>you can see trace and state and actions listed there</li> </ol>"},{"location":"legacy-docs/My%20Documentation/General/Gemini%20Api/","title":"Gemini Api","text":"<pre><code>import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst GetGiminiResponse = async (prompt) =&gt; {\n    try {\n        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\n        const generationConfig = {\n            maxOutputTokens: 250,\n            temperature: 0, //this is used to control the randomness of the output, it ranges from 0 to 1, the higher the value the more random the output\n            topP: 1,\n            topK: 16, //this is used to control the diversity of the output, it ranges from 1 to infinity, the higher the value the more diverse the output\n        };\n\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-pro\",\n            generationConfig,\n        });\n\n        const result = await model.generateContent(prompt);\n        const response = result.response;\n        const text = response.text();\n        return text;\n    } catch (e) {\n        console.log(e);\n        return \"Error Generating AI response. Please try again later.\";\n    }\n};\n\nconst Prompt = \"Write a program to print hello world in C++\";\nconst GeminiResponse = await GetGiminiResponse(Prompt);\nconsole.log(GeminiResponse);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/General/Gmail%20API/","title":"Gmail API","text":"<ol> <li>Create a project in google console</li> <li>Create a oauth consent screen with the test user as yourself</li> <li>Create a oauth ID with the desktop as the service and save it as <code>oauth_credentials.json</code></li> </ol> <pre><code>// Taken reference from here https://github.com/abhishekchhibber/Gmail-Api-through-Python/tree/master\n\nimport fs from \"fs/promises\";\nimport path from \"path\";\nimport { authenticate } from \"@google-cloud/local-auth\";\nimport process from \"process\";\nimport { google } from \"googleapis\";\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = [\"https://www.googleapis.com/auth/gmail.readonly\"];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconsole.log(\"Process.cwd: \", process.cwd());\nconst TOKEN_PATH = path.join(process.cwd(), \"token.json\");\nconst CREDENTIALS_PATH = path.join(process.cwd(), \"oauth_credentials.json\");\n\n/**\n * Reads previously authorized credentials from the save file.\n *\n * @return {Promise&lt;OAuth2Client|null&gt;}\n */\nasync function loadSavedCredentialsIfExist() {\n  console.log(\"Inside Load Saved Credentials Function\");\n  try {\n    const content = await fs.readFile(TOKEN_PATH);\n    // console.log(\"Content: \", content);\n    const credentials = await JSON.parse(content);\n    // console.log(\"Credentials\", credentials);\n    return google.auth.fromJSON(credentials);\n  } catch (err) {\n    return null;\n  }\n}\n\n/**\n * Serializes credentials to a file compatible with GoogleAuth.fromJSON.\n *\n * @param {OAuth2Client} client\n * @return {Promise&lt;void&gt;}\n */\nasync function saveCredentials(client) {\n  console.log(\"Inside Saving credentials Function\");\n\n  const content = await fs.readFile(CREDENTIALS_PATH);\n  const keys = JSON.parse(content);\n  const key = keys.installed || keys.web;\n  const payload = JSON.stringify({\n    type: \"authorized_user\",\n    client_id: key.client_id,\n    client_secret: key.client_secret,\n    refresh_token: client.credentials.refresh_token,\n  });\n  await fs.writeFile(TOKEN_PATH, payload);\n}\n\n/**\n * Load or request or authorization to call APIs.\n *\n */\nasync function authorize() {\n  console.log(\"Inside Authorize Function\");\n  let client = await loadSavedCredentialsIfExist();\n  // console.log(\"Client from Storage: \", client);\n  if (client) {\n    return client;\n  }\n  client = await authenticate({\n    keyfilePath: CREDENTIALS_PATH,\n    scopes: SCOPES,\n  });\n  // console.log(\"Client after authentication: \", client);\n  if (client.credentials) {\n    await saveCredentials(client);\n  }\n  return client;\n}\n\n/**\n * Lists the labels in the user's account.\n *\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\nasync function listMessages(auth) {\n  console.log(\"Inside List Labels Function\");\n\n  const gmail = google.gmail({ version: \"v1\", auth });\n  // console.log(\"Gmail: \", gmail.users.messages);\n  // const res = await gmail.users.labels.list({\n  //   userId: \"me\",\n  // });\n  const res = await gmail.users.messages.list({\n    userId: \"me\",\n    labelIds: [\"INBOX\", \"UNREAD\"],\n  });\n  // console.log(\"response: \", res);\n  const messages = res.data.messages;\n  if (!messages || messages.length === 0) {\n    console.log(\"No messages found.\");\n    return;\n  }\n  console.log(\"-------------messages:-----------------\");\n  messages.forEach(async (message, index) =&gt; {\n    // console.log(`${index + 1} ${message.id}`);\n    const messageRes = await gmail.users.messages.get({\n      userId: \"me\",\n      id: message.id,\n    });\n    // console.log(\"Message Response: \", messageRes);\n    const payload = messageRes.data.payload;\n    // console.log(\"Payload: \", payload);\n    const headers = payload.headers;\n\n    for (let i = 0; i &lt; headers.length; i++) {\n      if (headers[i].name === \"From\") {\n        console.log(headers[i].name, headers[i].value);\n      }\n      if (headers[i].name === \"Subject\") {\n        console.log(headers[i].name, headers[i].value);\n      }\n      if (headers[i].name === \"Date\") {\n        console.log(headers[i].name, headers[i].value);\n      }\n    }\n    console.log(\"-------------------------------------------------\");\n  });\n}\n\nauthorize().then(listMessages).catch(console.error);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/General/Socket.io/","title":"Socket.io","text":"<ol> <li>Install the socket.io package inside the backend folder <code>npm i socket.io</code></li> <li>inside the index.js create the socket server <pre><code>import dotenv from \"dotenv\";\nimport connectDB from \"./config/connectDB.js\";\nimport { app } from \"./app.js\";\nimport { Server } from \"socket.io\";\n\ndotenv.config();\n\nconst port = process.env.PORT || 8000;\n\nconnectDB()\n  .then(() =&gt; {\n    console.log(\"Database connected\");\n    const server = app.listen(port, () =&gt; {\n      console.log(`Server listening on port ${port}`);\n    });\n\n    const io = new Server(server, {\n      pingTimeout: 60000,\n      cors: {\n        origin: \"*\",\n      },\n    });\n\n    io.on(\"connection\", (socket) =&gt; {\n      console.log(\"Connected to socket\");\n      socket.on(\"setup\", (userData) =&gt; {\n        console.log(\"Connected to socket in setup: \", userData.username);\n        socket.join(userData._id);\n        socket.emit(\"connected\");\n      });\n      socket.off(\"setup\", () =&gt; {\n        console.log(\"Disconnected from socket\");\n        socket.leave(userData._id);\n      });\n    });\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });\n</code></pre></li> <li>socket.on means creating a listener that will listen to the event from the client</li> <li>connection is special listener <pre><code>io.on(\"connection\", (socket) =&gt; {\n  console.log(\"Connected to socket\");\n\n});\n</code></pre></li> <li>Corresponding the frontend will look like <pre><code>socket = io(\"url of the backend\");\n</code></pre></li> <li>After connection you can create different event listeners using the socket <pre><code>io.on(\"connection\", (socket) =&gt; {\n  console.log(\"Connected to socket\");\n\n  socket.on(\"join chat\", (room) =&gt; {\n    console.log(\"Joining chat: \", room);\n    socket.join(room);\n    console.log(\"Joined chat: \", room);\n  });\n\n});\n</code></pre></li> <li>Inside the frontend you can call for the event using emit <pre><code>socket.emit(\"join chat\", id);\n</code></pre></li> <li>similarly you can define event listeners in the frontend and than emit message or something to them from backend.</li> <li><code>io.to(id).emit(\"message recieved\", newMessage)</code> can be used to send message to a particular room;</li> <li>make sure to remove the event listeners using off  <pre><code>useEffect(() =&gt; {\n    socket = io(axios.defaults.baseURL);\n    if (user) {\n      socket.emit(\"setup\", user);\n    }\n    socket.on(\"connected\", () =&gt; setSocketConnected(true));\n    socket.on(\"typing\", () =&gt; setIsTyping(true));\n    socket.on(\"stop typing\", () =&gt; setIsTyping(false));\n    socket.on(\"message recieved\", (newMessageRecieved) =&gt; {\n      console.log(\"New Message Recieved: \", newMessageRecieved);\n      console.log(\"Selected Chat: \", selectedChat);\n      console.log(\"Selected Chat ID: \", selectedChat.id);\n      console.log(\"New Message Chat ID: \", newMessageRecieved.chatId._id);\n      if (selectedChat &amp;&amp; selectedChat.id === newMessageRecieved.chatId._id) {\n        setChatMessages((prevState) =&gt; [...prevState, newMessageRecieved]);\n      }\n    });\n    return () =&gt; {\n      socket.off(\"connected\");\n      socket.off(\"typing\");\n      socket.off(\"stop typing\");\n      socket.off(\"message recieved\");\n    };\n}, [selectedChat]);\n</code></pre></li> </ol>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/","title":"Access localhost of other Laptop","text":"<p>You can access localhost of other devices on same network (connected to same hotspot or wifi)</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#step-1-find-the-ip-address-of-the-computer","title":"Step 1: Find the IP address of the computer","text":"<p>You will have to find the IP address of the computer whose localhost you want to access.</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#find-ip-address-of-windows-os","title":"Find IP address of Windows OS","text":"<ul> <li>Press Window + R, and type \u2018cmd\u2019, Press \u2018OK\u2019. </li> <li>It will prompt you a command line screen</li> <li>Now Run command ipconfig | findstr /i \u201cipv4\u201d</li> </ul> <p><pre><code>IPv4 Address. . . . . . . . . . . . . . . . : 192.168.1.41\n</code></pre> Note the IP address There might be multiple IPv4 address showing some time (Don't know why) so might have to try all those (most probably the last one).</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#find-ip-address-on-linux","title":"Find IP address on Linux","text":"<ul> <li>Press Ctrl + Alt + T. It will prompt you the terminal screen</li> <li>Now Run command hostname -I</li> <li>Note the IP address</li> </ul> <pre><code>172.16.105.168\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#step-2-start-your-localhost-service","title":"Step 2: Start your localhost service","text":"<p>On your developer machine run localhost service, make sure to note what port number the localhost is being served on. If you are able to view application running locally on your machine via localhost.</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#step-3","title":"Step 3:","text":"<p>Now you can access the localhost of developer machine on any device\u2019s browser navigate to  <pre><code>http://&lt;local IP address of developer machine&gt;:&lt;port number&gt;\n</code></pre></p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#example","title":"Example:","text":"<p>If I am running developer localhost on http://localhost:5173/ and my local IP Address is 192.168.1.48 than on my mobile device/secondary device browser i will navigate to http://192.168.1.48:5173.</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Access%20localhost%20of%20other%20Laptop/#reference","title":"Reference","text":"<p>https://www.linkedin.com/pulse/how-access-localhost-other-devices-mobile-laptop-harsh-verma/</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Render%20Deployment%20-%20Directory%20Error/","title":"Render Deployment   Directory Error","text":"<p>_____dirname does not work in docker environment. To overcome such use relative path like ./, etc.</p>"},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Render%20Deployment%20-%20Directory%20Error/#const-scriptpath-scriptname-const-executablepath-executablename-let-callbackexecuted-false-fswritefilescriptpath-code-err-if-err-if-callbackexecuted-callback-success-false-message-error-while-writing-error-err-callbackexecuted-true-return","title":"<pre><code>const scriptPath = \"./\" + scriptName;\n    const executablePath = \"./\" + executableName;\n    let callbackExecuted = false;\n    fs.writeFile(scriptPath, Code, (err) =&gt; {\n        if (err) {\n            if (!callbackExecuted) {\n                callback({\n                    success: false,\n                    message: \"Error While Writing!\",\n                    error: err\n                });\n                callbackExecuted = true;\n            }\n            return;\n        }\n</code></pre>","text":""},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Render%20Deployment%20-%20Directory%20Error/#tags","title":"Tags","text":""},{"location":"legacy-docs/My%20Documentation/Miscellaneous/Render%20Deployment%20-%20Directory%20Error/#render-deployment-docker-file-path-error","title":"render #deployment #docker #file-path-error","text":""},{"location":"legacy-docs/My%20Documentation/Packages/Axios/","title":"Axios","text":"<p>[!SUMMARY]- Table of Contents - [[Axios#Installation|Installation]] - [[Axios#Basic Code|Basic Code]] - [[Axios#Set default URL|Set default URL]] - [[Axios#Set protected call function|Set protected call function]]</p>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#installation","title":"Installation","text":"<pre><code>npm install axios\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#basic-code","title":"Basic Code","text":"<pre><code>const getUser = async () =&gt; {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#set-default-url","title":"Set default URL","text":"<ul> <li>In the starting file of react application write the following  <pre><code>if (import.meta.env.DEV) { //for vite application\n    console.log(\"Running in development mode\");\n    axios.defaults.baseURL = import.meta.env.VITE_LOCALHOST;\n} else {\n    console.log(\"Running in production mode\");\n    axios.defaults.baseURL = import.meta.env.VITE_SERVER_URL;\n}\n</code></pre></li> </ul> <p>Reference Link -&gt; Vitejs.dev</p> <p>You do not require to create .Dev environment variables in .env, it is default for vite application  For other react application you can use  following :</p> <pre><code>if (process.env.NODE_ENV === \"development\") {\n    console.log(\"Running in development mode\");\n    axios.defaults.baseURL = process.env.REACT_APP_LOCALHOST;\n} else {\n    console.log(\"Running in production mode\");\n    axios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;\n}\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#set-protected-call-function","title":"Set protected call function","text":""},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#method-1-when-backend-returns-a-message","title":"Method 1 - When backend returns a message","text":"<pre><code>import axios from \"axios\";\nimport Cookies from \"js-cookie\";\n\nasync function ApiCall(url, httpMethod, data) {\n    const token = Cookies.get(\"studentsToken\") || Cookies.get(\"professorsToken\");\n    try {\n        const config = {\n            headers: {\n                Authorization: `Bearer ${token}`,\n            },\n        };\n        if (httpMethod === \"GET\") {\n            const response = await axios.get(url, config);\n            if (response.data.message === \"Invalid token\" || response.data.message === \"No Token Provided\") {\n                // remove Cookies if used\n                window.location.href = \"/\";\n            }\n            return response;\n        } else if (httpMethod === \"POST\") {\n            const response = await axios.post(url, data, config);\n            if (response.data.message === \"Invalid token\" || response.data.message === \"No Token Provided\") {\n                // remove Cookies if used\n                window.location.href = \"/\";\n            }\n            return response;\n        }\n    } catch (error) {\n        console.error(\"Error in API call:\", error);\n        throw error;\n    }\n}\n\nexport default ApiCall;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#method-2-when-backend-return-status-code","title":"Method 2 - When Backend return status code","text":"<pre><code>import { toast } from \"react-toastify\";\nimport axios from \"axios\";\n\nconst ApiCall = async (url, method, navigate, data) =&gt; {\n  console.log(\"******** Inside ApiCall function ********\");\n\n  if (method === \"GET\") {\n    try {\n      const response = await axios.get(url);\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in API call:\", error);\n      if (error.response.status === 401) {\n        toast.error(\"You are not authorized to access this page. Please login first.\");\n        navigate(\"/login\");\n      } else if (error.response.status === 404) {\n        toast.error(\"The requested resource was not found.\");\n        navigate(\"/\");\n      } else if (error.response.status === 500) {\n        toast.error(\"Server Error. Please try again later.\");\n        navigate(\"/\");\n      } else {\n        toast.error(\"An error occurred. Please try again later.\");\n        navigate(\"/\");\n      }\n    }\n  } else if (method === \"POST\") {\n    try {\n      const response = await axios.post(url, data);\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in API call:\", error);\n      if (error.response.status === 401) {\n        toast.error(\"You are not authorized to access this page. Please login first.\");\n        navigate(\"/login\");\n      } else if (error.response.status === 404) {\n        toast.error(\"The requested resource was not found.\");\n        navigate(\"/\");\n      } else if (error.response.status === 500) {\n        toast.error(\"Server Error. Please try again later.\");\n        navigate(\"/\");\n      } else {\n        toast.error(\"An error occurred. Please try again later.\");\n        navigate(\"/\");\n      }\n    }\n  }\n};\n\nexport default ApiCall;\n</code></pre> <p>Make axios call using protected function</p> <pre><code>import ApiCall from \"../../util/ApiCall\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Discover = () =&gt; {\n  const navigate = useNavigate();\n\n  useEffect(() =&gt; {\n    const getUser = async () =&gt; {\n      const response = await ApiCall(\"/user/getDetails\", \"GET\", navigate, null);\n      console.log(response.data);\n      setUser(response.data.name);\n    };\n    getUser();\n  }, []);\n\n  return &lt;&gt;&lt;/&gt;;\n};\n\nexport default Discover;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#send-post-request-with-token","title":"Send post request with token","text":"<pre><code>const config = {\n                headers: {\n                    Authorization: `Bearer ${\n                        JSON.parse(localStorage.getItem(\"userInfo\")).jwt\n                    }`,\n                },\n            };\n            const res = await axios.post(\n                \"/admin/sendTicketafterVerification/\",\n                {},\n                config\n            );\n            console.log(\"After Sending Ticket\", res);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#send-get-request-with-token","title":"Send get request with token","text":"<pre><code>const response = await axios.get(\n                `/admin/verify/${props.details._id}`,\n                config\n            );\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#how-to-show-uploading-of-file-in-frontend","title":"How to show uploading of file in frontend","text":"<p>Yes, you can add a feature to show the upload percentage of the file using Axios's <code>onUploadProgress</code> event. This event allows you to track the progress of the upload and update the state accordingly. Here's how you can do it:</p>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#updated-frontend-code-with-upload-progress","title":"Updated Frontend Code with Upload Progress","text":"<p>FileUpload.js:</p> <pre><code>import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst FileUpload = () =&gt; {\n  const [file, setFile] = useState(null);\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n\n  const handleFileChange = (e) =&gt; {\n    setFile(e.target.files[0]);\n  };\n\n  const handleNameChange = (e) =&gt; {\n    setName(e.target.value);\n  };\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', name);\n\n    try {\n      const res = await axios.post('http://localhost:5000/upload', formData, {\n        onUploadProgress: (progressEvent) =&gt; {\n          const { loaded, total } = progressEvent;\n          const percent = Math.round((loaded * 100) / total);\n          setUploadPercentage(percent);\n        },\n      });\n\n      setMessage(res.data.message);\n      setUploadPercentage(0); // Reset progress bar on successful upload\n    } catch (err) {\n      console.error(err);\n      setMessage('Upload failed');\n      setUploadPercentage(0); // Reset progress bar on error\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;input type=\"text\" placeholder=\"Enter name\" value={name} onChange={handleNameChange} /&gt;\n        &lt;input type=\"file\" onChange={handleFileChange} /&gt;\n        &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n      &lt;/form&gt;\n      {uploadPercentage &gt; 0 &amp;&amp; (\n        &lt;div&gt;\n          &lt;progress value={uploadPercentage} max=\"100\"&gt;{uploadPercentage}%&lt;/progress&gt;\n          &lt;span&gt;{uploadPercentage}%&lt;/span&gt;\n        &lt;/div&gt;\n      )}\n      &lt;p&gt;{message}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default FileUpload;\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#explanation","title":"Explanation:","text":"<ol> <li>State Management:</li> <li> <p><code>uploadPercentage</code>: State to keep track of the upload percentage.</p> </li> <li> <p>Event Handlers:</p> </li> <li><code>handleFileChange</code>: Updates the file state when a file is selected.</li> <li><code>handleNameChange</code>: Updates the name state when the input value changes.</li> <li> <p><code>handleSubmit</code>: Handles form submission, sets up the <code>FormData</code>, and makes the Axios request with <code>onUploadProgress</code>.</p> </li> <li> <p>Axios Request:</p> </li> <li>The <code>onUploadProgress</code> event is used to track the upload progress. It receives a <code>progressEvent</code> object, from which you can extract the <code>loaded</code> and <code>total</code> bytes.</li> <li> <p>Calculate the upload percentage and update the <code>uploadPercentage</code> state.</p> </li> <li> <p>Render:</p> </li> <li>Displays a progress bar and percentage text if <code>uploadPercentage</code> is greater than 0.</li> <li>Shows the response message or an error message after the upload attempt.</li> </ol>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#backend-code-unchanged","title":"Backend Code (unchanged):","text":"<p>server.js: <pre><code>const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\n\nconst app = express();\nconst PORT = 5000;\n\n// Set up storage engine\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) =&gt; {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) =&gt; {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  },\n});\n\n// Initialize upload\nconst upload = multer({ storage });\n\n// Middleware to handle file upload and name\napp.post('/upload', upload.single('file'), (req, res) =&gt; {\n  try {\n    const { name } = req.body;\n    console.log(req.file); // File information\n    console.log(name); // Name information\n    res.status(200).json({ message: 'File and name uploaded successfully', file: req.file, name });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Upload failed', error });\n  }\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n</code></pre></p>"},{"location":"legacy-docs/My%20Documentation/Packages/Axios/#summary","title":"Summary","text":"<ul> <li>The frontend code now includes an upload progress bar that updates in real-time using Axios's <code>onUploadProgress</code> event.</li> <li>The progress bar and percentage are displayed during the file upload process, providing feedback to the user.</li> </ul> <p>With this implementation, users will see a progress bar indicating the percentage of the file that has been uploaded, enhancing the user experience.</p>"},{"location":"legacy-docs/My%20Documentation/Packages/Colors/","title":"Colors","text":"<p>This npm package allows you to put colours in your console.log</p>"},{"location":"legacy-docs/My%20Documentation/Packages/React%20Toastify/","title":"React Toastify","text":"<p>[!SUMMARY]+ Table of Contents - [[React Toastify#Installation|Installation]] - [[React Toastify#Usage|Usage]] - [[React Toastify#Customisation|Customisation]] - [[React Toastify#Reference|Reference]]</p>"},{"location":"legacy-docs/My%20Documentation/Packages/React%20Toastify/#installation","title":"Installation","text":"<p>Install the package</p> <pre><code>npm install react-toastify\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/React%20Toastify/#usage","title":"Usage","text":"<p>Inside your main file (App.jsx)</p> <pre><code>import { ToastContainer } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;ToastContainer position='top-center'/&gt;\n    &lt;/div&gt;\n);\n}\n</code></pre> <p>Now to show toast you can import toast and use it wherever you want</p> <pre><code>import { toast} from 'react-toastify';\n\nfunction Component() {\n  return (\n    &lt;div className=\"Section\"&gt;\n      toast.info(\"Loged in Successfully\");\n      toast.error('Enter College Email-ID (Should have @mail in it)');\n      toast.success(\"Logging successfull\");\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/React%20Toastify/#customisation","title":"Customisation","text":"<p>For Customisation you can add property to the ToastContainer or toast itself</p> <pre><code>&lt;ToastContainer\n    position=\"top-right\"\n    autoClose={2000}\n    hideProgressBar={false}\n    newestOnTop={false}\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable\n    pauseOnHover\n    theme=\"light\"\n/&gt;\ntoast('\ud83e\udd84 Wow so easy!', {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: \"light\",\n});\n</code></pre>"},{"location":"legacy-docs/My%20Documentation/Packages/React%20Toastify/#reference","title":"Reference","text":"<p>npm package docs</p>"},{"location":"legacy-docs/My%20Documentation/React%20Native/Build%20android%20apk/","title":"Build android apk","text":"<ol> <li>Generate a keystore using the following command <code>keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</code></li> <li>follow the instruction given here - https://reactnative.dev/docs/signed-apk-android till Adding signing config to your app's Gradle config</li> <li>Now go to android folder and run the following command <code>./gradlew assembleRelease</code>.</li> <li>You can find the apk in _android/app/build/outputs/apk/app-release.apk</li> </ol>"},{"location":"legacy-docs/My%20Documentation/React%20Native/Get%20Started/","title":"Create react-native app","text":"<p>Use the following command to create an react-native app <pre><code>npx react-native init app_name --verbose\n</code></pre></p> <p>after that go inside the folder and perform <code>npm install</code> and <code>npm start</code></p> <p>now run the simulator by <code>npx react-native run-android</code></p>"},{"location":"legacy-docs/My%20Documentation/React%20Native/Get%20Started/#check-devices","title":"Check devices","text":"<p>Android Debug Bridge ( adb ) is a versatile command-line tool that lets you communicate with a device use the following command to use adb <code>adb --version</code> to check version <code>adb --devices</code> to check which devices are connected <code>lsusb</code> also to check devices <code>echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"22b8\", MODE=\"0666\", GROUP=\"plugdev\"' | sudo tee /etc/udev/rules.d/51-android-usb.rules</code> to change the rules of running simulator first and making it run on the connected device first priority.</p>"},{"location":"legacy-docs/My%20Documentation/React%20Native/Get%20Started/#how-to-use-the-usb-cable-and-get-output-on-your-mobile-device","title":"How to Use the USB cable and get output on your mobile device","text":"<p>Follow the given steps https://reactnative.dev/docs/running-on-device</p>"},{"location":"legacy-docs/Templates/Table%20of%20Contents/","title":"Table of Contents","text":"<p>[!SUMMARY]- Table of Contents &lt;%*</p> <p>let headers = await tp.file.content</p> <p>.split('\\n') // split file into lines</p> <p>.filter(t =&gt; t.match(/^[#]+\\s+/gi)) // only get headers</p> <p>.map(h =&gt; {</p> <p>let header_level = h.split(' ')[0].match(/#/g).length;</p> <p>// get header text without special characters like '[' and ']'</p> <p>let header_text = h.substring(h.indexOf(' ') + 1).replace(/[[]]+/g, '');</p> <p>let header_link = <code>[[${tp.file.title}#${header_text}|${header_text}]]</code></p> <p>// prepend block-quote (&gt;), indentation and bullet-point (-)</p> <p>return <code>&gt;${' \u00a0\u00a0\u00a0'.repeat(header_level - 1) + '- ' + header_link}</code>;</p> <p>})</p> <p>.join('\\n')</p> <p>%&gt;&lt;% headers %&gt;</p>"},{"location":"projects/Project%20Ideas/","title":"Project Ideas","text":"<p>Can't Think of any :(</p>"}]}